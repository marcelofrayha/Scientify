{"id":"8e99d550b41d09a66439b61fe0bbfc8e","_format":"hh-sol-build-info-1","solcVersion":"0.8.25","solcLongVersion":"0.8.25+commit.b61c2a91","input":{"language":"Solidity","sources":{"@ethsign/sign-protocol-evm/src/interfaces/ISP.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { IVersionable } from \"./IVersionable.sol\";\nimport { Schema } from \"../models/Schema.sol\";\nimport { Attestation, OffchainAttestation } from \"../models/Attestation.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title Sign Protocol Interface\n * @author Jack Xu @ EthSign\n */\ninterface ISP is IVersionable {\n    event SchemaRegistered(uint64 schemaId);\n    event AttestationMade(uint64 attestationId, string indexingKey);\n    event AttestationRevoked(uint64 attestationId, string reason);\n    event OffchainAttestationMade(string attestationId);\n    event OffchainAttestationRevoked(string attestationId, string reason);\n\n    /**\n     * @dev 0x9e87fac8\n     */\n    error Paused();\n    /**\n     * @dev 0x38f8c6c4\n     */\n    error SchemaNonexistent();\n    /**\n     * @dev 0x71984561\n     */\n    error SchemaWrongRegistrant();\n    /**\n     * @dev 0x8ac42f49\n     */\n    error AttestationIrrevocable();\n    /**\n     * @dev 0x54681a13\n     */\n    error AttestationNonexistent();\n    /**\n     * @dev 0xa65e02ed\n     */\n    error AttestationInvalidDuration();\n    /**\n     * @dev 0xd8c3da86\n     */\n    error AttestationAlreadyRevoked();\n    /**\n     * @dev 0xa9ad2007\n     */\n    error AttestationWrongAttester();\n    /**\n     * @dev 0xc83e3cdf\n     */\n    error OffchainAttestationExists();\n    /**\n     * @dev 0xa006519a\n     */\n    error OffchainAttestationNonexistent();\n    /**\n     * @dev 0xa0671d20\n     */\n    error OffchainAttestationAlreadyRevoked();\n    /**\n     * @dev 0xfdf4e6f9\n     */\n    error InvalidDelegateSignature();\n    /**\n     * @dev 0x5c34b9cc\n     */\n    error LegacySPRequired();\n\n    /**\n     * @notice Registers a Schema.\n     * @dev Emits `SchemaRegistered`.\n     * @param schema See `Schema`.\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\"\"` or `0x`\n     * otherwise.\n     * @return schemaId The assigned ID of the registered schema.\n     */\n    function register(Schema memory schema, bytes calldata delegateSignature) external returns (uint64 schemaId);\n\n    /**\n     * @notice Makes an attestation.\n     * @dev Emits `AttestationMade`.\n     * @param attestation See `Attestation`.\n     * @param indexingKey Used by the frontend to aid indexing.\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\"\"` or `0x`\n     * otherwise.\n     * @param extraData This is forwarded to the resolver directly.\n     * @return attestationId The assigned ID of the attestation.\n     */\n    function attest(\n        Attestation calldata attestation,\n        string calldata indexingKey,\n        bytes calldata delegateSignature,\n        bytes calldata extraData\n    )\n        external\n        returns (uint64 attestationId);\n\n    /**\n     * @notice Makes an attestation where the schema hook expects ETH payment.\n     * @dev Emits `AttestationMade`.\n     * @param attestation See `Attestation`.\n     * @param resolverFeesETH Amount of funds to send to the hook.\n     * @param indexingKey Used by the frontend to aid indexing.\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\"\"` or `0x`\n     * otherwise.\n     * @param extraData This is forwarded to the resolver directly.\n     * @return attestationId The assigned ID of the attestation.\n     */\n    function attest(\n        Attestation calldata attestation,\n        uint256 resolverFeesETH,\n        string calldata indexingKey,\n        bytes calldata delegateSignature,\n        bytes calldata extraData\n    )\n        external\n        payable\n        returns (uint64 attestationId);\n\n    /**\n     * @notice Makes an attestation where the schema hook expects ERC20 payment.\n     * @dev Emits `AttestationMade`.\n     * @param attestation See `Attestation`.\n     * @param resolverFeesERC20Token ERC20 token address used for payment.\n     * @param resolverFeesERC20Amount Amount of funds to send to the hook.\n     * @param indexingKey Used by the frontend to aid indexing.\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\"\"` or `0x`\n     * otherwise.\n     * @param extraData This is forwarded to the resolver directly.\n     * @return attestationId The assigned ID of the attestation.\n     */\n    function attest(\n        Attestation calldata attestation,\n        IERC20 resolverFeesERC20Token,\n        uint256 resolverFeesERC20Amount,\n        string calldata indexingKey,\n        bytes calldata delegateSignature,\n        bytes calldata extraData\n    )\n        external\n        returns (uint64 attestationId);\n\n    /**\n     * @notice Timestamps an off-chain data ID.\n     * @dev Emits `OffchainAttestationMade`.\n     * @param offchainAttestationId The off-chain data ID.\n     * @param delegateAttester An optional delegated attester that authorized the caller to attest on their behalf if\n     * this is a delegated attestation. Use `address(0)` otherwise.\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\"\"` or `0x`\n     * otherwise. Use `\"\"` or `0x` otherwise.\n     */\n    function attestOffchain(\n        string calldata offchainAttestationId,\n        address delegateAttester,\n        bytes calldata delegateSignature\n    )\n        external;\n\n    /**\n     * @notice Revokes an existing revocable attestation.\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\n     * @param attestationId An existing attestation ID.\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\n     * @param extraData This is forwarded to the resolver directly.\n     */\n    function revoke(\n        uint64 attestationId,\n        string calldata reason,\n        bytes calldata delegateSignature,\n        bytes calldata extraData\n    )\n        external;\n\n    /**\n     * @notice Revokes an existing revocable attestation where the schema hook expects ERC20 payment.\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\n     * @param attestationId An existing attestation ID.\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\n     * @param resolverFeesETH Amount of funds to send to the hook.\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\n     * @param extraData This is forwarded to the resolver directly.\n     */\n    function revoke(\n        uint64 attestationId,\n        string calldata reason,\n        uint256 resolverFeesETH,\n        bytes calldata delegateSignature,\n        bytes calldata extraData\n    )\n        external\n        payable;\n\n    /**\n     * @notice Revokes an existing revocable attestation where the schema hook expects ERC20 payment.\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\n     * @param attestationId An existing attestation ID.\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\n     * @param resolverFeesERC20Token ERC20 token address used for payment.\n     * @param resolverFeesERC20Amount Amount of funds to send to the hook.\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\n     * @param extraData This is forwarded to the resolver directly.\n     */\n    function revoke(\n        uint64 attestationId,\n        string calldata reason,\n        IERC20 resolverFeesERC20Token,\n        uint256 resolverFeesERC20Amount,\n        bytes calldata delegateSignature,\n        bytes calldata extraData\n    )\n        external;\n\n    /**\n     * @notice Revokes an existing offchain attestation.\n     * @dev Emits `OffchainAttestationRevoked`. Must be called by the attester.\n     * @param offchainAttestationId An existing attestation ID.\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\n     */\n    function revokeOffchain(\n        string calldata offchainAttestationId,\n        string calldata reason,\n        bytes calldata delegateSignature\n    )\n        external;\n\n    /**\n     * @notice Batch registers a Schema.\n     */\n    function registerBatch(\n        Schema[] calldata schemas,\n        bytes calldata delegateSignature\n    )\n        external\n        returns (uint64[] calldata schemaIds);\n\n    /**\n     * @notice Batch attests.\n     */\n    function attestBatch(\n        Attestation[] calldata attestations,\n        string[] calldata indexingKeys,\n        bytes calldata delegateSignature,\n        bytes calldata extraData\n    )\n        external\n        returns (uint64[] calldata attestationIds);\n\n    /**\n     * @notice Batch attests where the schema hook expects ETH payment.\n     */\n    function attestBatch(\n        Attestation[] calldata attestations,\n        uint256[] calldata resolverFeesETH,\n        string[] calldata indexingKeys,\n        bytes calldata delegateSignature,\n        bytes calldata extraData\n    )\n        external\n        payable\n        returns (uint64[] calldata attestationIds);\n\n    /**\n     * @notice Batch attests where the schema hook expects ERC20 payment.\n     */\n    function attestBatch(\n        Attestation[] calldata attestations,\n        IERC20[] calldata resolverFeesERC20Tokens,\n        uint256[] calldata resolverFeesERC20Amount,\n        string[] calldata indexingKeys,\n        bytes calldata delegateSignature,\n        bytes calldata extraData\n    )\n        external\n        returns (uint64[] calldata attestationIds);\n\n    /**\n     * @notice Batch timestamps off-chain data IDs.\n     */\n    function attestOffchainBatch(\n        string[] calldata offchainAttestationIds,\n        address delegateAttester,\n        bytes calldata delegateSignature\n    )\n        external;\n\n    /**\n     * @notice Batch revokes revocable on-chain attestations.\n     */\n    function revokeBatch(\n        uint64[] calldata attestationIds,\n        string[] calldata reasons,\n        bytes calldata delegateSignature,\n        bytes calldata extraData\n    )\n        external;\n\n    /**\n     * @notice Batch revokes revocable on-chain attestations where the schema hook expects ETH payment.\n     */\n    function revokeBatch(\n        uint64[] calldata attestationIds,\n        string[] calldata reasons,\n        uint256[] calldata resolverFeesETH,\n        bytes calldata delegateSignature,\n        bytes calldata extraData\n    )\n        external\n        payable;\n\n    /**\n     * @notice Batch revokes revocable on-chain attestations where the schema hook expects ERC20 payment.\n     */\n    function revokeBatch(\n        uint64[] calldata attestationIds,\n        string[] calldata reasons,\n        IERC20[] calldata resolverFeesERC20Tokens,\n        uint256[] calldata resolverFeesERC20Amount,\n        bytes calldata delegateSignature,\n        bytes calldata extraData\n    )\n        external;\n\n    /**\n     * @notice Batch revokes off-chain attestations.\n     */\n    function revokeOffchainBatch(\n        string[] calldata offchainAttestationIds,\n        string[] calldata reasons,\n        bytes calldata delegateSignature\n    )\n        external;\n\n    /**\n     * @notice Returns the specified `Schema`.\n     */\n    function getSchema(uint64 schemaId) external view returns (Schema calldata);\n\n    /**\n     * @notice Returns the specified `Attestation`.\n     */\n    function getAttestation(uint64 attestationId) external view returns (Attestation calldata);\n\n    /**\n     * @notice Returns the specified `OffchainAttestation`.\n     */\n    function getOffchainAttestation(string calldata offchainAttestationId)\n        external\n        view\n        returns (OffchainAttestation calldata);\n\n    /**\n     * @notice Returns the hash that will be used to authorize a delegated registration.\n     */\n    function getDelegatedRegisterHash(Schema memory schema) external pure returns (bytes32);\n\n    /**\n     * @notice Returns the hash that will be used to authorize a delegated batch registration.\n     */\n    function getDelegatedRegisterBatchHash(Schema[] memory schemas) external pure returns (bytes32);\n\n    /**\n     * @notice Returns the hash that will be used to authorize a delegated attestation.\n     */\n    function getDelegatedAttestHash(Attestation calldata attestation) external pure returns (bytes32);\n\n    /**\n     * @notice Returns the hash that will be used to authorize a delegated batch attestation.\n     */\n    function getDelegatedAttestBatchHash(Attestation[] calldata attestations) external pure returns (bytes32);\n\n    /**\n     * @notice Returns the hash that will be used to authorize a delegated offchain attestation.\n     */\n    function getDelegatedOffchainAttestHash(string calldata offchainAttestationId) external pure returns (bytes32);\n\n    /**\n     * @notice Returns the hash that will be used to authorize a delegated batch offchain attestation.\n     */\n    function getDelegatedOffchainAttestBatchHash(string[] calldata offchainAttestationIds)\n        external\n        pure\n        returns (bytes32);\n\n    /**\n     * @notice Returns the hash that will be used to authorize a delegated revocation.\n     */\n    function getDelegatedRevokeHash(uint64 attestationId, string memory reason) external pure returns (bytes32);\n\n    /**\n     * @notice Returns the hash that will be used to authorize a delegated batch revocation.\n     */\n    function getDelegatedRevokeBatchHash(\n        uint64[] memory attestationIds,\n        string[] memory reasons\n    )\n        external\n        pure\n        returns (bytes32);\n\n    /**\n     * @notice Returns the hash that will be used to authorize a delegated offchain revocation.\n     */\n    function getDelegatedOffchainRevokeHash(\n        string memory offchainAttestationId,\n        string memory reason\n    )\n        external\n        pure\n        returns (bytes32);\n\n    /**\n     * @notice Returns the hash that will be used to authorize a delegated batch offchain revocation.\n     */\n    function getDelegatedOffchainRevokeBatchHash(\n        string[] memory offchainAttestationIds,\n        string[] memory reasons\n    )\n        external\n        pure\n        returns (bytes32);\n\n    /**\n     * @notice Returns the current schema counter. This is incremented for each `Schema` registered.\n     */\n    function schemaCounter() external view returns (uint64);\n\n    /**\n     * @notice Returns the current on-chain attestation counter. This is incremented for each `Attestation` made.\n     */\n    function attestationCounter() external view returns (uint64);\n}\n"},"@ethsign/sign-protocol-evm/src/interfaces/ISPHook.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title SIGN Attestation Protocol Resolver Interface\n * @author Jack Xu @ EthSign\n */\ninterface ISPHook {\n    function didReceiveAttestation(\n        address attester,\n        uint64 schemaId,\n        uint64 attestationId,\n        bytes calldata extraData\n    )\n        external\n        payable;\n\n    function didReceiveAttestation(\n        address attester,\n        uint64 schemaId,\n        uint64 attestationId,\n        IERC20 resolverFeeERC20Token,\n        uint256 resolverFeeERC20Amount,\n        bytes calldata extraData\n    )\n        external;\n\n    function didReceiveRevocation(\n        address attester,\n        uint64 schemaId,\n        uint64 attestationId,\n        bytes calldata extraData\n    )\n        external\n        payable;\n\n    function didReceiveRevocation(\n        address attester,\n        uint64 schemaId,\n        uint64 attestationId,\n        IERC20 resolverFeeERC20Token,\n        uint256 resolverFeeERC20Amount,\n        bytes calldata extraData\n    )\n        external;\n}\n"},"@ethsign/sign-protocol-evm/src/interfaces/IVersionable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title IVersionable\n * @author Jack Xu @ EthSign\n * @dev This interface helps contracts to keep track of their versioning for upgrade compatibility checks.\n */\ninterface IVersionable {\n    function version() external pure returns (string memory);\n}\n"},"@ethsign/sign-protocol-evm/src/models/Attestation.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { DataLocation } from \"./DataLocation.sol\";\n\n/**\n * @title Attestation\n * @author Jack Xu @ EthSign\n * @notice This struct represents an on-chain attestation record. This record is not deleted after revocation.\n *\n * `schemaId`: The `Schema` that this Attestation is based on. It must exist.\n * `linkedAttestationId`: Useful if the current Attestation references a previous Attestation. It can either be 0 or an\n * existing attestation ID.\n * `attestTimestamp`: When the attestation was made. This is automatically populated by `_attest(...)`.\n * `revokeTimestamp`: When the attestation was revoked. This is automatically populated by `_revoke(...)`.\n * `attester`: The attester. At this time, the attester must be the caller of `attest()`.\n * `validUntil`: The expiration timestamp of the Attestation. Must respect `Schema.maxValidFor`. 0 indicates no\n * expiration date.\n * `dataLocation`: Where `Attestation.data` is stored. See `DataLocation.DataLocation`.\n * `revoked`: If the Attestation has been revoked. It is possible to make a revoked Attestation.\n * `recipients`: The intended ABI-encoded recipients of this Attestation. This is of type `bytes` to support non-EVM\n * repicients.\n * `data`: The raw data of the Attestation based on `Schema.schema`. There is no enforcement here, however. Recommended\n * to use `abi.encode`.\n */\nstruct Attestation {\n    uint64 schemaId;\n    uint64 linkedAttestationId;\n    uint64 attestTimestamp;\n    uint64 revokeTimestamp;\n    address attester;\n    uint64 validUntil;\n    DataLocation dataLocation;\n    bool revoked;\n    bytes[] recipients;\n    bytes data;\n}\n\n/**\n * @title OffchainAttestation\n * @author Jack Xu @ EthSign\n * @notice This struct represents an off-chain attestation record. This record is not deleted after revocation.\n *\n * `attester`: The attester. At this time, the attester must be the caller of `attestOffchain()`.\n * `timestamp`: The `block.timestamp` of the function call.\n */\nstruct OffchainAttestation {\n    address attester;\n    uint64 timestamp;\n}\n"},"@ethsign/sign-protocol-evm/src/models/DataLocation.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title DataLocation\n * @author Jack Xu @ EthSign\n * @notice This enum indicates where `Schema.data` and `Attestation.data` are stored.\n */\nenum DataLocation {\n    ONCHAIN,\n    ARWEAVE,\n    IPFS,\n    CUSTOM\n}\n"},"@ethsign/sign-protocol-evm/src/models/Schema.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { ISPHook } from \"../interfaces/ISPHook.sol\";\nimport { DataLocation } from \"./DataLocation.sol\";\n\n/**\n * @title Schema\n * @author Jack Xu @ EthSign\n * @notice This struct represents an on-chain Schema that Attestations can conform to.\n *\n * `registrant`: The address that registered this schema.\n * `revocable`: Whether Attestations that adopt this Schema can be revoked.\n * `dataLocation`: Where `Schema.data` is stored. See `DataLocation.DataLocation`.\n * `maxValidFor`: The maximum number of seconds that an Attestation can remain valid. 0 means Attestations can be valid\n * forever. This is enforced through `Attestation.validUntil`.\n * `hook`: The `ISPHook` that is called at the end of every function. 0 means there is no hook set. See\n * `ISPHook`.\n * `timestamp`: When the schema was registered. This is automatically populated by `_register(...)`.\n * `data`: The raw schema that `Attestation.data` should follow. Since there is no way to enforce this, it is a `string`\n * for easy readability.\n */\nstruct Schema {\n    address registrant;\n    bool revocable;\n    DataLocation dataLocation;\n    uint64 maxValidFor;\n    ISPHook hook;\n    uint64 timestamp;\n    string data;\n}\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"},"@openzeppelin/contracts/token/ERC1155/ERC1155.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1155} from \"./IERC1155.sol\";\nimport {IERC1155Receiver} from \"./IERC1155Receiver.sol\";\nimport {IERC1155MetadataURI} from \"./extensions/IERC1155MetadataURI.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {Arrays} from \"../../utils/Arrays.sol\";\nimport {IERC1155Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n */\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\n    using Arrays for uint256[];\n    using Arrays for address[];\n\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\n\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     */\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    ) public view virtual returns (uint256[] memory) {\n        if (accounts.length != ids.length) {\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\n        }\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\n        address sender = _msgSender();\n        if (from != sender && !isApprovedForAll(from, sender)) {\n            revert ERC1155MissingApprovalForAll(sender, from);\n        }\n        _safeTransferFrom(from, to, id, value, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) public virtual {\n        address sender = _msgSender();\n        if (from != sender && !isApprovedForAll(from, sender)) {\n            revert ERC1155MissingApprovalForAll(sender, from);\n        }\n        _safeBatchTransferFrom(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\n     * (or `to`) is the zero address.\n     *\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\n     * - `ids` and `values` must have the same length.\n     *\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\n     */\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\n        if (ids.length != values.length) {\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\n        }\n\n        address operator = _msgSender();\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids.unsafeMemoryAccess(i);\n            uint256 value = values.unsafeMemoryAccess(i);\n\n            if (from != address(0)) {\n                uint256 fromBalance = _balances[id][from];\n                if (fromBalance < value) {\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\n                }\n                unchecked {\n                    // Overflow not possible: value <= fromBalance\n                    _balances[id][from] = fromBalance - value;\n                }\n            }\n\n            if (to != address(0)) {\n                _balances[id][to] += value;\n            }\n        }\n\n        if (ids.length == 1) {\n            uint256 id = ids.unsafeMemoryAccess(0);\n            uint256 value = values.unsafeMemoryAccess(0);\n            emit TransferSingle(operator, from, to, id, value);\n        } else {\n            emit TransferBatch(operator, from, to, ids, values);\n        }\n    }\n\n    /**\n     * @dev Version of {_update} that performs the token acceptance check by calling\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\n     * contains code (eg. is a smart contract at the moment of execution).\n     *\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\n     * overriding {_update} instead.\n     */\n    function _updateWithAcceptanceCheck(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) internal virtual {\n        _update(from, to, ids, values);\n        if (to != address(0)) {\n            address operator = _msgSender();\n            if (ids.length == 1) {\n                uint256 id = ids.unsafeMemoryAccess(0);\n                uint256 value = values.unsafeMemoryAccess(0);\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\n            } else {\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\n            }\n        }\n    }\n\n    /**\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     * - `ids` and `values` must have the same length.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the values in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `value` amount of tokens of type `id`.\n     */\n    function _burn(address from, uint256 id, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `value` amount of tokens of type `id`.\n     * - `ids` and `values` must have the same length.\n     */\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the zero address.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC1155InvalidOperator(address(0));\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\n     * if it contains code at the moment of execution.\n     */\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes memory data\n    ) private {\n        if (to.code.length > 0) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    // Tokens rejected\n                    revert ERC1155InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    // non-ERC1155Receiver implementer\n                    revert ERC1155InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\n     * if it contains code at the moment of execution.\n     */\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) private {\n        if (to.code.length > 0) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    // Tokens rejected\n                    revert ERC1155InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    // non-ERC1155Receiver implementer\n                    revert ERC1155InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Creates an array in memory with only one value for each of the elements provided.\n     */\n    function _asSingletonArrays(\n        uint256 element1,\n        uint256 element2\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Load the free memory pointer\n            array1 := mload(0x40)\n            // Set array length to 1\n            mstore(array1, 1)\n            // Store the single element at the next word after the length (where content starts)\n            mstore(add(array1, 0x20), element1)\n\n            // Repeat for next array locating it right after the first array\n            array2 := add(array1, 0x40)\n            mstore(array2, 1)\n            mstore(add(array2, 0x20), element2)\n\n            // Update the free memory pointer by pointing after the second array\n            mstore(0x40, add(array2, 0x40))\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC1155} from \"../ERC1155.sol\";\n\n/**\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\n * own tokens and those that they have been approved to use.\n */\nabstract contract ERC1155Burnable is ERC1155 {\n    function burn(address account, uint256 id, uint256 value) public virtual {\n        if (account != _msgSender() && !isApprovedForAll(account, _msgSender())) {\n            revert ERC1155MissingApprovalForAll(_msgSender(), account);\n        }\n\n        _burn(account, id, value);\n    }\n\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\n        if (account != _msgSender() && !isApprovedForAll(account, _msgSender())) {\n            revert ERC1155MissingApprovalForAll(_msgSender(), account);\n        }\n\n        _burnBatch(account, ids, values);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/ERC1155Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC1155} from \"../ERC1155.sol\";\nimport {Pausable} from \"../../../utils/Pausable.sol\";\n\n/**\n * @dev ERC1155 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n *\n * IMPORTANT: This contract does not include public pause and unpause functions. In\n * addition to inheriting this contract, you must define both functions, invoking the\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\n * make the contract pause mechanism of the contract unreachable, and thus unusable.\n */\nabstract contract ERC1155Pausable is ERC1155, Pausable {\n    /**\n     * @dev See {ERC1155-_update}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _update(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) internal virtual override whenNotPaused {\n        super._update(from, to, ids, values);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1155} from \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n}\n"},"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface that must be implemented by smart contracts in order to receive\n * ERC-1155 token transfers.\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"@openzeppelin/contracts/utils/Arrays.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\nimport {Math} from \"./math/Math.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary Arrays {\n    using StorageSlot for bytes32;\n\n    /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * `array` is expected to be sorted in ascending order, and to contain no\n     * repeated elements.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeAccess(array, mid).value > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getAddressSlot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getBytes32Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getUint256Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"@openzeppelin/contracts/utils/Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"src/Scientify4.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.25;\n\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\";\nimport \"@ethsign/sign-protocol-evm/src/interfaces/ISP.sol\";\nimport \"@ethsign/sign-protocol-evm/src/models/Attestation.sol\";\nimport \"@ethsign/sign-protocol-evm/src/models/DataLocation.sol\";\n\n//only Attest Researcher.\n// Clean Copy\ncontract Scientify4 is ERC1155, Ownable, ERC1155Pausable, ERC1155Burnable {\n    error NotAuthenticated();\n    error ResearchCap();\n    error NotEnoughValue();\n    error PaymentFailed();\n    error NotLiquidable();\n    error NoTokenBalance();\n    error InvalidAttestation();\n\n    uint256 private researchNumber = 1;\n\n    enum ResearchState {\n        developing,\n        developed,\n        paid\n    }\n\n    struct Research {\n        uint256 id;\n        ResearchState state;\n        uint256 investment;\n        uint256 articlePrice;\n        uint256 sharePrice;\n        uint256 articlePriceIncreaseRate;\n        uint256 funding;\n        uint256 profit;\n        address owner;\n        string documentCID;\n    }\n\n    mapping(address => bool) public verifiedResearchers;\n    mapping(address => Research[]) public researchRequest;\n    mapping(uint256 => Research) public researchById;\n    mapping(uint256 => string) private repository;\n    mapping(address => uint64) public researcherVerificationAttestations;\n\n    // ISP public spInstance;\n    // ISP public spInstance = ISP(0x878c92FD89d8E0B93Dc0a3c907A2adc7577e39c5);\n    //Arbitrum Seplia\n    ISP public spInstance = ISP(0x4e4af2a21ebf62850fD99Eb6253E1eFBb56098cD);\n\n    // uint64 public schemaId;\n\n    constructor() ERC1155(\"EURK\") Ownable(msg.sender) {}\n\n    // function setSPInstance(address instance) external onlyOwner {\n    //     //ETH Sepolia: 0x878c92FD89d8E0B93Dc0a3c907A2adc7577e39c5\n    //     spInstance = ISP(instance);\n    // }\n\n    // function setSchemaID(uint64 schemaId_) external onlyOwner {\n    //     schemaId = schemaId_;\n    // }\n    // Event to log the attestation of a researcher's verification\n    event ResearcherVerificationAttested(\n        address indexed researcher,\n        uint64 attestationId\n    );\n\n    event VerificationAttested(\n        address indexed researcher,\n        uint64 attestationId\n    );\n\n    event ResearcherVerified(address indexed researcher);\n\n    // Event to log the creation of new research\n    event ResearchCreated(uint256 researchId, address researcher);\n\n    function createResearch(\n        string memory repo,\n        uint256 invest,\n        uint256 articlePrice,\n        uint256 articlePriceIncreaseRate\n    ) public {\n        // Check if the sender is a verified researcher\n        // if (!verifiedResearchers[msg.sender]) {\n        //     revert NotAuthenticated();\n        // }\n\n        // // Ensure that the sender has not exceeded the research request cap\n        // if (researchRequest[msg.sender].length >= 5) {\n        //     revert ResearchCap();\n        // }\n\n        // The invest amount must be large enough to avoid issues with share price calculation.\n        // This replaces the magic number 1e8 with a named constant for better readability.\n        uint256 minInvest = 1e8;\n        // if (invest < minInvest) {\n        //     revert NotEnoughValue();\n        // }\n\n        // Calculate the sharePrice safely. Since invest >= minInvest, this won't divide by zero.\n        uint256 sharePrice = invest / minInvest;\n\n        // Proceed to create new research\n        Research memory newResearch = Research({\n            id: researchNumber,\n            state: ResearchState.developing,\n            investment: invest,\n            articlePrice: articlePrice,\n            sharePrice: sharePrice,\n            articlePriceIncreaseRate: articlePriceIncreaseRate,\n            funding: 0,\n            profit: 0,\n            owner: msg.sender,\n            documentCID: repo\n        });\n\n        // Add the new research to the sender's list of research requests and to the global ID map.\n        researchRequest[msg.sender].push(newResearch);\n        researchById[researchNumber] = newResearch;\n\n        // Emit an event for successful research creation before incrementing the researchNumber\n        // to ensure that the event log and the state change are consistent.\n        emit ResearchCreated(researchNumber, msg.sender);\n\n        // Increment research ID for the next entry\n        researchNumber++;\n\n        // Linking research ID to the repository. This is done after the event emission\n        // to ensure that all changes are logged correctly.\n        repository[newResearch.id] = repo;\n    }\n\n    function isVerifiedResearcher(\n        address researcher\n    ) public view returns (bool) {\n        return verifiedResearchers[researcher];\n    }\n\n    function verifyResearcher(address researcher) public onlyOwner {\n        verifiedResearchers[researcher] = true;\n        emit ResearcherVerified(researcher);\n    }\n\n    function attestResearcherVerification(address researcher) public onlyOwner {\n\n        //test\n        //ethereum sepolia\n        // uint64 schemaId = 52;\n        //arbitrum sepolia\n        uint64 schemaId = 30;\n\n        bytes[] memory recipients = new bytes[](1);\n        recipients[0] = abi.encode(researcher);\n\n        bytes memory encodedData = abi.encode(researcher, true);\n\n        Attestation memory verificationAttestation = Attestation({\n            schemaId: schemaId,\n            linkedAttestationId: 0,\n            attestTimestamp: 0,\n            revokeTimestamp: 0,\n            attester: address(this),\n            validUntil: 0,\n            dataLocation: DataLocation.ONCHAIN,\n            revoked: false,\n            recipients: recipients,\n            data: encodedData\n        });\n\n        // Now we make the attestation call and obtain the attestationId\n        uint64 attestationId = spInstance.attest(\n            verificationAttestation,\n            \"\",\n            \"\",\n            \"\"\n        );\n\n        // Store the attestationId in a mapping if needed\n        researcherVerificationAttestations[researcher] = attestationId;\n\n        // Emit an event for the attestation\n        emit ResearcherVerificationAttested(researcher, attestationId);\n    }\n\n    //Research Author Attestation\n    // Function to attest to or endorse the authorship of a research paper\n    function attestResearchAuthor(\n        uint256 researchId,\n        string memory cid,\n        uint64 linkedAttestationId // Use 0 if it's an initial attestation\n    ) public {\n        // Only the owner or a verified researcher can call this function\n        require(\n            msg.sender == owner() || verifiedResearchers[msg.sender],\n            \"Caller must be owner or verified researcher\"\n        );\n        // Fetch the research details\n        Research storage research = researchById[researchId];\n        \n        require(research.id != 0, \"Research does not exist\");\n\n        //ethereum sepolia\n        // uint64 schemaId = 67; \n        //arbitrum sepolia\n        uint64 schemaId = 31;\n\n        // Encode the CID and the owner's address for saving to attestation.data\n        // This encodes both the CID and the owner's address into a single bytes object\n        bytes memory encodedData = abi.encode(cid, research.owner);\n\n        // Prepare the recipients array\n        bytes[] memory recipients = new bytes[](1);\n        // Encoding the owner of the research as the recipient\n        recipients[0] = abi.encode(research.owner);\n\n        // Create the attestation or endorsement\n        Attestation memory researchAttestation = Attestation({\n            schemaId: schemaId,\n            linkedAttestationId: linkedAttestationId, // This links to a previous attestation if it's an endorsement\n            attestTimestamp: 0,\n            revokeTimestamp: 0,\n            //test\n            attester: address(this),\n            validUntil: 0, // Optional: set an expiration if required\n            dataLocation: DataLocation.ONCHAIN,\n            revoked: false,\n            recipients: recipients,\n            data: encodedData\n        });\n\n        // Make the attestation call and obtain the attestationId\n        uint64 attestationId = spInstance.attest(\n            researchAttestation,\n            \"\",\n            \"\",\n            \"\"\n        );\n\n        // Emit an event for the attestation or endorsement\n        emit VerificationAttested(msg.sender, attestationId);\n    }\n\n    function _update(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) internal override(ERC1155, ERC1155Pausable) {\n        // Custom logic before the balance update\n        // For example, you can emit an event or perform checks\n\n        // Call the parent contract's _update function to perform the actual balance update\n        super._update(from, to, ids, values); // This calls ERC1155's _update function, and then ERC1155Pausable's _update if there's additional logic there\n        // Custom logic after the balance update\n        // For example, you can perform additional state changes or emit events\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true},"remappings":[]}},"output":{"sources":{"@ethsign/sign-protocol-evm/src/interfaces/ISP.sol":{"ast":{"absolutePath":"@ethsign/sign-protocol-evm/src/interfaces/ISP.sol","exportedSymbols":{"Attestation":[592],"IERC20":[2344],"ISP":[495],"IVersionable":[564],"OffchainAttestation":[598],"Schema":[630]},"id":496,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:0"},{"absolutePath":"@ethsign/sign-protocol-evm/src/interfaces/IVersionable.sol","file":"./IVersionable.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":496,"sourceUnit":565,"src":"58:50:0","symbolAliases":[{"foreign":{"id":2,"name":"IVersionable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"67:12:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@ethsign/sign-protocol-evm/src/models/Schema.sol","file":"../models/Schema.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":496,"sourceUnit":631,"src":"109:46:0","symbolAliases":[{"foreign":{"id":4,"name":"Schema","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":630,"src":"118:6:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@ethsign/sign-protocol-evm/src/models/Attestation.sol","file":"../models/Attestation.sol","id":8,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":496,"sourceUnit":599,"src":"156:77:0","symbolAliases":[{"foreign":{"id":6,"name":"Attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"165:11:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":7,"name":"OffchainAttestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":598,"src":"178:19:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":10,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":496,"sourceUnit":2345,"src":"234:72:0","symbolAliases":[{"foreign":{"id":9,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2344,"src":"243:6:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":12,"name":"IVersionable","nameLocations":["396:12:0"],"nodeType":"IdentifierPath","referencedDeclaration":564,"src":"396:12:0"},"id":13,"nodeType":"InheritanceSpecifier","src":"396:12:0"}],"canonicalName":"ISP","contractDependencies":[],"contractKind":"interface","documentation":{"id":11,"nodeType":"StructuredDocumentation","src":"308:70:0","text":" @title Sign Protocol Interface\n @author Jack Xu @ EthSign"},"fullyImplemented":false,"id":495,"linearizedBaseContracts":[495,564],"name":"ISP","nameLocation":"389:3:0","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"d0f9818d35b9c7d941f89e81a08a7f4761384ae32aeaf4a913b94319a321e7ff","id":17,"name":"SchemaRegistered","nameLocation":"421:16:0","nodeType":"EventDefinition","parameters":{"id":16,"nodeType":"ParameterList","parameters":[{"constant":false,"id":15,"indexed":false,"mutability":"mutable","name":"schemaId","nameLocation":"445:8:0","nodeType":"VariableDeclaration","scope":17,"src":"438:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":14,"name":"uint64","nodeType":"ElementaryTypeName","src":"438:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"437:17:0"},"src":"415:40:0"},{"anonymous":false,"eventSelector":"38b331f00373c8b0f9af5a4273ca1b91e894fec999bfa4ec787e8c90a5c8b05c","id":23,"name":"AttestationMade","nameLocation":"466:15:0","nodeType":"EventDefinition","parameters":{"id":22,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19,"indexed":false,"mutability":"mutable","name":"attestationId","nameLocation":"489:13:0","nodeType":"VariableDeclaration","scope":23,"src":"482:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":18,"name":"uint64","nodeType":"ElementaryTypeName","src":"482:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":21,"indexed":false,"mutability":"mutable","name":"indexingKey","nameLocation":"511:11:0","nodeType":"VariableDeclaration","scope":23,"src":"504:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":20,"name":"string","nodeType":"ElementaryTypeName","src":"504:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"481:42:0"},"src":"460:64:0"},{"anonymous":false,"eventSelector":"294c02ce66be799794a712d72e9926c40a3cb2738a51571523ffe23be2c6fb01","id":29,"name":"AttestationRevoked","nameLocation":"535:18:0","nodeType":"EventDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":25,"indexed":false,"mutability":"mutable","name":"attestationId","nameLocation":"561:13:0","nodeType":"VariableDeclaration","scope":29,"src":"554:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":24,"name":"uint64","nodeType":"ElementaryTypeName","src":"554:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":27,"indexed":false,"mutability":"mutable","name":"reason","nameLocation":"583:6:0","nodeType":"VariableDeclaration","scope":29,"src":"576:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":26,"name":"string","nodeType":"ElementaryTypeName","src":"576:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"553:37:0"},"src":"529:62:0"},{"anonymous":false,"eventSelector":"6f0bf119c2fc55752051c1cfde5d145fdd499c7f748df7920409c72319ff6027","id":33,"name":"OffchainAttestationMade","nameLocation":"602:23:0","nodeType":"EventDefinition","parameters":{"id":32,"nodeType":"ParameterList","parameters":[{"constant":false,"id":31,"indexed":false,"mutability":"mutable","name":"attestationId","nameLocation":"633:13:0","nodeType":"VariableDeclaration","scope":33,"src":"626:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":30,"name":"string","nodeType":"ElementaryTypeName","src":"626:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"625:22:0"},"src":"596:52:0"},{"anonymous":false,"eventSelector":"8cdef7ac4262df432ef960b4d902483c56118d54647a70746d99abc05cb970ba","id":39,"name":"OffchainAttestationRevoked","nameLocation":"659:26:0","nodeType":"EventDefinition","parameters":{"id":38,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"indexed":false,"mutability":"mutable","name":"attestationId","nameLocation":"693:13:0","nodeType":"VariableDeclaration","scope":39,"src":"686:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":34,"name":"string","nodeType":"ElementaryTypeName","src":"686:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":37,"indexed":false,"mutability":"mutable","name":"reason","nameLocation":"715:6:0","nodeType":"VariableDeclaration","scope":39,"src":"708:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":36,"name":"string","nodeType":"ElementaryTypeName","src":"708:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"685:37:0"},"src":"653:70:0"},{"documentation":{"id":40,"nodeType":"StructuredDocumentation","src":"729:34:0","text":" @dev 0x9e87fac8"},"errorSelector":"9e87fac8","id":42,"name":"Paused","nameLocation":"774:6:0","nodeType":"ErrorDefinition","parameters":{"id":41,"nodeType":"ParameterList","parameters":[],"src":"780:2:0"},"src":"768:15:0"},{"documentation":{"id":43,"nodeType":"StructuredDocumentation","src":"788:34:0","text":" @dev 0x38f8c6c4"},"errorSelector":"a3ad7828","id":45,"name":"SchemaNonexistent","nameLocation":"833:17:0","nodeType":"ErrorDefinition","parameters":{"id":44,"nodeType":"ParameterList","parameters":[],"src":"850:2:0"},"src":"827:26:0"},{"documentation":{"id":46,"nodeType":"StructuredDocumentation","src":"858:34:0","text":" @dev 0x71984561"},"errorSelector":"71984561","id":48,"name":"SchemaWrongRegistrant","nameLocation":"903:21:0","nodeType":"ErrorDefinition","parameters":{"id":47,"nodeType":"ParameterList","parameters":[],"src":"924:2:0"},"src":"897:30:0"},{"documentation":{"id":49,"nodeType":"StructuredDocumentation","src":"932:34:0","text":" @dev 0x8ac42f49"},"errorSelector":"d1994a9a","id":51,"name":"AttestationIrrevocable","nameLocation":"977:22:0","nodeType":"ErrorDefinition","parameters":{"id":50,"nodeType":"ParameterList","parameters":[],"src":"999:2:0"},"src":"971:31:0"},{"documentation":{"id":52,"nodeType":"StructuredDocumentation","src":"1007:34:0","text":" @dev 0x54681a13"},"errorSelector":"ccc2eda0","id":54,"name":"AttestationNonexistent","nameLocation":"1052:22:0","nodeType":"ErrorDefinition","parameters":{"id":53,"nodeType":"ParameterList","parameters":[],"src":"1074:2:0"},"src":"1046:31:0"},{"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1082:34:0","text":" @dev 0xa65e02ed"},"errorSelector":"2a9e0beb","id":57,"name":"AttestationInvalidDuration","nameLocation":"1127:26:0","nodeType":"ErrorDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1153:2:0"},"src":"1121:35:0"},{"documentation":{"id":58,"nodeType":"StructuredDocumentation","src":"1161:34:0","text":" @dev 0xd8c3da86"},"errorSelector":"10a0e42f","id":60,"name":"AttestationAlreadyRevoked","nameLocation":"1206:25:0","nodeType":"ErrorDefinition","parameters":{"id":59,"nodeType":"ParameterList","parameters":[],"src":"1231:2:0"},"src":"1200:34:0"},{"documentation":{"id":61,"nodeType":"StructuredDocumentation","src":"1239:34:0","text":" @dev 0xa9ad2007"},"errorSelector":"688731b1","id":63,"name":"AttestationWrongAttester","nameLocation":"1284:24:0","nodeType":"ErrorDefinition","parameters":{"id":62,"nodeType":"ParameterList","parameters":[],"src":"1308:2:0"},"src":"1278:33:0"},{"documentation":{"id":64,"nodeType":"StructuredDocumentation","src":"1316:34:0","text":" @dev 0xc83e3cdf"},"errorSelector":"ee5ae86a","id":66,"name":"OffchainAttestationExists","nameLocation":"1361:25:0","nodeType":"ErrorDefinition","parameters":{"id":65,"nodeType":"ParameterList","parameters":[],"src":"1386:2:0"},"src":"1355:34:0"},{"documentation":{"id":67,"nodeType":"StructuredDocumentation","src":"1394:34:0","text":" @dev 0xa006519a"},"errorSelector":"a1a740f6","id":69,"name":"OffchainAttestationNonexistent","nameLocation":"1439:30:0","nodeType":"ErrorDefinition","parameters":{"id":68,"nodeType":"ParameterList","parameters":[],"src":"1469:2:0"},"src":"1433:39:0"},{"documentation":{"id":70,"nodeType":"StructuredDocumentation","src":"1477:34:0","text":" @dev 0xa0671d20"},"errorSelector":"ac8606f3","id":72,"name":"OffchainAttestationAlreadyRevoked","nameLocation":"1522:33:0","nodeType":"ErrorDefinition","parameters":{"id":71,"nodeType":"ParameterList","parameters":[],"src":"1555:2:0"},"src":"1516:42:0"},{"documentation":{"id":73,"nodeType":"StructuredDocumentation","src":"1563:34:0","text":" @dev 0xfdf4e6f9"},"errorSelector":"fdf4e6f9","id":75,"name":"InvalidDelegateSignature","nameLocation":"1608:24:0","nodeType":"ErrorDefinition","parameters":{"id":74,"nodeType":"ParameterList","parameters":[],"src":"1632:2:0"},"src":"1602:33:0"},{"documentation":{"id":76,"nodeType":"StructuredDocumentation","src":"1640:34:0","text":" @dev 0x5c34b9cc"},"errorSelector":"cc504239","id":78,"name":"LegacySPRequired","nameLocation":"1685:16:0","nodeType":"ErrorDefinition","parameters":{"id":77,"nodeType":"ParameterList","parameters":[],"src":"1701:2:0"},"src":"1679:25:0"},{"documentation":{"id":79,"nodeType":"StructuredDocumentation","src":"1710:324:0","text":" @notice Registers a Schema.\n @dev Emits `SchemaRegistered`.\n @param schema See `Schema`.\n @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\"\"` or `0x`\n otherwise.\n @return schemaId The assigned ID of the registered schema."},"functionSelector":"e117a861","id":89,"implemented":false,"kind":"function","modifiers":[],"name":"register","nameLocation":"2048:8:0","nodeType":"FunctionDefinition","parameters":{"id":85,"nodeType":"ParameterList","parameters":[{"constant":false,"id":82,"mutability":"mutable","name":"schema","nameLocation":"2071:6:0","nodeType":"VariableDeclaration","scope":89,"src":"2057:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Schema_$630_memory_ptr","typeString":"struct Schema"},"typeName":{"id":81,"nodeType":"UserDefinedTypeName","pathNode":{"id":80,"name":"Schema","nameLocations":["2057:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":630,"src":"2057:6:0"},"referencedDeclaration":630,"src":"2057:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Schema_$630_storage_ptr","typeString":"struct Schema"}},"visibility":"internal"},{"constant":false,"id":84,"mutability":"mutable","name":"delegateSignature","nameLocation":"2094:17:0","nodeType":"VariableDeclaration","scope":89,"src":"2079:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":83,"name":"bytes","nodeType":"ElementaryTypeName","src":"2079:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2056:56:0"},"returnParameters":{"id":88,"nodeType":"ParameterList","parameters":[{"constant":false,"id":87,"mutability":"mutable","name":"schemaId","nameLocation":"2138:8:0","nodeType":"VariableDeclaration","scope":89,"src":"2131:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":86,"name":"uint64","nodeType":"ElementaryTypeName","src":"2131:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2130:17:0"},"scope":495,"src":"2039:109:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":90,"nodeType":"StructuredDocumentation","src":"2154:466:0","text":" @notice Makes an attestation.\n @dev Emits `AttestationMade`.\n @param attestation See `Attestation`.\n @param indexingKey Used by the frontend to aid indexing.\n @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\"\"` or `0x`\n otherwise.\n @param extraData This is forwarded to the resolver directly.\n @return attestationId The assigned ID of the attestation."},"functionSelector":"b82916cb","id":104,"implemented":false,"kind":"function","modifiers":[],"name":"attest","nameLocation":"2634:6:0","nodeType":"FunctionDefinition","parameters":{"id":100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":93,"mutability":"mutable","name":"attestation","nameLocation":"2671:11:0","nodeType":"VariableDeclaration","scope":104,"src":"2650:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$592_calldata_ptr","typeString":"struct Attestation"},"typeName":{"id":92,"nodeType":"UserDefinedTypeName","pathNode":{"id":91,"name":"Attestation","nameLocations":["2650:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":592,"src":"2650:11:0"},"referencedDeclaration":592,"src":"2650:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$592_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"},{"constant":false,"id":95,"mutability":"mutable","name":"indexingKey","nameLocation":"2708:11:0","nodeType":"VariableDeclaration","scope":104,"src":"2692:27:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":94,"name":"string","nodeType":"ElementaryTypeName","src":"2692:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":97,"mutability":"mutable","name":"delegateSignature","nameLocation":"2744:17:0","nodeType":"VariableDeclaration","scope":104,"src":"2729:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":96,"name":"bytes","nodeType":"ElementaryTypeName","src":"2729:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":99,"mutability":"mutable","name":"extraData","nameLocation":"2786:9:0","nodeType":"VariableDeclaration","scope":104,"src":"2771:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":98,"name":"bytes","nodeType":"ElementaryTypeName","src":"2771:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2640:161:0"},"returnParameters":{"id":103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":102,"mutability":"mutable","name":"attestationId","nameLocation":"2843:13:0","nodeType":"VariableDeclaration","scope":104,"src":"2836:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":101,"name":"uint64","nodeType":"ElementaryTypeName","src":"2836:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2835:22:0"},"scope":495,"src":"2625:233:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":105,"nodeType":"StructuredDocumentation","src":"2864:575:0","text":" @notice Makes an attestation where the schema hook expects ETH payment.\n @dev Emits `AttestationMade`.\n @param attestation See `Attestation`.\n @param resolverFeesETH Amount of funds to send to the hook.\n @param indexingKey Used by the frontend to aid indexing.\n @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\"\"` or `0x`\n otherwise.\n @param extraData This is forwarded to the resolver directly.\n @return attestationId The assigned ID of the attestation."},"functionSelector":"e09f1b7a","id":121,"implemented":false,"kind":"function","modifiers":[],"name":"attest","nameLocation":"3453:6:0","nodeType":"FunctionDefinition","parameters":{"id":117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":108,"mutability":"mutable","name":"attestation","nameLocation":"3490:11:0","nodeType":"VariableDeclaration","scope":121,"src":"3469:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$592_calldata_ptr","typeString":"struct Attestation"},"typeName":{"id":107,"nodeType":"UserDefinedTypeName","pathNode":{"id":106,"name":"Attestation","nameLocations":["3469:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":592,"src":"3469:11:0"},"referencedDeclaration":592,"src":"3469:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$592_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"},{"constant":false,"id":110,"mutability":"mutable","name":"resolverFeesETH","nameLocation":"3519:15:0","nodeType":"VariableDeclaration","scope":121,"src":"3511:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":109,"name":"uint256","nodeType":"ElementaryTypeName","src":"3511:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":112,"mutability":"mutable","name":"indexingKey","nameLocation":"3560:11:0","nodeType":"VariableDeclaration","scope":121,"src":"3544:27:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":111,"name":"string","nodeType":"ElementaryTypeName","src":"3544:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":114,"mutability":"mutable","name":"delegateSignature","nameLocation":"3596:17:0","nodeType":"VariableDeclaration","scope":121,"src":"3581:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":113,"name":"bytes","nodeType":"ElementaryTypeName","src":"3581:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":116,"mutability":"mutable","name":"extraData","nameLocation":"3638:9:0","nodeType":"VariableDeclaration","scope":121,"src":"3623:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":115,"name":"bytes","nodeType":"ElementaryTypeName","src":"3623:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3459:194:0"},"returnParameters":{"id":120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":119,"mutability":"mutable","name":"attestationId","nameLocation":"3711:13:0","nodeType":"VariableDeclaration","scope":121,"src":"3704:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":118,"name":"uint64","nodeType":"ElementaryTypeName","src":"3704:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3703:22:0"},"scope":495,"src":"3444:282:0","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":122,"nodeType":"StructuredDocumentation","src":"3732:660:0","text":" @notice Makes an attestation where the schema hook expects ERC20 payment.\n @dev Emits `AttestationMade`.\n @param attestation See `Attestation`.\n @param resolverFeesERC20Token ERC20 token address used for payment.\n @param resolverFeesERC20Amount Amount of funds to send to the hook.\n @param indexingKey Used by the frontend to aid indexing.\n @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\"\"` or `0x`\n otherwise.\n @param extraData This is forwarded to the resolver directly.\n @return attestationId The assigned ID of the attestation."},"functionSelector":"812c255f","id":141,"implemented":false,"kind":"function","modifiers":[],"name":"attest","nameLocation":"4406:6:0","nodeType":"FunctionDefinition","parameters":{"id":137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":125,"mutability":"mutable","name":"attestation","nameLocation":"4443:11:0","nodeType":"VariableDeclaration","scope":141,"src":"4422:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$592_calldata_ptr","typeString":"struct Attestation"},"typeName":{"id":124,"nodeType":"UserDefinedTypeName","pathNode":{"id":123,"name":"Attestation","nameLocations":["4422:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":592,"src":"4422:11:0"},"referencedDeclaration":592,"src":"4422:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$592_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"},{"constant":false,"id":128,"mutability":"mutable","name":"resolverFeesERC20Token","nameLocation":"4471:22:0","nodeType":"VariableDeclaration","scope":141,"src":"4464:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2344","typeString":"contract IERC20"},"typeName":{"id":127,"nodeType":"UserDefinedTypeName","pathNode":{"id":126,"name":"IERC20","nameLocations":["4464:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":2344,"src":"4464:6:0"},"referencedDeclaration":2344,"src":"4464:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2344","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":130,"mutability":"mutable","name":"resolverFeesERC20Amount","nameLocation":"4511:23:0","nodeType":"VariableDeclaration","scope":141,"src":"4503:31:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":129,"name":"uint256","nodeType":"ElementaryTypeName","src":"4503:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":132,"mutability":"mutable","name":"indexingKey","nameLocation":"4560:11:0","nodeType":"VariableDeclaration","scope":141,"src":"4544:27:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":131,"name":"string","nodeType":"ElementaryTypeName","src":"4544:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":134,"mutability":"mutable","name":"delegateSignature","nameLocation":"4596:17:0","nodeType":"VariableDeclaration","scope":141,"src":"4581:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":133,"name":"bytes","nodeType":"ElementaryTypeName","src":"4581:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":136,"mutability":"mutable","name":"extraData","nameLocation":"4638:9:0","nodeType":"VariableDeclaration","scope":141,"src":"4623:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":135,"name":"bytes","nodeType":"ElementaryTypeName","src":"4623:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4412:241:0"},"returnParameters":{"id":140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":139,"mutability":"mutable","name":"attestationId","nameLocation":"4695:13:0","nodeType":"VariableDeclaration","scope":141,"src":"4688:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":138,"name":"uint64","nodeType":"ElementaryTypeName","src":"4688:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4687:22:0"},"scope":495,"src":"4397:313:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":142,"nodeType":"StructuredDocumentation","src":"4716:516:0","text":" @notice Timestamps an off-chain data ID.\n @dev Emits `OffchainAttestationMade`.\n @param offchainAttestationId The off-chain data ID.\n @param delegateAttester An optional delegated attester that authorized the caller to attest on their behalf if\n this is a delegated attestation. Use `address(0)` otherwise.\n @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\"\"` or `0x`\n otherwise. Use `\"\"` or `0x` otherwise."},"functionSelector":"a01fb774","id":151,"implemented":false,"kind":"function","modifiers":[],"name":"attestOffchain","nameLocation":"5246:14:0","nodeType":"FunctionDefinition","parameters":{"id":149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":144,"mutability":"mutable","name":"offchainAttestationId","nameLocation":"5286:21:0","nodeType":"VariableDeclaration","scope":151,"src":"5270:37:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":143,"name":"string","nodeType":"ElementaryTypeName","src":"5270:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":146,"mutability":"mutable","name":"delegateAttester","nameLocation":"5325:16:0","nodeType":"VariableDeclaration","scope":151,"src":"5317:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":145,"name":"address","nodeType":"ElementaryTypeName","src":"5317:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":148,"mutability":"mutable","name":"delegateSignature","nameLocation":"5366:17:0","nodeType":"VariableDeclaration","scope":151,"src":"5351:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":147,"name":"bytes","nodeType":"ElementaryTypeName","src":"5351:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5260:129:0"},"returnParameters":{"id":150,"nodeType":"ParameterList","parameters":[],"src":"5406:0:0"},"scope":495,"src":"5237:170:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":152,"nodeType":"StructuredDocumentation","src":"5413:458:0","text":" @notice Revokes an existing revocable attestation.\n @dev Emits `AttestationRevoked`. Must be called by the attester.\n @param attestationId An existing attestation ID.\n @param reason The revocation reason. This is only emitted as an event to save gas.\n @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\n @param extraData This is forwarded to the resolver directly."},"functionSelector":"24855e60","id":163,"implemented":false,"kind":"function","modifiers":[],"name":"revoke","nameLocation":"5885:6:0","nodeType":"FunctionDefinition","parameters":{"id":161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":154,"mutability":"mutable","name":"attestationId","nameLocation":"5908:13:0","nodeType":"VariableDeclaration","scope":163,"src":"5901:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":153,"name":"uint64","nodeType":"ElementaryTypeName","src":"5901:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":156,"mutability":"mutable","name":"reason","nameLocation":"5947:6:0","nodeType":"VariableDeclaration","scope":163,"src":"5931:22:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":155,"name":"string","nodeType":"ElementaryTypeName","src":"5931:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":158,"mutability":"mutable","name":"delegateSignature","nameLocation":"5978:17:0","nodeType":"VariableDeclaration","scope":163,"src":"5963:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":157,"name":"bytes","nodeType":"ElementaryTypeName","src":"5963:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":160,"mutability":"mutable","name":"extraData","nameLocation":"6020:9:0","nodeType":"VariableDeclaration","scope":163,"src":"6005:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":159,"name":"bytes","nodeType":"ElementaryTypeName","src":"6005:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5891:144:0"},"returnParameters":{"id":162,"nodeType":"ParameterList","parameters":[],"src":"6052:0:0"},"scope":495,"src":"5876:177:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":164,"nodeType":"StructuredDocumentation","src":"6059:569:0","text":" @notice Revokes an existing revocable attestation where the schema hook expects ERC20 payment.\n @dev Emits `AttestationRevoked`. Must be called by the attester.\n @param attestationId An existing attestation ID.\n @param reason The revocation reason. This is only emitted as an event to save gas.\n @param resolverFeesETH Amount of funds to send to the hook.\n @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\n @param extraData This is forwarded to the resolver directly."},"functionSelector":"f83b92b7","id":177,"implemented":false,"kind":"function","modifiers":[],"name":"revoke","nameLocation":"6642:6:0","nodeType":"FunctionDefinition","parameters":{"id":175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":166,"mutability":"mutable","name":"attestationId","nameLocation":"6665:13:0","nodeType":"VariableDeclaration","scope":177,"src":"6658:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":165,"name":"uint64","nodeType":"ElementaryTypeName","src":"6658:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":168,"mutability":"mutable","name":"reason","nameLocation":"6704:6:0","nodeType":"VariableDeclaration","scope":177,"src":"6688:22:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":167,"name":"string","nodeType":"ElementaryTypeName","src":"6688:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":170,"mutability":"mutable","name":"resolverFeesETH","nameLocation":"6728:15:0","nodeType":"VariableDeclaration","scope":177,"src":"6720:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":169,"name":"uint256","nodeType":"ElementaryTypeName","src":"6720:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":172,"mutability":"mutable","name":"delegateSignature","nameLocation":"6768:17:0","nodeType":"VariableDeclaration","scope":177,"src":"6753:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":171,"name":"bytes","nodeType":"ElementaryTypeName","src":"6753:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":174,"mutability":"mutable","name":"extraData","nameLocation":"6810:9:0","nodeType":"VariableDeclaration","scope":177,"src":"6795:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":173,"name":"bytes","nodeType":"ElementaryTypeName","src":"6795:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6648:177:0"},"returnParameters":{"id":176,"nodeType":"ParameterList","parameters":[],"src":"6858:0:0"},"scope":495,"src":"6633:226:0","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":178,"nodeType":"StructuredDocumentation","src":"6865:652:0","text":" @notice Revokes an existing revocable attestation where the schema hook expects ERC20 payment.\n @dev Emits `AttestationRevoked`. Must be called by the attester.\n @param attestationId An existing attestation ID.\n @param reason The revocation reason. This is only emitted as an event to save gas.\n @param resolverFeesERC20Token ERC20 token address used for payment.\n @param resolverFeesERC20Amount Amount of funds to send to the hook.\n @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\n @param extraData This is forwarded to the resolver directly."},"functionSelector":"9b7f8318","id":194,"implemented":false,"kind":"function","modifiers":[],"name":"revoke","nameLocation":"7531:6:0","nodeType":"FunctionDefinition","parameters":{"id":192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":180,"mutability":"mutable","name":"attestationId","nameLocation":"7554:13:0","nodeType":"VariableDeclaration","scope":194,"src":"7547:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":179,"name":"uint64","nodeType":"ElementaryTypeName","src":"7547:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":182,"mutability":"mutable","name":"reason","nameLocation":"7593:6:0","nodeType":"VariableDeclaration","scope":194,"src":"7577:22:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":181,"name":"string","nodeType":"ElementaryTypeName","src":"7577:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":185,"mutability":"mutable","name":"resolverFeesERC20Token","nameLocation":"7616:22:0","nodeType":"VariableDeclaration","scope":194,"src":"7609:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2344","typeString":"contract IERC20"},"typeName":{"id":184,"nodeType":"UserDefinedTypeName","pathNode":{"id":183,"name":"IERC20","nameLocations":["7609:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":2344,"src":"7609:6:0"},"referencedDeclaration":2344,"src":"7609:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2344","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":187,"mutability":"mutable","name":"resolverFeesERC20Amount","nameLocation":"7656:23:0","nodeType":"VariableDeclaration","scope":194,"src":"7648:31:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":186,"name":"uint256","nodeType":"ElementaryTypeName","src":"7648:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":189,"mutability":"mutable","name":"delegateSignature","nameLocation":"7704:17:0","nodeType":"VariableDeclaration","scope":194,"src":"7689:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":188,"name":"bytes","nodeType":"ElementaryTypeName","src":"7689:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":191,"mutability":"mutable","name":"extraData","nameLocation":"7746:9:0","nodeType":"VariableDeclaration","scope":194,"src":"7731:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":190,"name":"bytes","nodeType":"ElementaryTypeName","src":"7731:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7537:224:0"},"returnParameters":{"id":193,"nodeType":"ParameterList","parameters":[],"src":"7778:0:0"},"scope":495,"src":"7522:257:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":195,"nodeType":"StructuredDocumentation","src":"7785:405:0","text":" @notice Revokes an existing offchain attestation.\n @dev Emits `OffchainAttestationRevoked`. Must be called by the attester.\n @param offchainAttestationId An existing attestation ID.\n @param reason The revocation reason. This is only emitted as an event to save gas.\n @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation."},"functionSelector":"574a3066","id":204,"implemented":false,"kind":"function","modifiers":[],"name":"revokeOffchain","nameLocation":"8204:14:0","nodeType":"FunctionDefinition","parameters":{"id":202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":197,"mutability":"mutable","name":"offchainAttestationId","nameLocation":"8244:21:0","nodeType":"VariableDeclaration","scope":204,"src":"8228:37:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":196,"name":"string","nodeType":"ElementaryTypeName","src":"8228:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":199,"mutability":"mutable","name":"reason","nameLocation":"8291:6:0","nodeType":"VariableDeclaration","scope":204,"src":"8275:22:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":198,"name":"string","nodeType":"ElementaryTypeName","src":"8275:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":201,"mutability":"mutable","name":"delegateSignature","nameLocation":"8322:17:0","nodeType":"VariableDeclaration","scope":204,"src":"8307:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":200,"name":"bytes","nodeType":"ElementaryTypeName","src":"8307:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8218:127:0"},"returnParameters":{"id":203,"nodeType":"ParameterList","parameters":[],"src":"8362:0:0"},"scope":495,"src":"8195:168:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":205,"nodeType":"StructuredDocumentation","src":"8369:52:0","text":" @notice Batch registers a Schema."},"functionSelector":"5e7689b7","id":217,"implemented":false,"kind":"function","modifiers":[],"name":"registerBatch","nameLocation":"8435:13:0","nodeType":"FunctionDefinition","parameters":{"id":212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":209,"mutability":"mutable","name":"schemas","nameLocation":"8476:7:0","nodeType":"VariableDeclaration","scope":217,"src":"8458:25:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Schema_$630_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Schema[]"},"typeName":{"baseType":{"id":207,"nodeType":"UserDefinedTypeName","pathNode":{"id":206,"name":"Schema","nameLocations":["8458:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":630,"src":"8458:6:0"},"referencedDeclaration":630,"src":"8458:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Schema_$630_storage_ptr","typeString":"struct Schema"}},"id":208,"nodeType":"ArrayTypeName","src":"8458:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Schema_$630_storage_$dyn_storage_ptr","typeString":"struct Schema[]"}},"visibility":"internal"},{"constant":false,"id":211,"mutability":"mutable","name":"delegateSignature","nameLocation":"8508:17:0","nodeType":"VariableDeclaration","scope":217,"src":"8493:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":210,"name":"bytes","nodeType":"ElementaryTypeName","src":"8493:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8448:83:0"},"returnParameters":{"id":216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":215,"mutability":"mutable","name":"schemaIds","nameLocation":"8584:9:0","nodeType":"VariableDeclaration","scope":217,"src":"8566:27:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint64_$dyn_calldata_ptr","typeString":"uint64[]"},"typeName":{"baseType":{"id":213,"name":"uint64","nodeType":"ElementaryTypeName","src":"8566:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":214,"nodeType":"ArrayTypeName","src":"8566:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint64_$dyn_storage_ptr","typeString":"uint64[]"}},"visibility":"internal"}],"src":"8565:29:0"},"scope":495,"src":"8426:169:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":218,"nodeType":"StructuredDocumentation","src":"8601:41:0","text":" @notice Batch attests."},"functionSelector":"d98934ff","id":235,"implemented":false,"kind":"function","modifiers":[],"name":"attestBatch","nameLocation":"8656:11:0","nodeType":"FunctionDefinition","parameters":{"id":230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":222,"mutability":"mutable","name":"attestations","nameLocation":"8700:12:0","nodeType":"VariableDeclaration","scope":235,"src":"8677:35:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$592_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Attestation[]"},"typeName":{"baseType":{"id":220,"nodeType":"UserDefinedTypeName","pathNode":{"id":219,"name":"Attestation","nameLocations":["8677:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":592,"src":"8677:11:0"},"referencedDeclaration":592,"src":"8677:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$592_storage_ptr","typeString":"struct Attestation"}},"id":221,"nodeType":"ArrayTypeName","src":"8677:13:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$592_storage_$dyn_storage_ptr","typeString":"struct Attestation[]"}},"visibility":"internal"},{"constant":false,"id":225,"mutability":"mutable","name":"indexingKeys","nameLocation":"8740:12:0","nodeType":"VariableDeclaration","scope":235,"src":"8722:30:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":223,"name":"string","nodeType":"ElementaryTypeName","src":"8722:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":224,"nodeType":"ArrayTypeName","src":"8722:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":227,"mutability":"mutable","name":"delegateSignature","nameLocation":"8777:17:0","nodeType":"VariableDeclaration","scope":235,"src":"8762:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":226,"name":"bytes","nodeType":"ElementaryTypeName","src":"8762:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":229,"mutability":"mutable","name":"extraData","nameLocation":"8819:9:0","nodeType":"VariableDeclaration","scope":235,"src":"8804:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":228,"name":"bytes","nodeType":"ElementaryTypeName","src":"8804:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8667:167:0"},"returnParameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":233,"mutability":"mutable","name":"attestationIds","nameLocation":"8887:14:0","nodeType":"VariableDeclaration","scope":235,"src":"8869:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint64_$dyn_calldata_ptr","typeString":"uint64[]"},"typeName":{"baseType":{"id":231,"name":"uint64","nodeType":"ElementaryTypeName","src":"8869:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":232,"nodeType":"ArrayTypeName","src":"8869:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint64_$dyn_storage_ptr","typeString":"uint64[]"}},"visibility":"internal"}],"src":"8868:34:0"},"scope":495,"src":"8647:256:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":236,"nodeType":"StructuredDocumentation","src":"8909:83:0","text":" @notice Batch attests where the schema hook expects ETH payment."},"functionSelector":"4e6ac1d5","id":256,"implemented":false,"kind":"function","modifiers":[],"name":"attestBatch","nameLocation":"9006:11:0","nodeType":"FunctionDefinition","parameters":{"id":251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":240,"mutability":"mutable","name":"attestations","nameLocation":"9050:12:0","nodeType":"VariableDeclaration","scope":256,"src":"9027:35:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$592_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Attestation[]"},"typeName":{"baseType":{"id":238,"nodeType":"UserDefinedTypeName","pathNode":{"id":237,"name":"Attestation","nameLocations":["9027:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":592,"src":"9027:11:0"},"referencedDeclaration":592,"src":"9027:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$592_storage_ptr","typeString":"struct Attestation"}},"id":239,"nodeType":"ArrayTypeName","src":"9027:13:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$592_storage_$dyn_storage_ptr","typeString":"struct Attestation[]"}},"visibility":"internal"},{"constant":false,"id":243,"mutability":"mutable","name":"resolverFeesETH","nameLocation":"9091:15:0","nodeType":"VariableDeclaration","scope":256,"src":"9072:34:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":241,"name":"uint256","nodeType":"ElementaryTypeName","src":"9072:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":242,"nodeType":"ArrayTypeName","src":"9072:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":246,"mutability":"mutable","name":"indexingKeys","nameLocation":"9134:12:0","nodeType":"VariableDeclaration","scope":256,"src":"9116:30:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":244,"name":"string","nodeType":"ElementaryTypeName","src":"9116:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":245,"nodeType":"ArrayTypeName","src":"9116:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":248,"mutability":"mutable","name":"delegateSignature","nameLocation":"9171:17:0","nodeType":"VariableDeclaration","scope":256,"src":"9156:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":247,"name":"bytes","nodeType":"ElementaryTypeName","src":"9156:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":250,"mutability":"mutable","name":"extraData","nameLocation":"9213:9:0","nodeType":"VariableDeclaration","scope":256,"src":"9198:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":249,"name":"bytes","nodeType":"ElementaryTypeName","src":"9198:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9017:211:0"},"returnParameters":{"id":255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":254,"mutability":"mutable","name":"attestationIds","nameLocation":"9297:14:0","nodeType":"VariableDeclaration","scope":256,"src":"9279:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint64_$dyn_calldata_ptr","typeString":"uint64[]"},"typeName":{"baseType":{"id":252,"name":"uint64","nodeType":"ElementaryTypeName","src":"9279:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":253,"nodeType":"ArrayTypeName","src":"9279:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint64_$dyn_storage_ptr","typeString":"uint64[]"}},"visibility":"internal"}],"src":"9278:34:0"},"scope":495,"src":"8997:316:0","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":257,"nodeType":"StructuredDocumentation","src":"9319:85:0","text":" @notice Batch attests where the schema hook expects ERC20 payment."},"functionSelector":"59d9a12f","id":281,"implemented":false,"kind":"function","modifiers":[],"name":"attestBatch","nameLocation":"9418:11:0","nodeType":"FunctionDefinition","parameters":{"id":276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":261,"mutability":"mutable","name":"attestations","nameLocation":"9462:12:0","nodeType":"VariableDeclaration","scope":281,"src":"9439:35:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$592_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Attestation[]"},"typeName":{"baseType":{"id":259,"nodeType":"UserDefinedTypeName","pathNode":{"id":258,"name":"Attestation","nameLocations":["9439:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":592,"src":"9439:11:0"},"referencedDeclaration":592,"src":"9439:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$592_storage_ptr","typeString":"struct Attestation"}},"id":260,"nodeType":"ArrayTypeName","src":"9439:13:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$592_storage_$dyn_storage_ptr","typeString":"struct Attestation[]"}},"visibility":"internal"},{"constant":false,"id":265,"mutability":"mutable","name":"resolverFeesERC20Tokens","nameLocation":"9502:23:0","nodeType":"VariableDeclaration","scope":281,"src":"9484:41:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$2344_$dyn_calldata_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":263,"nodeType":"UserDefinedTypeName","pathNode":{"id":262,"name":"IERC20","nameLocations":["9484:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":2344,"src":"9484:6:0"},"referencedDeclaration":2344,"src":"9484:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2344","typeString":"contract IERC20"}},"id":264,"nodeType":"ArrayTypeName","src":"9484:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$2344_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":268,"mutability":"mutable","name":"resolverFeesERC20Amount","nameLocation":"9554:23:0","nodeType":"VariableDeclaration","scope":281,"src":"9535:42:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":266,"name":"uint256","nodeType":"ElementaryTypeName","src":"9535:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":267,"nodeType":"ArrayTypeName","src":"9535:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":271,"mutability":"mutable","name":"indexingKeys","nameLocation":"9605:12:0","nodeType":"VariableDeclaration","scope":281,"src":"9587:30:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":269,"name":"string","nodeType":"ElementaryTypeName","src":"9587:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":270,"nodeType":"ArrayTypeName","src":"9587:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":273,"mutability":"mutable","name":"delegateSignature","nameLocation":"9642:17:0","nodeType":"VariableDeclaration","scope":281,"src":"9627:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":272,"name":"bytes","nodeType":"ElementaryTypeName","src":"9627:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":275,"mutability":"mutable","name":"extraData","nameLocation":"9684:9:0","nodeType":"VariableDeclaration","scope":281,"src":"9669:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":274,"name":"bytes","nodeType":"ElementaryTypeName","src":"9669:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9429:270:0"},"returnParameters":{"id":280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":279,"mutability":"mutable","name":"attestationIds","nameLocation":"9752:14:0","nodeType":"VariableDeclaration","scope":281,"src":"9734:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint64_$dyn_calldata_ptr","typeString":"uint64[]"},"typeName":{"baseType":{"id":277,"name":"uint64","nodeType":"ElementaryTypeName","src":"9734:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":278,"nodeType":"ArrayTypeName","src":"9734:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint64_$dyn_storage_ptr","typeString":"uint64[]"}},"visibility":"internal"}],"src":"9733:34:0"},"scope":495,"src":"9409:359:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":282,"nodeType":"StructuredDocumentation","src":"9774:63:0","text":" @notice Batch timestamps off-chain data IDs."},"functionSelector":"1916749d","id":292,"implemented":false,"kind":"function","modifiers":[],"name":"attestOffchainBatch","nameLocation":"9851:19:0","nodeType":"FunctionDefinition","parameters":{"id":290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"mutability":"mutable","name":"offchainAttestationIds","nameLocation":"9898:22:0","nodeType":"VariableDeclaration","scope":292,"src":"9880:40:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":283,"name":"string","nodeType":"ElementaryTypeName","src":"9880:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":284,"nodeType":"ArrayTypeName","src":"9880:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":287,"mutability":"mutable","name":"delegateAttester","nameLocation":"9938:16:0","nodeType":"VariableDeclaration","scope":292,"src":"9930:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":286,"name":"address","nodeType":"ElementaryTypeName","src":"9930:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":289,"mutability":"mutable","name":"delegateSignature","nameLocation":"9979:17:0","nodeType":"VariableDeclaration","scope":292,"src":"9964:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":288,"name":"bytes","nodeType":"ElementaryTypeName","src":"9964:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9870:132:0"},"returnParameters":{"id":291,"nodeType":"ParameterList","parameters":[],"src":"10019:0:0"},"scope":495,"src":"9842:178:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":293,"nodeType":"StructuredDocumentation","src":"10026:73:0","text":" @notice Batch revokes revocable on-chain attestations."},"functionSelector":"65ae13b3","id":306,"implemented":false,"kind":"function","modifiers":[],"name":"revokeBatch","nameLocation":"10113:11:0","nodeType":"FunctionDefinition","parameters":{"id":304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":296,"mutability":"mutable","name":"attestationIds","nameLocation":"10152:14:0","nodeType":"VariableDeclaration","scope":306,"src":"10134:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint64_$dyn_calldata_ptr","typeString":"uint64[]"},"typeName":{"baseType":{"id":294,"name":"uint64","nodeType":"ElementaryTypeName","src":"10134:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":295,"nodeType":"ArrayTypeName","src":"10134:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint64_$dyn_storage_ptr","typeString":"uint64[]"}},"visibility":"internal"},{"constant":false,"id":299,"mutability":"mutable","name":"reasons","nameLocation":"10194:7:0","nodeType":"VariableDeclaration","scope":306,"src":"10176:25:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":297,"name":"string","nodeType":"ElementaryTypeName","src":"10176:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":298,"nodeType":"ArrayTypeName","src":"10176:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":301,"mutability":"mutable","name":"delegateSignature","nameLocation":"10226:17:0","nodeType":"VariableDeclaration","scope":306,"src":"10211:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":300,"name":"bytes","nodeType":"ElementaryTypeName","src":"10211:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":303,"mutability":"mutable","name":"extraData","nameLocation":"10268:9:0","nodeType":"VariableDeclaration","scope":306,"src":"10253:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":302,"name":"bytes","nodeType":"ElementaryTypeName","src":"10253:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10124:159:0"},"returnParameters":{"id":305,"nodeType":"ParameterList","parameters":[],"src":"10300:0:0"},"scope":495,"src":"10104:197:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":307,"nodeType":"StructuredDocumentation","src":"10307:115:0","text":" @notice Batch revokes revocable on-chain attestations where the schema hook expects ETH payment."},"functionSelector":"d7681235","id":323,"implemented":false,"kind":"function","modifiers":[],"name":"revokeBatch","nameLocation":"10436:11:0","nodeType":"FunctionDefinition","parameters":{"id":321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":310,"mutability":"mutable","name":"attestationIds","nameLocation":"10475:14:0","nodeType":"VariableDeclaration","scope":323,"src":"10457:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint64_$dyn_calldata_ptr","typeString":"uint64[]"},"typeName":{"baseType":{"id":308,"name":"uint64","nodeType":"ElementaryTypeName","src":"10457:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":309,"nodeType":"ArrayTypeName","src":"10457:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint64_$dyn_storage_ptr","typeString":"uint64[]"}},"visibility":"internal"},{"constant":false,"id":313,"mutability":"mutable","name":"reasons","nameLocation":"10517:7:0","nodeType":"VariableDeclaration","scope":323,"src":"10499:25:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":311,"name":"string","nodeType":"ElementaryTypeName","src":"10499:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":312,"nodeType":"ArrayTypeName","src":"10499:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":316,"mutability":"mutable","name":"resolverFeesETH","nameLocation":"10553:15:0","nodeType":"VariableDeclaration","scope":323,"src":"10534:34:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":314,"name":"uint256","nodeType":"ElementaryTypeName","src":"10534:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":315,"nodeType":"ArrayTypeName","src":"10534:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":318,"mutability":"mutable","name":"delegateSignature","nameLocation":"10593:17:0","nodeType":"VariableDeclaration","scope":323,"src":"10578:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":317,"name":"bytes","nodeType":"ElementaryTypeName","src":"10578:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":320,"mutability":"mutable","name":"extraData","nameLocation":"10635:9:0","nodeType":"VariableDeclaration","scope":323,"src":"10620:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":319,"name":"bytes","nodeType":"ElementaryTypeName","src":"10620:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10447:203:0"},"returnParameters":{"id":322,"nodeType":"ParameterList","parameters":[],"src":"10683:0:0"},"scope":495,"src":"10427:257:0","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":324,"nodeType":"StructuredDocumentation","src":"10690:117:0","text":" @notice Batch revokes revocable on-chain attestations where the schema hook expects ERC20 payment."},"functionSelector":"fd397913","id":344,"implemented":false,"kind":"function","modifiers":[],"name":"revokeBatch","nameLocation":"10821:11:0","nodeType":"FunctionDefinition","parameters":{"id":342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":327,"mutability":"mutable","name":"attestationIds","nameLocation":"10860:14:0","nodeType":"VariableDeclaration","scope":344,"src":"10842:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint64_$dyn_calldata_ptr","typeString":"uint64[]"},"typeName":{"baseType":{"id":325,"name":"uint64","nodeType":"ElementaryTypeName","src":"10842:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":326,"nodeType":"ArrayTypeName","src":"10842:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint64_$dyn_storage_ptr","typeString":"uint64[]"}},"visibility":"internal"},{"constant":false,"id":330,"mutability":"mutable","name":"reasons","nameLocation":"10902:7:0","nodeType":"VariableDeclaration","scope":344,"src":"10884:25:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":328,"name":"string","nodeType":"ElementaryTypeName","src":"10884:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":329,"nodeType":"ArrayTypeName","src":"10884:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":334,"mutability":"mutable","name":"resolverFeesERC20Tokens","nameLocation":"10937:23:0","nodeType":"VariableDeclaration","scope":344,"src":"10919:41:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$2344_$dyn_calldata_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":332,"nodeType":"UserDefinedTypeName","pathNode":{"id":331,"name":"IERC20","nameLocations":["10919:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":2344,"src":"10919:6:0"},"referencedDeclaration":2344,"src":"10919:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2344","typeString":"contract IERC20"}},"id":333,"nodeType":"ArrayTypeName","src":"10919:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$2344_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":337,"mutability":"mutable","name":"resolverFeesERC20Amount","nameLocation":"10989:23:0","nodeType":"VariableDeclaration","scope":344,"src":"10970:42:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":335,"name":"uint256","nodeType":"ElementaryTypeName","src":"10970:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":336,"nodeType":"ArrayTypeName","src":"10970:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":339,"mutability":"mutable","name":"delegateSignature","nameLocation":"11037:17:0","nodeType":"VariableDeclaration","scope":344,"src":"11022:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":338,"name":"bytes","nodeType":"ElementaryTypeName","src":"11022:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":341,"mutability":"mutable","name":"extraData","nameLocation":"11079:9:0","nodeType":"VariableDeclaration","scope":344,"src":"11064:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":340,"name":"bytes","nodeType":"ElementaryTypeName","src":"11064:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10832:262:0"},"returnParameters":{"id":343,"nodeType":"ParameterList","parameters":[],"src":"11111:0:0"},"scope":495,"src":"10812:300:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":345,"nodeType":"StructuredDocumentation","src":"11118:64:0","text":" @notice Batch revokes off-chain attestations."},"functionSelector":"ba97637d","id":356,"implemented":false,"kind":"function","modifiers":[],"name":"revokeOffchainBatch","nameLocation":"11196:19:0","nodeType":"FunctionDefinition","parameters":{"id":354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":348,"mutability":"mutable","name":"offchainAttestationIds","nameLocation":"11243:22:0","nodeType":"VariableDeclaration","scope":356,"src":"11225:40:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":346,"name":"string","nodeType":"ElementaryTypeName","src":"11225:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":347,"nodeType":"ArrayTypeName","src":"11225:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":351,"mutability":"mutable","name":"reasons","nameLocation":"11293:7:0","nodeType":"VariableDeclaration","scope":356,"src":"11275:25:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":349,"name":"string","nodeType":"ElementaryTypeName","src":"11275:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":350,"nodeType":"ArrayTypeName","src":"11275:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":353,"mutability":"mutable","name":"delegateSignature","nameLocation":"11325:17:0","nodeType":"VariableDeclaration","scope":356,"src":"11310:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":352,"name":"bytes","nodeType":"ElementaryTypeName","src":"11310:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11215:133:0"},"returnParameters":{"id":355,"nodeType":"ParameterList","parameters":[],"src":"11365:0:0"},"scope":495,"src":"11187:179:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":357,"nodeType":"StructuredDocumentation","src":"11372:58:0","text":" @notice Returns the specified `Schema`."},"functionSelector":"8d1be875","id":365,"implemented":false,"kind":"function","modifiers":[],"name":"getSchema","nameLocation":"11444:9:0","nodeType":"FunctionDefinition","parameters":{"id":360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":359,"mutability":"mutable","name":"schemaId","nameLocation":"11461:8:0","nodeType":"VariableDeclaration","scope":365,"src":"11454:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":358,"name":"uint64","nodeType":"ElementaryTypeName","src":"11454:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"11453:17:0"},"returnParameters":{"id":364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":363,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":365,"src":"11494:15:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Schema_$630_calldata_ptr","typeString":"struct Schema"},"typeName":{"id":362,"nodeType":"UserDefinedTypeName","pathNode":{"id":361,"name":"Schema","nameLocations":["11494:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":630,"src":"11494:6:0"},"referencedDeclaration":630,"src":"11494:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Schema_$630_storage_ptr","typeString":"struct Schema"}},"visibility":"internal"}],"src":"11493:17:0"},"scope":495,"src":"11435:76:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":366,"nodeType":"StructuredDocumentation","src":"11517:63:0","text":" @notice Returns the specified `Attestation`."},"functionSelector":"62252880","id":374,"implemented":false,"kind":"function","modifiers":[],"name":"getAttestation","nameLocation":"11594:14:0","nodeType":"FunctionDefinition","parameters":{"id":369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":368,"mutability":"mutable","name":"attestationId","nameLocation":"11616:13:0","nodeType":"VariableDeclaration","scope":374,"src":"11609:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":367,"name":"uint64","nodeType":"ElementaryTypeName","src":"11609:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"11608:22:0"},"returnParameters":{"id":373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":372,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":374,"src":"11654:20:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$592_calldata_ptr","typeString":"struct Attestation"},"typeName":{"id":371,"nodeType":"UserDefinedTypeName","pathNode":{"id":370,"name":"Attestation","nameLocations":["11654:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":592,"src":"11654:11:0"},"referencedDeclaration":592,"src":"11654:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$592_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"src":"11653:22:0"},"scope":495,"src":"11585:91:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":375,"nodeType":"StructuredDocumentation","src":"11682:71:0","text":" @notice Returns the specified `OffchainAttestation`."},"functionSelector":"6a67651c","id":383,"implemented":false,"kind":"function","modifiers":[],"name":"getOffchainAttestation","nameLocation":"11767:22:0","nodeType":"FunctionDefinition","parameters":{"id":378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":377,"mutability":"mutable","name":"offchainAttestationId","nameLocation":"11806:21:0","nodeType":"VariableDeclaration","scope":383,"src":"11790:37:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":376,"name":"string","nodeType":"ElementaryTypeName","src":"11790:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"11789:39:0"},"returnParameters":{"id":382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":381,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":383,"src":"11876:28:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_OffchainAttestation_$598_calldata_ptr","typeString":"struct OffchainAttestation"},"typeName":{"id":380,"nodeType":"UserDefinedTypeName","pathNode":{"id":379,"name":"OffchainAttestation","nameLocations":["11876:19:0"],"nodeType":"IdentifierPath","referencedDeclaration":598,"src":"11876:19:0"},"referencedDeclaration":598,"src":"11876:19:0","typeDescriptions":{"typeIdentifier":"t_struct$_OffchainAttestation_$598_storage_ptr","typeString":"struct OffchainAttestation"}},"visibility":"internal"}],"src":"11875:30:0"},"scope":495,"src":"11758:148:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":384,"nodeType":"StructuredDocumentation","src":"11912:100:0","text":" @notice Returns the hash that will be used to authorize a delegated registration."},"functionSelector":"570b7434","id":392,"implemented":false,"kind":"function","modifiers":[],"name":"getDelegatedRegisterHash","nameLocation":"12026:24:0","nodeType":"FunctionDefinition","parameters":{"id":388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":387,"mutability":"mutable","name":"schema","nameLocation":"12065:6:0","nodeType":"VariableDeclaration","scope":392,"src":"12051:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Schema_$630_memory_ptr","typeString":"struct Schema"},"typeName":{"id":386,"nodeType":"UserDefinedTypeName","pathNode":{"id":385,"name":"Schema","nameLocations":["12051:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":630,"src":"12051:6:0"},"referencedDeclaration":630,"src":"12051:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Schema_$630_storage_ptr","typeString":"struct Schema"}},"visibility":"internal"}],"src":"12050:22:0"},"returnParameters":{"id":391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":390,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":392,"src":"12096:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":389,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12096:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12095:9:0"},"scope":495,"src":"12017:88:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":393,"nodeType":"StructuredDocumentation","src":"12111:106:0","text":" @notice Returns the hash that will be used to authorize a delegated batch registration."},"functionSelector":"00f0f855","id":402,"implemented":false,"kind":"function","modifiers":[],"name":"getDelegatedRegisterBatchHash","nameLocation":"12231:29:0","nodeType":"FunctionDefinition","parameters":{"id":398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":397,"mutability":"mutable","name":"schemas","nameLocation":"12277:7:0","nodeType":"VariableDeclaration","scope":402,"src":"12261:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Schema_$630_memory_ptr_$dyn_memory_ptr","typeString":"struct Schema[]"},"typeName":{"baseType":{"id":395,"nodeType":"UserDefinedTypeName","pathNode":{"id":394,"name":"Schema","nameLocations":["12261:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":630,"src":"12261:6:0"},"referencedDeclaration":630,"src":"12261:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Schema_$630_storage_ptr","typeString":"struct Schema"}},"id":396,"nodeType":"ArrayTypeName","src":"12261:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Schema_$630_storage_$dyn_storage_ptr","typeString":"struct Schema[]"}},"visibility":"internal"}],"src":"12260:25:0"},"returnParameters":{"id":401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":400,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":402,"src":"12309:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":399,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12309:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12308:9:0"},"scope":495,"src":"12222:96:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":403,"nodeType":"StructuredDocumentation","src":"12324:99:0","text":" @notice Returns the hash that will be used to authorize a delegated attestation."},"functionSelector":"8ef1fbc1","id":411,"implemented":false,"kind":"function","modifiers":[],"name":"getDelegatedAttestHash","nameLocation":"12437:22:0","nodeType":"FunctionDefinition","parameters":{"id":407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":406,"mutability":"mutable","name":"attestation","nameLocation":"12481:11:0","nodeType":"VariableDeclaration","scope":411,"src":"12460:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$592_calldata_ptr","typeString":"struct Attestation"},"typeName":{"id":405,"nodeType":"UserDefinedTypeName","pathNode":{"id":404,"name":"Attestation","nameLocations":["12460:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":592,"src":"12460:11:0"},"referencedDeclaration":592,"src":"12460:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$592_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"src":"12459:34:0"},"returnParameters":{"id":410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":409,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":411,"src":"12517:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":408,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12517:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12516:9:0"},"scope":495,"src":"12428:98:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":412,"nodeType":"StructuredDocumentation","src":"12532:105:0","text":" @notice Returns the hash that will be used to authorize a delegated batch attestation."},"functionSelector":"3f50fb76","id":421,"implemented":false,"kind":"function","modifiers":[],"name":"getDelegatedAttestBatchHash","nameLocation":"12651:27:0","nodeType":"FunctionDefinition","parameters":{"id":417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":416,"mutability":"mutable","name":"attestations","nameLocation":"12702:12:0","nodeType":"VariableDeclaration","scope":421,"src":"12679:35:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$592_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Attestation[]"},"typeName":{"baseType":{"id":414,"nodeType":"UserDefinedTypeName","pathNode":{"id":413,"name":"Attestation","nameLocations":["12679:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":592,"src":"12679:11:0"},"referencedDeclaration":592,"src":"12679:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$592_storage_ptr","typeString":"struct Attestation"}},"id":415,"nodeType":"ArrayTypeName","src":"12679:13:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$592_storage_$dyn_storage_ptr","typeString":"struct Attestation[]"}},"visibility":"internal"}],"src":"12678:37:0"},"returnParameters":{"id":420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":419,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":421,"src":"12739:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":418,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12739:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12738:9:0"},"scope":495,"src":"12642:106:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":422,"nodeType":"StructuredDocumentation","src":"12754:108:0","text":" @notice Returns the hash that will be used to authorize a delegated offchain attestation."},"functionSelector":"be919fb1","id":429,"implemented":false,"kind":"function","modifiers":[],"name":"getDelegatedOffchainAttestHash","nameLocation":"12876:30:0","nodeType":"FunctionDefinition","parameters":{"id":425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":424,"mutability":"mutable","name":"offchainAttestationId","nameLocation":"12923:21:0","nodeType":"VariableDeclaration","scope":429,"src":"12907:37:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":423,"name":"string","nodeType":"ElementaryTypeName","src":"12907:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"12906:39:0"},"returnParameters":{"id":428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":427,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":429,"src":"12969:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":426,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12969:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12968:9:0"},"scope":495,"src":"12867:111:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":430,"nodeType":"StructuredDocumentation","src":"12984:114:0","text":" @notice Returns the hash that will be used to authorize a delegated batch offchain attestation."},"functionSelector":"263bc92d","id":438,"implemented":false,"kind":"function","modifiers":[],"name":"getDelegatedOffchainAttestBatchHash","nameLocation":"13112:35:0","nodeType":"FunctionDefinition","parameters":{"id":434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":433,"mutability":"mutable","name":"offchainAttestationIds","nameLocation":"13166:22:0","nodeType":"VariableDeclaration","scope":438,"src":"13148:40:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":431,"name":"string","nodeType":"ElementaryTypeName","src":"13148:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":432,"nodeType":"ArrayTypeName","src":"13148:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"13147:42:0"},"returnParameters":{"id":437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":436,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":438,"src":"13237:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":435,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13237:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13236:9:0"},"scope":495,"src":"13103:143:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":439,"nodeType":"StructuredDocumentation","src":"13252:98:0","text":" @notice Returns the hash that will be used to authorize a delegated revocation."},"functionSelector":"dc50eada","id":448,"implemented":false,"kind":"function","modifiers":[],"name":"getDelegatedRevokeHash","nameLocation":"13364:22:0","nodeType":"FunctionDefinition","parameters":{"id":444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":441,"mutability":"mutable","name":"attestationId","nameLocation":"13394:13:0","nodeType":"VariableDeclaration","scope":448,"src":"13387:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":440,"name":"uint64","nodeType":"ElementaryTypeName","src":"13387:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":443,"mutability":"mutable","name":"reason","nameLocation":"13423:6:0","nodeType":"VariableDeclaration","scope":448,"src":"13409:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":442,"name":"string","nodeType":"ElementaryTypeName","src":"13409:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"13386:44:0"},"returnParameters":{"id":447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":446,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":448,"src":"13454:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":445,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13454:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13453:9:0"},"scope":495,"src":"13355:108:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":449,"nodeType":"StructuredDocumentation","src":"13469:104:0","text":" @notice Returns the hash that will be used to authorize a delegated batch revocation."},"functionSelector":"40f356fa","id":460,"implemented":false,"kind":"function","modifiers":[],"name":"getDelegatedRevokeBatchHash","nameLocation":"13587:27:0","nodeType":"FunctionDefinition","parameters":{"id":456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":452,"mutability":"mutable","name":"attestationIds","nameLocation":"13640:14:0","nodeType":"VariableDeclaration","scope":460,"src":"13624:30:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint64_$dyn_memory_ptr","typeString":"uint64[]"},"typeName":{"baseType":{"id":450,"name":"uint64","nodeType":"ElementaryTypeName","src":"13624:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":451,"nodeType":"ArrayTypeName","src":"13624:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint64_$dyn_storage_ptr","typeString":"uint64[]"}},"visibility":"internal"},{"constant":false,"id":455,"mutability":"mutable","name":"reasons","nameLocation":"13680:7:0","nodeType":"VariableDeclaration","scope":460,"src":"13664:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":453,"name":"string","nodeType":"ElementaryTypeName","src":"13664:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":454,"nodeType":"ArrayTypeName","src":"13664:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"13614:79:0"},"returnParameters":{"id":459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":458,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":460,"src":"13741:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":457,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13741:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13740:9:0"},"scope":495,"src":"13578:172:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":461,"nodeType":"StructuredDocumentation","src":"13756:107:0","text":" @notice Returns the hash that will be used to authorize a delegated offchain revocation."},"functionSelector":"985292eb","id":470,"implemented":false,"kind":"function","modifiers":[],"name":"getDelegatedOffchainRevokeHash","nameLocation":"13877:30:0","nodeType":"FunctionDefinition","parameters":{"id":466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":463,"mutability":"mutable","name":"offchainAttestationId","nameLocation":"13931:21:0","nodeType":"VariableDeclaration","scope":470,"src":"13917:35:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":462,"name":"string","nodeType":"ElementaryTypeName","src":"13917:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":465,"mutability":"mutable","name":"reason","nameLocation":"13976:6:0","nodeType":"VariableDeclaration","scope":470,"src":"13962:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":464,"name":"string","nodeType":"ElementaryTypeName","src":"13962:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"13907:81:0"},"returnParameters":{"id":469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":468,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":470,"src":"14036:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":467,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14036:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"14035:9:0"},"scope":495,"src":"13868:177:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":471,"nodeType":"StructuredDocumentation","src":"14051:113:0","text":" @notice Returns the hash that will be used to authorize a delegated batch offchain revocation."},"functionSelector":"d3dc7b23","id":482,"implemented":false,"kind":"function","modifiers":[],"name":"getDelegatedOffchainRevokeBatchHash","nameLocation":"14178:35:0","nodeType":"FunctionDefinition","parameters":{"id":478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":474,"mutability":"mutable","name":"offchainAttestationIds","nameLocation":"14239:22:0","nodeType":"VariableDeclaration","scope":482,"src":"14223:38:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":472,"name":"string","nodeType":"ElementaryTypeName","src":"14223:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":473,"nodeType":"ArrayTypeName","src":"14223:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":477,"mutability":"mutable","name":"reasons","nameLocation":"14287:7:0","nodeType":"VariableDeclaration","scope":482,"src":"14271:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":475,"name":"string","nodeType":"ElementaryTypeName","src":"14271:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":476,"nodeType":"ArrayTypeName","src":"14271:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"14213:87:0"},"returnParameters":{"id":481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":482,"src":"14348:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":479,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14348:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"14347:9:0"},"scope":495,"src":"14169:188:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":483,"nodeType":"StructuredDocumentation","src":"14363:112:0","text":" @notice Returns the current schema counter. This is incremented for each `Schema` registered."},"functionSelector":"cb6a3237","id":488,"implemented":false,"kind":"function","modifiers":[],"name":"schemaCounter","nameLocation":"14489:13:0","nodeType":"FunctionDefinition","parameters":{"id":484,"nodeType":"ParameterList","parameters":[],"src":"14502:2:0"},"returnParameters":{"id":487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":486,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":488,"src":"14528:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":485,"name":"uint64","nodeType":"ElementaryTypeName","src":"14528:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"14527:8:0"},"scope":495,"src":"14480:56:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":489,"nodeType":"StructuredDocumentation","src":"14542:125:0","text":" @notice Returns the current on-chain attestation counter. This is incremented for each `Attestation` made."},"functionSelector":"2c996e03","id":494,"implemented":false,"kind":"function","modifiers":[],"name":"attestationCounter","nameLocation":"14681:18:0","nodeType":"FunctionDefinition","parameters":{"id":490,"nodeType":"ParameterList","parameters":[],"src":"14699:2:0"},"returnParameters":{"id":493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":492,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":494,"src":"14725:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":491,"name":"uint64","nodeType":"ElementaryTypeName","src":"14725:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"14724:8:0"},"scope":495,"src":"14672:61:0","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":496,"src":"379:14356:0","usedErrors":[42,45,48,51,54,57,60,63,66,69,72,75,78],"usedEvents":[17,23,29,33,39]}],"src":"32:14704:0"},"id":0},"@ethsign/sign-protocol-evm/src/interfaces/ISPHook.sol":{"ast":{"absolutePath":"@ethsign/sign-protocol-evm/src/interfaces/ISPHook.sol","exportedSymbols":{"IERC20":[2344],"ISPHook":[555]},"id":556,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":497,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:1"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":499,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":556,"sourceUnit":2345,"src":"58:72:1","symbolAliases":[{"foreign":{"id":498,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2344,"src":"67:6:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ISPHook","contractDependencies":[],"contractKind":"interface","documentation":{"id":500,"nodeType":"StructuredDocumentation","src":"132:91:1","text":" @title SIGN Attestation Protocol Resolver Interface\n @author Jack Xu @ EthSign"},"fullyImplemented":false,"id":555,"linearizedBaseContracts":[555],"name":"ISPHook","nameLocation":"234:7:1","nodeType":"ContractDefinition","nodes":[{"functionSelector":"3398b4ed","id":511,"implemented":false,"kind":"function","modifiers":[],"name":"didReceiveAttestation","nameLocation":"257:21:1","nodeType":"FunctionDefinition","parameters":{"id":509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":502,"mutability":"mutable","name":"attester","nameLocation":"296:8:1","nodeType":"VariableDeclaration","scope":511,"src":"288:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":501,"name":"address","nodeType":"ElementaryTypeName","src":"288:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":504,"mutability":"mutable","name":"schemaId","nameLocation":"321:8:1","nodeType":"VariableDeclaration","scope":511,"src":"314:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":503,"name":"uint64","nodeType":"ElementaryTypeName","src":"314:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":506,"mutability":"mutable","name":"attestationId","nameLocation":"346:13:1","nodeType":"VariableDeclaration","scope":511,"src":"339:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":505,"name":"uint64","nodeType":"ElementaryTypeName","src":"339:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":508,"mutability":"mutable","name":"extraData","nameLocation":"384:9:1","nodeType":"VariableDeclaration","scope":511,"src":"369:24:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":507,"name":"bytes","nodeType":"ElementaryTypeName","src":"369:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"278:121:1"},"returnParameters":{"id":510,"nodeType":"ParameterList","parameters":[],"src":"432:0:1"},"scope":555,"src":"248:185:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"4466507a","id":527,"implemented":false,"kind":"function","modifiers":[],"name":"didReceiveAttestation","nameLocation":"448:21:1","nodeType":"FunctionDefinition","parameters":{"id":525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":513,"mutability":"mutable","name":"attester","nameLocation":"487:8:1","nodeType":"VariableDeclaration","scope":527,"src":"479:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":512,"name":"address","nodeType":"ElementaryTypeName","src":"479:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":515,"mutability":"mutable","name":"schemaId","nameLocation":"512:8:1","nodeType":"VariableDeclaration","scope":527,"src":"505:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":514,"name":"uint64","nodeType":"ElementaryTypeName","src":"505:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":517,"mutability":"mutable","name":"attestationId","nameLocation":"537:13:1","nodeType":"VariableDeclaration","scope":527,"src":"530:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":516,"name":"uint64","nodeType":"ElementaryTypeName","src":"530:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":520,"mutability":"mutable","name":"resolverFeeERC20Token","nameLocation":"567:21:1","nodeType":"VariableDeclaration","scope":527,"src":"560:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2344","typeString":"contract IERC20"},"typeName":{"id":519,"nodeType":"UserDefinedTypeName","pathNode":{"id":518,"name":"IERC20","nameLocations":["560:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":2344,"src":"560:6:1"},"referencedDeclaration":2344,"src":"560:6:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2344","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":522,"mutability":"mutable","name":"resolverFeeERC20Amount","nameLocation":"606:22:1","nodeType":"VariableDeclaration","scope":527,"src":"598:30:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":521,"name":"uint256","nodeType":"ElementaryTypeName","src":"598:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":524,"mutability":"mutable","name":"extraData","nameLocation":"653:9:1","nodeType":"VariableDeclaration","scope":527,"src":"638:24:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":523,"name":"bytes","nodeType":"ElementaryTypeName","src":"638:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"469:199:1"},"returnParameters":{"id":526,"nodeType":"ParameterList","parameters":[],"src":"685:0:1"},"scope":555,"src":"439:247:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e33361f4","id":538,"implemented":false,"kind":"function","modifiers":[],"name":"didReceiveRevocation","nameLocation":"701:20:1","nodeType":"FunctionDefinition","parameters":{"id":536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":529,"mutability":"mutable","name":"attester","nameLocation":"739:8:1","nodeType":"VariableDeclaration","scope":538,"src":"731:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":528,"name":"address","nodeType":"ElementaryTypeName","src":"731:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":531,"mutability":"mutable","name":"schemaId","nameLocation":"764:8:1","nodeType":"VariableDeclaration","scope":538,"src":"757:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":530,"name":"uint64","nodeType":"ElementaryTypeName","src":"757:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":533,"mutability":"mutable","name":"attestationId","nameLocation":"789:13:1","nodeType":"VariableDeclaration","scope":538,"src":"782:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":532,"name":"uint64","nodeType":"ElementaryTypeName","src":"782:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":535,"mutability":"mutable","name":"extraData","nameLocation":"827:9:1","nodeType":"VariableDeclaration","scope":538,"src":"812:24:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":534,"name":"bytes","nodeType":"ElementaryTypeName","src":"812:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"721:121:1"},"returnParameters":{"id":537,"nodeType":"ParameterList","parameters":[],"src":"875:0:1"},"scope":555,"src":"692:184:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"e830b5c7","id":554,"implemented":false,"kind":"function","modifiers":[],"name":"didReceiveRevocation","nameLocation":"891:20:1","nodeType":"FunctionDefinition","parameters":{"id":552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":540,"mutability":"mutable","name":"attester","nameLocation":"929:8:1","nodeType":"VariableDeclaration","scope":554,"src":"921:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":539,"name":"address","nodeType":"ElementaryTypeName","src":"921:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":542,"mutability":"mutable","name":"schemaId","nameLocation":"954:8:1","nodeType":"VariableDeclaration","scope":554,"src":"947:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":541,"name":"uint64","nodeType":"ElementaryTypeName","src":"947:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":544,"mutability":"mutable","name":"attestationId","nameLocation":"979:13:1","nodeType":"VariableDeclaration","scope":554,"src":"972:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":543,"name":"uint64","nodeType":"ElementaryTypeName","src":"972:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":547,"mutability":"mutable","name":"resolverFeeERC20Token","nameLocation":"1009:21:1","nodeType":"VariableDeclaration","scope":554,"src":"1002:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2344","typeString":"contract IERC20"},"typeName":{"id":546,"nodeType":"UserDefinedTypeName","pathNode":{"id":545,"name":"IERC20","nameLocations":["1002:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":2344,"src":"1002:6:1"},"referencedDeclaration":2344,"src":"1002:6:1","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2344","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":549,"mutability":"mutable","name":"resolverFeeERC20Amount","nameLocation":"1048:22:1","nodeType":"VariableDeclaration","scope":554,"src":"1040:30:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":548,"name":"uint256","nodeType":"ElementaryTypeName","src":"1040:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":551,"mutability":"mutable","name":"extraData","nameLocation":"1095:9:1","nodeType":"VariableDeclaration","scope":554,"src":"1080:24:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":550,"name":"bytes","nodeType":"ElementaryTypeName","src":"1080:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"911:199:1"},"returnParameters":{"id":553,"nodeType":"ParameterList","parameters":[],"src":"1127:0:1"},"scope":555,"src":"882:246:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":556,"src":"224:906:1","usedErrors":[],"usedEvents":[]}],"src":"32:1099:1"},"id":1},"@ethsign/sign-protocol-evm/src/interfaces/IVersionable.sol":{"ast":{"absolutePath":"@ethsign/sign-protocol-evm/src/interfaces/IVersionable.sol","exportedSymbols":{"IVersionable":[564]},"id":565,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":557,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IVersionable","contractDependencies":[],"contractKind":"interface","documentation":{"id":558,"nodeType":"StructuredDocumentation","src":"58:166:2","text":" @title IVersionable\n @author Jack Xu @ EthSign\n @dev This interface helps contracts to keep track of their versioning for upgrade compatibility checks."},"fullyImplemented":false,"id":564,"linearizedBaseContracts":[564],"name":"IVersionable","nameLocation":"235:12:2","nodeType":"ContractDefinition","nodes":[{"functionSelector":"54fd4d50","id":563,"implemented":false,"kind":"function","modifiers":[],"name":"version","nameLocation":"263:7:2","nodeType":"FunctionDefinition","parameters":{"id":559,"nodeType":"ParameterList","parameters":[],"src":"270:2:2"},"returnParameters":{"id":562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":561,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":563,"src":"296:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":560,"name":"string","nodeType":"ElementaryTypeName","src":"296:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"295:15:2"},"scope":564,"src":"254:57:2","stateMutability":"pure","virtual":false,"visibility":"external"}],"scope":565,"src":"225:88:2","usedErrors":[],"usedEvents":[]}],"src":"32:282:2"},"id":2},"@ethsign/sign-protocol-evm/src/models/Attestation.sol":{"ast":{"absolutePath":"@ethsign/sign-protocol-evm/src/models/Attestation.sol","exportedSymbols":{"Attestation":[592],"DataLocation":[606],"OffchainAttestation":[598]},"id":599,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":566,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:3"},{"absolutePath":"@ethsign/sign-protocol-evm/src/models/DataLocation.sol","file":"./DataLocation.sol","id":568,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":599,"sourceUnit":607,"src":"58:50:3","symbolAliases":[{"foreign":{"id":567,"name":"DataLocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"67:12:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"Attestation","documentation":{"id":569,"nodeType":"StructuredDocumentation","src":"110:1292:3","text":" @title Attestation\n @author Jack Xu @ EthSign\n @notice This struct represents an on-chain attestation record. This record is not deleted after revocation.\n `schemaId`: The `Schema` that this Attestation is based on. It must exist.\n `linkedAttestationId`: Useful if the current Attestation references a previous Attestation. It can either be 0 or an\n existing attestation ID.\n `attestTimestamp`: When the attestation was made. This is automatically populated by `_attest(...)`.\n `revokeTimestamp`: When the attestation was revoked. This is automatically populated by `_revoke(...)`.\n `attester`: The attester. At this time, the attester must be the caller of `attest()`.\n `validUntil`: The expiration timestamp of the Attestation. Must respect `Schema.maxValidFor`. 0 indicates no\n expiration date.\n `dataLocation`: Where `Attestation.data` is stored. See `DataLocation.DataLocation`.\n `revoked`: If the Attestation has been revoked. It is possible to make a revoked Attestation.\n `recipients`: The intended ABI-encoded recipients of this Attestation. This is of type `bytes` to support non-EVM\n repicients.\n `data`: The raw data of the Attestation based on `Schema.schema`. There is no enforcement here, however. Recommended\n to use `abi.encode`."},"id":592,"members":[{"constant":false,"id":571,"mutability":"mutable","name":"schemaId","nameLocation":"1435:8:3","nodeType":"VariableDeclaration","scope":592,"src":"1428:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":570,"name":"uint64","nodeType":"ElementaryTypeName","src":"1428:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":573,"mutability":"mutable","name":"linkedAttestationId","nameLocation":"1456:19:3","nodeType":"VariableDeclaration","scope":592,"src":"1449:26:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":572,"name":"uint64","nodeType":"ElementaryTypeName","src":"1449:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":575,"mutability":"mutable","name":"attestTimestamp","nameLocation":"1488:15:3","nodeType":"VariableDeclaration","scope":592,"src":"1481:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":574,"name":"uint64","nodeType":"ElementaryTypeName","src":"1481:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":577,"mutability":"mutable","name":"revokeTimestamp","nameLocation":"1516:15:3","nodeType":"VariableDeclaration","scope":592,"src":"1509:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":576,"name":"uint64","nodeType":"ElementaryTypeName","src":"1509:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":579,"mutability":"mutable","name":"attester","nameLocation":"1545:8:3","nodeType":"VariableDeclaration","scope":592,"src":"1537:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":578,"name":"address","nodeType":"ElementaryTypeName","src":"1537:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":581,"mutability":"mutable","name":"validUntil","nameLocation":"1566:10:3","nodeType":"VariableDeclaration","scope":592,"src":"1559:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":580,"name":"uint64","nodeType":"ElementaryTypeName","src":"1559:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":584,"mutability":"mutable","name":"dataLocation","nameLocation":"1595:12:3","nodeType":"VariableDeclaration","scope":592,"src":"1582:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_DataLocation_$606","typeString":"enum DataLocation"},"typeName":{"id":583,"nodeType":"UserDefinedTypeName","pathNode":{"id":582,"name":"DataLocation","nameLocations":["1582:12:3"],"nodeType":"IdentifierPath","referencedDeclaration":606,"src":"1582:12:3"},"referencedDeclaration":606,"src":"1582:12:3","typeDescriptions":{"typeIdentifier":"t_enum$_DataLocation_$606","typeString":"enum DataLocation"}},"visibility":"internal"},{"constant":false,"id":586,"mutability":"mutable","name":"revoked","nameLocation":"1618:7:3","nodeType":"VariableDeclaration","scope":592,"src":"1613:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":585,"name":"bool","nodeType":"ElementaryTypeName","src":"1613:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":589,"mutability":"mutable","name":"recipients","nameLocation":"1639:10:3","nodeType":"VariableDeclaration","scope":592,"src":"1631:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":587,"name":"bytes","nodeType":"ElementaryTypeName","src":"1631:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":588,"nodeType":"ArrayTypeName","src":"1631:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":591,"mutability":"mutable","name":"data","nameLocation":"1661:4:3","nodeType":"VariableDeclaration","scope":592,"src":"1655:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":590,"name":"bytes","nodeType":"ElementaryTypeName","src":"1655:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"Attestation","nameLocation":"1410:11:3","nodeType":"StructDefinition","scope":599,"src":"1403:265:3","visibility":"public"},{"canonicalName":"OffchainAttestation","documentation":{"id":593,"nodeType":"StructuredDocumentation","src":"1670:339:3","text":" @title OffchainAttestation\n @author Jack Xu @ EthSign\n @notice This struct represents an off-chain attestation record. This record is not deleted after revocation.\n `attester`: The attester. At this time, the attester must be the caller of `attestOffchain()`.\n `timestamp`: The `block.timestamp` of the function call."},"id":598,"members":[{"constant":false,"id":595,"mutability":"mutable","name":"attester","nameLocation":"2051:8:3","nodeType":"VariableDeclaration","scope":598,"src":"2043:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":594,"name":"address","nodeType":"ElementaryTypeName","src":"2043:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":597,"mutability":"mutable","name":"timestamp","nameLocation":"2072:9:3","nodeType":"VariableDeclaration","scope":598,"src":"2065:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":596,"name":"uint64","nodeType":"ElementaryTypeName","src":"2065:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"name":"OffchainAttestation","nameLocation":"2017:19:3","nodeType":"StructDefinition","scope":599,"src":"2010:74:3","visibility":"public"}],"src":"32:2053:3"},"id":3},"@ethsign/sign-protocol-evm/src/models/DataLocation.sol":{"ast":{"absolutePath":"@ethsign/sign-protocol-evm/src/models/DataLocation.sol","exportedSymbols":{"DataLocation":[606]},"id":607,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":600,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:4"},{"canonicalName":"DataLocation","documentation":{"id":601,"nodeType":"StructuredDocumentation","src":"58:145:4","text":" @title DataLocation\n @author Jack Xu @ EthSign\n @notice This enum indicates where `Schema.data` and `Attestation.data` are stored."},"id":606,"members":[{"id":602,"name":"ONCHAIN","nameLocation":"228:7:4","nodeType":"EnumValue","src":"228:7:4"},{"id":603,"name":"ARWEAVE","nameLocation":"241:7:4","nodeType":"EnumValue","src":"241:7:4"},{"id":604,"name":"IPFS","nameLocation":"254:4:4","nodeType":"EnumValue","src":"254:4:4"},{"id":605,"name":"CUSTOM","nameLocation":"264:6:4","nodeType":"EnumValue","src":"264:6:4"}],"name":"DataLocation","nameLocation":"209:12:4","nodeType":"EnumDefinition","src":"204:68:4"}],"src":"32:241:4"},"id":4},"@ethsign/sign-protocol-evm/src/models/Schema.sol":{"ast":{"absolutePath":"@ethsign/sign-protocol-evm/src/models/Schema.sol","exportedSymbols":{"DataLocation":[606],"ISPHook":[555],"Schema":[630]},"id":631,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":608,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:5"},{"absolutePath":"@ethsign/sign-protocol-evm/src/interfaces/ISPHook.sol","file":"../interfaces/ISPHook.sol","id":610,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":631,"sourceUnit":556,"src":"58:52:5","symbolAliases":[{"foreign":{"id":609,"name":"ISPHook","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"67:7:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@ethsign/sign-protocol-evm/src/models/DataLocation.sol","file":"./DataLocation.sol","id":612,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":631,"sourceUnit":607,"src":"111:50:5","symbolAliases":[{"foreign":{"id":611,"name":"DataLocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"120:12:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"Schema","documentation":{"id":613,"nodeType":"StructuredDocumentation","src":"163:908:5","text":" @title Schema\n @author Jack Xu @ EthSign\n @notice This struct represents an on-chain Schema that Attestations can conform to.\n `registrant`: The address that registered this schema.\n `revocable`: Whether Attestations that adopt this Schema can be revoked.\n `dataLocation`: Where `Schema.data` is stored. See `DataLocation.DataLocation`.\n `maxValidFor`: The maximum number of seconds that an Attestation can remain valid. 0 means Attestations can be valid\n forever. This is enforced through `Attestation.validUntil`.\n `hook`: The `ISPHook` that is called at the end of every function. 0 means there is no hook set. See\n `ISPHook`.\n `timestamp`: When the schema was registered. This is automatically populated by `_register(...)`.\n `data`: The raw schema that `Attestation.data` should follow. Since there is no way to enforce this, it is a `string`\n for easy readability."},"id":630,"members":[{"constant":false,"id":615,"mutability":"mutable","name":"registrant","nameLocation":"1100:10:5","nodeType":"VariableDeclaration","scope":630,"src":"1092:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":614,"name":"address","nodeType":"ElementaryTypeName","src":"1092:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":617,"mutability":"mutable","name":"revocable","nameLocation":"1121:9:5","nodeType":"VariableDeclaration","scope":630,"src":"1116:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":616,"name":"bool","nodeType":"ElementaryTypeName","src":"1116:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":620,"mutability":"mutable","name":"dataLocation","nameLocation":"1149:12:5","nodeType":"VariableDeclaration","scope":630,"src":"1136:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_DataLocation_$606","typeString":"enum DataLocation"},"typeName":{"id":619,"nodeType":"UserDefinedTypeName","pathNode":{"id":618,"name":"DataLocation","nameLocations":["1136:12:5"],"nodeType":"IdentifierPath","referencedDeclaration":606,"src":"1136:12:5"},"referencedDeclaration":606,"src":"1136:12:5","typeDescriptions":{"typeIdentifier":"t_enum$_DataLocation_$606","typeString":"enum DataLocation"}},"visibility":"internal"},{"constant":false,"id":622,"mutability":"mutable","name":"maxValidFor","nameLocation":"1174:11:5","nodeType":"VariableDeclaration","scope":630,"src":"1167:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":621,"name":"uint64","nodeType":"ElementaryTypeName","src":"1167:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":625,"mutability":"mutable","name":"hook","nameLocation":"1199:4:5","nodeType":"VariableDeclaration","scope":630,"src":"1191:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISPHook_$555","typeString":"contract ISPHook"},"typeName":{"id":624,"nodeType":"UserDefinedTypeName","pathNode":{"id":623,"name":"ISPHook","nameLocations":["1191:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":555,"src":"1191:7:5"},"referencedDeclaration":555,"src":"1191:7:5","typeDescriptions":{"typeIdentifier":"t_contract$_ISPHook_$555","typeString":"contract ISPHook"}},"visibility":"internal"},{"constant":false,"id":627,"mutability":"mutable","name":"timestamp","nameLocation":"1216:9:5","nodeType":"VariableDeclaration","scope":630,"src":"1209:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":626,"name":"uint64","nodeType":"ElementaryTypeName","src":"1209:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":629,"mutability":"mutable","name":"data","nameLocation":"1238:4:5","nodeType":"VariableDeclaration","scope":630,"src":"1231:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":628,"name":"string","nodeType":"ElementaryTypeName","src":"1231:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"Schema","nameLocation":"1079:6:5","nodeType":"StructDefinition","scope":631,"src":"1072:173:5","visibility":"public"}],"src":"32:1214:5"},"id":5},"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[2557],"Ownable":[778]},"id":779,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":632,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:6"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":634,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":779,"sourceUnit":2558,"src":"128:45:6","symbolAliases":[{"foreign":{"id":633,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2557,"src":"136:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":636,"name":"Context","nameLocations":["692:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":2557,"src":"692:7:6"},"id":637,"nodeType":"InheritanceSpecifier","src":"692:7:6"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":635,"nodeType":"StructuredDocumentation","src":"175:487:6","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":778,"linearizedBaseContracts":[778,2557],"name":"Ownable","nameLocation":"681:7:6","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":639,"mutability":"mutable","name":"_owner","nameLocation":"722:6:6","nodeType":"VariableDeclaration","scope":778,"src":"706:22:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":638,"name":"address","nodeType":"ElementaryTypeName","src":"706:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"documentation":{"id":640,"nodeType":"StructuredDocumentation","src":"735:85:6","text":" @dev The caller account is not authorized to perform an operation."},"errorSelector":"118cdaa7","id":644,"name":"OwnableUnauthorizedAccount","nameLocation":"831:26:6","nodeType":"ErrorDefinition","parameters":{"id":643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":642,"mutability":"mutable","name":"account","nameLocation":"866:7:6","nodeType":"VariableDeclaration","scope":644,"src":"858:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":641,"name":"address","nodeType":"ElementaryTypeName","src":"858:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"857:17:6"},"src":"825:50:6"},{"documentation":{"id":645,"nodeType":"StructuredDocumentation","src":"881:82:6","text":" @dev The owner is not a valid owner account. (eg. `address(0)`)"},"errorSelector":"1e4fbdf7","id":649,"name":"OwnableInvalidOwner","nameLocation":"974:19:6","nodeType":"ErrorDefinition","parameters":{"id":648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":647,"mutability":"mutable","name":"owner","nameLocation":"1002:5:6","nodeType":"VariableDeclaration","scope":649,"src":"994:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":646,"name":"address","nodeType":"ElementaryTypeName","src":"994:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"993:15:6"},"src":"968:41:6"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":655,"name":"OwnershipTransferred","nameLocation":"1021:20:6","nodeType":"EventDefinition","parameters":{"id":654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":651,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1058:13:6","nodeType":"VariableDeclaration","scope":655,"src":"1042:29:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":650,"name":"address","nodeType":"ElementaryTypeName","src":"1042:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":653,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1089:8:6","nodeType":"VariableDeclaration","scope":655,"src":"1073:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":652,"name":"address","nodeType":"ElementaryTypeName","src":"1073:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1041:57:6"},"src":"1015:84:6"},{"body":{"id":680,"nodeType":"Block","src":"1259:153:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":661,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":658,"src":"1273:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1297:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":663,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1289:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":662,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:6","typeDescriptions":{}}},"id":665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1289:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1273:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":675,"nodeType":"IfStatement","src":"1269:95:6","trueBody":{"id":674,"nodeType":"Block","src":"1301:63:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1350:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":669,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1342:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":668,"name":"address","nodeType":"ElementaryTypeName","src":"1342:7:6","typeDescriptions":{}}},"id":671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":667,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"1322:19:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":673,"nodeType":"RevertStatement","src":"1315:38:6"}]}},{"expression":{"arguments":[{"id":677,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":658,"src":"1392:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":676,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"1373:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1373:32:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":679,"nodeType":"ExpressionStatement","src":"1373:32:6"}]},"documentation":{"id":656,"nodeType":"StructuredDocumentation","src":"1105:115:6","text":" @dev Initializes the contract setting the address provided by the deployer as the initial owner."},"id":681,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":658,"mutability":"mutable","name":"initialOwner","nameLocation":"1245:12:6","nodeType":"VariableDeclaration","scope":681,"src":"1237:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":657,"name":"address","nodeType":"ElementaryTypeName","src":"1237:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1236:22:6"},"returnParameters":{"id":660,"nodeType":"ParameterList","parameters":[],"src":"1259:0:6"},"scope":778,"src":"1225:187:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":688,"nodeType":"Block","src":"1521:41:6","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":684,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"1531:11:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1531:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":686,"nodeType":"ExpressionStatement","src":"1531:13:6"},{"id":687,"nodeType":"PlaceholderStatement","src":"1554:1:6"}]},"documentation":{"id":682,"nodeType":"StructuredDocumentation","src":"1418:77:6","text":" @dev Throws if called by any account other than the owner."},"id":689,"name":"onlyOwner","nameLocation":"1509:9:6","nodeType":"ModifierDefinition","parameters":{"id":683,"nodeType":"ParameterList","parameters":[],"src":"1518:2:6"},"src":"1500:62:6","virtual":false,"visibility":"internal"},{"body":{"id":697,"nodeType":"Block","src":"1693:30:6","statements":[{"expression":{"id":695,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"1710:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":694,"id":696,"nodeType":"Return","src":"1703:13:6"}]},"documentation":{"id":690,"nodeType":"StructuredDocumentation","src":"1568:65:6","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":698,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1647:5:6","nodeType":"FunctionDefinition","parameters":{"id":691,"nodeType":"ParameterList","parameters":[],"src":"1652:2:6"},"returnParameters":{"id":694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":693,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":698,"src":"1684:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":692,"name":"address","nodeType":"ElementaryTypeName","src":"1684:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1683:9:6"},"scope":778,"src":"1638:85:6","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":714,"nodeType":"Block","src":"1841:117:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":702,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"1855:5:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1855:7:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":704,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"1866:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1866:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1855:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":713,"nodeType":"IfStatement","src":"1851:101:6","trueBody":{"id":712,"nodeType":"Block","src":"1880:72:6","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":708,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"1928:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1928:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":707,"name":"OwnableUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"1901:26:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:40:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":711,"nodeType":"RevertStatement","src":"1894:47:6"}]}}]},"documentation":{"id":699,"nodeType":"StructuredDocumentation","src":"1729:62:6","text":" @dev Throws if the sender is not the owner."},"id":715,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1805:11:6","nodeType":"FunctionDefinition","parameters":{"id":700,"nodeType":"ParameterList","parameters":[],"src":"1816:2:6"},"returnParameters":{"id":701,"nodeType":"ParameterList","parameters":[],"src":"1841:0:6"},"scope":778,"src":"1796:162:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":728,"nodeType":"Block","src":"2347:47:6","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2384:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":723,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2376:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":722,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:6","typeDescriptions":{}}},"id":725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2376:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":721,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"2357:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2357:30:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":727,"nodeType":"ExpressionStatement","src":"2357:30:6"}]},"documentation":{"id":716,"nodeType":"StructuredDocumentation","src":"1964:324:6","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":729,"implemented":true,"kind":"function","modifiers":[{"id":719,"kind":"modifierInvocation","modifierName":{"id":718,"name":"onlyOwner","nameLocations":["2337:9:6"],"nodeType":"IdentifierPath","referencedDeclaration":689,"src":"2337:9:6"},"nodeType":"ModifierInvocation","src":"2337:9:6"}],"name":"renounceOwnership","nameLocation":"2302:17:6","nodeType":"FunctionDefinition","parameters":{"id":717,"nodeType":"ParameterList","parameters":[],"src":"2319:2:6"},"returnParameters":{"id":720,"nodeType":"ParameterList","parameters":[],"src":"2347:0:6"},"scope":778,"src":"2293:101:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":756,"nodeType":"Block","src":"2613:145:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":737,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":732,"src":"2627:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2647:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":739,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2639:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":738,"name":"address","nodeType":"ElementaryTypeName","src":"2639:7:6","typeDescriptions":{}}},"id":741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2627:22:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":751,"nodeType":"IfStatement","src":"2623:91:6","trueBody":{"id":750,"nodeType":"Block","src":"2651:63:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2700:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":745,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2692:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":744,"name":"address","nodeType":"ElementaryTypeName","src":"2692:7:6","typeDescriptions":{}}},"id":747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2692:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":743,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"2672:19:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2672:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":749,"nodeType":"RevertStatement","src":"2665:38:6"}]}},{"expression":{"arguments":[{"id":753,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":732,"src":"2742:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":752,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"2723:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2723:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":755,"nodeType":"ExpressionStatement","src":"2723:28:6"}]},"documentation":{"id":730,"nodeType":"StructuredDocumentation","src":"2400:138:6","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":757,"implemented":true,"kind":"function","modifiers":[{"id":735,"kind":"modifierInvocation","modifierName":{"id":734,"name":"onlyOwner","nameLocations":["2603:9:6"],"nodeType":"IdentifierPath","referencedDeclaration":689,"src":"2603:9:6"},"nodeType":"ModifierInvocation","src":"2603:9:6"}],"name":"transferOwnership","nameLocation":"2552:17:6","nodeType":"FunctionDefinition","parameters":{"id":733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":732,"mutability":"mutable","name":"newOwner","nameLocation":"2578:8:6","nodeType":"VariableDeclaration","scope":757,"src":"2570:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":731,"name":"address","nodeType":"ElementaryTypeName","src":"2570:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2569:18:6"},"returnParameters":{"id":736,"nodeType":"ParameterList","parameters":[],"src":"2613:0:6"},"scope":778,"src":"2543:215:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":776,"nodeType":"Block","src":"2975:124:6","statements":[{"assignments":[764],"declarations":[{"constant":false,"id":764,"mutability":"mutable","name":"oldOwner","nameLocation":"2993:8:6","nodeType":"VariableDeclaration","scope":776,"src":"2985:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":763,"name":"address","nodeType":"ElementaryTypeName","src":"2985:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":766,"initialValue":{"id":765,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"3004:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2985:25:6"},{"expression":{"id":769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":767,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"3020:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":768,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"3029:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3020:17:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":770,"nodeType":"ExpressionStatement","src":"3020:17:6"},{"eventCall":{"arguments":[{"id":772,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"3073:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":773,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"3083:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":771,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":655,"src":"3052:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:40:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":775,"nodeType":"EmitStatement","src":"3047:45:6"}]},"documentation":{"id":758,"nodeType":"StructuredDocumentation","src":"2764:143:6","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":777,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2921:18:6","nodeType":"FunctionDefinition","parameters":{"id":761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":760,"mutability":"mutable","name":"newOwner","nameLocation":"2948:8:6","nodeType":"VariableDeclaration","scope":777,"src":"2940:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":759,"name":"address","nodeType":"ElementaryTypeName","src":"2940:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2939:18:6"},"returnParameters":{"id":762,"nodeType":"ParameterList","parameters":[],"src":"2975:0:6"},"scope":778,"src":"2912:187:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":779,"src":"663:2438:6","usedErrors":[644,649],"usedEvents":[655]}],"src":"102:3000:6"},"id":6},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","exportedSymbols":{"IERC1155Errors":[915],"IERC20Errors":[820],"IERC721Errors":[868]},"id":916,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":780,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"112:24:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":781,"nodeType":"StructuredDocumentation","src":"138:139:7","text":" @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."},"fullyImplemented":true,"id":820,"linearizedBaseContracts":[820],"name":"IERC20Errors","nameLocation":"288:12:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":782,"nodeType":"StructuredDocumentation","src":"307:309:7","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"e450d38c","id":790,"name":"ERC20InsufficientBalance","nameLocation":"627:24:7","nodeType":"ErrorDefinition","parameters":{"id":789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":784,"mutability":"mutable","name":"sender","nameLocation":"660:6:7","nodeType":"VariableDeclaration","scope":790,"src":"652:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":783,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":786,"mutability":"mutable","name":"balance","nameLocation":"676:7:7","nodeType":"VariableDeclaration","scope":790,"src":"668:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":785,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":788,"mutability":"mutable","name":"needed","nameLocation":"693:6:7","nodeType":"VariableDeclaration","scope":790,"src":"685:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":787,"name":"uint256","nodeType":"ElementaryTypeName","src":"685:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"651:49:7"},"src":"621:80:7"},{"documentation":{"id":791,"nodeType":"StructuredDocumentation","src":"707:152:7","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"96c6fd1e","id":795,"name":"ERC20InvalidSender","nameLocation":"870:18:7","nodeType":"ErrorDefinition","parameters":{"id":794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":793,"mutability":"mutable","name":"sender","nameLocation":"897:6:7","nodeType":"VariableDeclaration","scope":795,"src":"889:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":792,"name":"address","nodeType":"ElementaryTypeName","src":"889:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"888:16:7"},"src":"864:41:7"},{"documentation":{"id":796,"nodeType":"StructuredDocumentation","src":"911:159:7","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"ec442f05","id":800,"name":"ERC20InvalidReceiver","nameLocation":"1081:20:7","nodeType":"ErrorDefinition","parameters":{"id":799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":798,"mutability":"mutable","name":"receiver","nameLocation":"1110:8:7","nodeType":"VariableDeclaration","scope":800,"src":"1102:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":797,"name":"address","nodeType":"ElementaryTypeName","src":"1102:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1101:18:7"},"src":"1075:45:7"},{"documentation":{"id":801,"nodeType":"StructuredDocumentation","src":"1126:345:7","text":" @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"fb8f41b2","id":809,"name":"ERC20InsufficientAllowance","nameLocation":"1482:26:7","nodeType":"ErrorDefinition","parameters":{"id":808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":803,"mutability":"mutable","name":"spender","nameLocation":"1517:7:7","nodeType":"VariableDeclaration","scope":809,"src":"1509:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":802,"name":"address","nodeType":"ElementaryTypeName","src":"1509:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":805,"mutability":"mutable","name":"allowance","nameLocation":"1534:9:7","nodeType":"VariableDeclaration","scope":809,"src":"1526:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":804,"name":"uint256","nodeType":"ElementaryTypeName","src":"1526:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":807,"mutability":"mutable","name":"needed","nameLocation":"1553:6:7","nodeType":"VariableDeclaration","scope":809,"src":"1545:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":806,"name":"uint256","nodeType":"ElementaryTypeName","src":"1545:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1508:52:7"},"src":"1476:85:7"},{"documentation":{"id":810,"nodeType":"StructuredDocumentation","src":"1567:174:7","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"e602df05","id":814,"name":"ERC20InvalidApprover","nameLocation":"1752:20:7","nodeType":"ErrorDefinition","parameters":{"id":813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":812,"mutability":"mutable","name":"approver","nameLocation":"1781:8:7","nodeType":"VariableDeclaration","scope":814,"src":"1773:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":811,"name":"address","nodeType":"ElementaryTypeName","src":"1773:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1772:18:7"},"src":"1746:45:7"},{"documentation":{"id":815,"nodeType":"StructuredDocumentation","src":"1797:195:7","text":" @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"94280d62","id":819,"name":"ERC20InvalidSpender","nameLocation":"2003:19:7","nodeType":"ErrorDefinition","parameters":{"id":818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":817,"mutability":"mutable","name":"spender","nameLocation":"2031:7:7","nodeType":"VariableDeclaration","scope":819,"src":"2023:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":816,"name":"address","nodeType":"ElementaryTypeName","src":"2023:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2022:17:7"},"src":"1997:43:7"}],"scope":916,"src":"278:1764:7","usedErrors":[790,795,800,809,814,819],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":821,"nodeType":"StructuredDocumentation","src":"2044:141:7","text":" @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."},"fullyImplemented":true,"id":868,"linearizedBaseContracts":[868],"name":"IERC721Errors","nameLocation":"2196:13:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":822,"nodeType":"StructuredDocumentation","src":"2216:219:7","text":" @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."},"errorSelector":"89c62b64","id":826,"name":"ERC721InvalidOwner","nameLocation":"2446:18:7","nodeType":"ErrorDefinition","parameters":{"id":825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":824,"mutability":"mutable","name":"owner","nameLocation":"2473:5:7","nodeType":"VariableDeclaration","scope":826,"src":"2465:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":823,"name":"address","nodeType":"ElementaryTypeName","src":"2465:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2464:15:7"},"src":"2440:40:7"},{"documentation":{"id":827,"nodeType":"StructuredDocumentation","src":"2486:132:7","text":" @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."},"errorSelector":"7e273289","id":831,"name":"ERC721NonexistentToken","nameLocation":"2629:22:7","nodeType":"ErrorDefinition","parameters":{"id":830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":829,"mutability":"mutable","name":"tokenId","nameLocation":"2660:7:7","nodeType":"VariableDeclaration","scope":831,"src":"2652:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":828,"name":"uint256","nodeType":"ElementaryTypeName","src":"2652:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2651:17:7"},"src":"2623:46:7"},{"documentation":{"id":832,"nodeType":"StructuredDocumentation","src":"2675:289:7","text":" @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."},"errorSelector":"64283d7b","id":840,"name":"ERC721IncorrectOwner","nameLocation":"2975:20:7","nodeType":"ErrorDefinition","parameters":{"id":839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":834,"mutability":"mutable","name":"sender","nameLocation":"3004:6:7","nodeType":"VariableDeclaration","scope":840,"src":"2996:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":833,"name":"address","nodeType":"ElementaryTypeName","src":"2996:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":836,"mutability":"mutable","name":"tokenId","nameLocation":"3020:7:7","nodeType":"VariableDeclaration","scope":840,"src":"3012:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":835,"name":"uint256","nodeType":"ElementaryTypeName","src":"3012:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":838,"mutability":"mutable","name":"owner","nameLocation":"3037:5:7","nodeType":"VariableDeclaration","scope":840,"src":"3029:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":837,"name":"address","nodeType":"ElementaryTypeName","src":"3029:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2995:48:7"},"src":"2969:75:7"},{"documentation":{"id":841,"nodeType":"StructuredDocumentation","src":"3050:152:7","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"73c6ac6e","id":845,"name":"ERC721InvalidSender","nameLocation":"3213:19:7","nodeType":"ErrorDefinition","parameters":{"id":844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":843,"mutability":"mutable","name":"sender","nameLocation":"3241:6:7","nodeType":"VariableDeclaration","scope":845,"src":"3233:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":842,"name":"address","nodeType":"ElementaryTypeName","src":"3233:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3232:16:7"},"src":"3207:42:7"},{"documentation":{"id":846,"nodeType":"StructuredDocumentation","src":"3255:159:7","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"64a0ae92","id":850,"name":"ERC721InvalidReceiver","nameLocation":"3425:21:7","nodeType":"ErrorDefinition","parameters":{"id":849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":848,"mutability":"mutable","name":"receiver","nameLocation":"3455:8:7","nodeType":"VariableDeclaration","scope":850,"src":"3447:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":847,"name":"address","nodeType":"ElementaryTypeName","src":"3447:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3446:18:7"},"src":"3419:46:7"},{"documentation":{"id":851,"nodeType":"StructuredDocumentation","src":"3471:247:7","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."},"errorSelector":"177e802f","id":857,"name":"ERC721InsufficientApproval","nameLocation":"3729:26:7","nodeType":"ErrorDefinition","parameters":{"id":856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":853,"mutability":"mutable","name":"operator","nameLocation":"3764:8:7","nodeType":"VariableDeclaration","scope":857,"src":"3756:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":852,"name":"address","nodeType":"ElementaryTypeName","src":"3756:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":855,"mutability":"mutable","name":"tokenId","nameLocation":"3782:7:7","nodeType":"VariableDeclaration","scope":857,"src":"3774:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":854,"name":"uint256","nodeType":"ElementaryTypeName","src":"3774:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3755:35:7"},"src":"3723:68:7"},{"documentation":{"id":858,"nodeType":"StructuredDocumentation","src":"3797:174:7","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"a9fbf51f","id":862,"name":"ERC721InvalidApprover","nameLocation":"3982:21:7","nodeType":"ErrorDefinition","parameters":{"id":861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":860,"mutability":"mutable","name":"approver","nameLocation":"4012:8:7","nodeType":"VariableDeclaration","scope":862,"src":"4004:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":859,"name":"address","nodeType":"ElementaryTypeName","src":"4004:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4003:18:7"},"src":"3976:46:7"},{"documentation":{"id":863,"nodeType":"StructuredDocumentation","src":"4028:197:7","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"5b08ba18","id":867,"name":"ERC721InvalidOperator","nameLocation":"4236:21:7","nodeType":"ErrorDefinition","parameters":{"id":866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":865,"mutability":"mutable","name":"operator","nameLocation":"4266:8:7","nodeType":"VariableDeclaration","scope":867,"src":"4258:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":864,"name":"address","nodeType":"ElementaryTypeName","src":"4258:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4257:18:7"},"src":"4230:46:7"}],"scope":916,"src":"2186:2092:7","usedErrors":[826,831,840,845,850,857,862,867],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":869,"nodeType":"StructuredDocumentation","src":"4280:143:7","text":" @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."},"fullyImplemented":true,"id":915,"linearizedBaseContracts":[915],"name":"IERC1155Errors","nameLocation":"4434:14:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":870,"nodeType":"StructuredDocumentation","src":"4455:361:7","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."},"errorSelector":"03dee4c5","id":880,"name":"ERC1155InsufficientBalance","nameLocation":"4827:26:7","nodeType":"ErrorDefinition","parameters":{"id":879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":872,"mutability":"mutable","name":"sender","nameLocation":"4862:6:7","nodeType":"VariableDeclaration","scope":880,"src":"4854:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":871,"name":"address","nodeType":"ElementaryTypeName","src":"4854:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":874,"mutability":"mutable","name":"balance","nameLocation":"4878:7:7","nodeType":"VariableDeclaration","scope":880,"src":"4870:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":873,"name":"uint256","nodeType":"ElementaryTypeName","src":"4870:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":876,"mutability":"mutable","name":"needed","nameLocation":"4895:6:7","nodeType":"VariableDeclaration","scope":880,"src":"4887:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":875,"name":"uint256","nodeType":"ElementaryTypeName","src":"4887:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":878,"mutability":"mutable","name":"tokenId","nameLocation":"4911:7:7","nodeType":"VariableDeclaration","scope":880,"src":"4903:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":877,"name":"uint256","nodeType":"ElementaryTypeName","src":"4903:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4853:66:7"},"src":"4821:99:7"},{"documentation":{"id":881,"nodeType":"StructuredDocumentation","src":"4926:152:7","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"01a83514","id":885,"name":"ERC1155InvalidSender","nameLocation":"5089:20:7","nodeType":"ErrorDefinition","parameters":{"id":884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":883,"mutability":"mutable","name":"sender","nameLocation":"5118:6:7","nodeType":"VariableDeclaration","scope":885,"src":"5110:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":882,"name":"address","nodeType":"ElementaryTypeName","src":"5110:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5109:16:7"},"src":"5083:43:7"},{"documentation":{"id":886,"nodeType":"StructuredDocumentation","src":"5132:159:7","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"57f447ce","id":890,"name":"ERC1155InvalidReceiver","nameLocation":"5302:22:7","nodeType":"ErrorDefinition","parameters":{"id":889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":888,"mutability":"mutable","name":"receiver","nameLocation":"5333:8:7","nodeType":"VariableDeclaration","scope":890,"src":"5325:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":887,"name":"address","nodeType":"ElementaryTypeName","src":"5325:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5324:18:7"},"src":"5296:47:7"},{"documentation":{"id":891,"nodeType":"StructuredDocumentation","src":"5349:256:7","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."},"errorSelector":"e237d922","id":897,"name":"ERC1155MissingApprovalForAll","nameLocation":"5616:28:7","nodeType":"ErrorDefinition","parameters":{"id":896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":893,"mutability":"mutable","name":"operator","nameLocation":"5653:8:7","nodeType":"VariableDeclaration","scope":897,"src":"5645:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":892,"name":"address","nodeType":"ElementaryTypeName","src":"5645:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":895,"mutability":"mutable","name":"owner","nameLocation":"5671:5:7","nodeType":"VariableDeclaration","scope":897,"src":"5663:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":894,"name":"address","nodeType":"ElementaryTypeName","src":"5663:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5644:33:7"},"src":"5610:68:7"},{"documentation":{"id":898,"nodeType":"StructuredDocumentation","src":"5684:174:7","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"3e31884e","id":902,"name":"ERC1155InvalidApprover","nameLocation":"5869:22:7","nodeType":"ErrorDefinition","parameters":{"id":901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":900,"mutability":"mutable","name":"approver","nameLocation":"5900:8:7","nodeType":"VariableDeclaration","scope":902,"src":"5892:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":899,"name":"address","nodeType":"ElementaryTypeName","src":"5892:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5891:18:7"},"src":"5863:47:7"},{"documentation":{"id":903,"nodeType":"StructuredDocumentation","src":"5916:197:7","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"ced3e100","id":907,"name":"ERC1155InvalidOperator","nameLocation":"6124:22:7","nodeType":"ErrorDefinition","parameters":{"id":906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":905,"mutability":"mutable","name":"operator","nameLocation":"6155:8:7","nodeType":"VariableDeclaration","scope":907,"src":"6147:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":904,"name":"address","nodeType":"ElementaryTypeName","src":"6147:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6146:18:7"},"src":"6118:47:7"},{"documentation":{"id":908,"nodeType":"StructuredDocumentation","src":"6171:280:7","text":" @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"},"errorSelector":"5b059991","id":914,"name":"ERC1155InvalidArrayLength","nameLocation":"6462:25:7","nodeType":"ErrorDefinition","parameters":{"id":913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":910,"mutability":"mutable","name":"idsLength","nameLocation":"6496:9:7","nodeType":"VariableDeclaration","scope":914,"src":"6488:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":909,"name":"uint256","nodeType":"ElementaryTypeName","src":"6488:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":912,"mutability":"mutable","name":"valuesLength","nameLocation":"6515:12:7","nodeType":"VariableDeclaration","scope":914,"src":"6507:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":911,"name":"uint256","nodeType":"ElementaryTypeName","src":"6507:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6487:41:7"},"src":"6456:73:7"}],"scope":916,"src":"4424:2107:7","usedErrors":[880,885,890,897,902,907,914],"usedEvents":[]}],"src":"112:6420:7"},"id":7},"@openzeppelin/contracts/token/ERC1155/ERC1155.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol","exportedSymbols":{"Arrays":[2527],"Context":[2557],"ERC1155":[1966],"ERC165":[2808],"IERC1155":[2089],"IERC1155Errors":[915],"IERC1155MetadataURI":[2266],"IERC1155Receiver":[2131],"IERC165":[2820]},"id":1967,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":917,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:8"},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","file":"./IERC1155.sol","id":919,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1967,"sourceUnit":2090,"src":"135:40:8","symbolAliases":[{"foreign":{"id":918,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"143:8:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol","file":"./IERC1155Receiver.sol","id":921,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1967,"sourceUnit":2132,"src":"176:56:8","symbolAliases":[{"foreign":{"id":920,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"184:16:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol","file":"./extensions/IERC1155MetadataURI.sol","id":923,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1967,"sourceUnit":2267,"src":"233:73:8","symbolAliases":[{"foreign":{"id":922,"name":"IERC1155MetadataURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2266,"src":"241:19:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":925,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1967,"sourceUnit":2558,"src":"307:48:8","symbolAliases":[{"foreign":{"id":924,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2557,"src":"315:7:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":928,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1967,"sourceUnit":2809,"src":"356:69:8","symbolAliases":[{"foreign":{"id":926,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"364:7:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":927,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"373:6:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Arrays.sol","file":"../../utils/Arrays.sol","id":930,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1967,"sourceUnit":2528,"src":"426:46:8","symbolAliases":[{"foreign":{"id":929,"name":"Arrays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"434:6:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","file":"../../interfaces/draft-IERC6093.sol","id":932,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1967,"sourceUnit":916,"src":"473:67:8","symbolAliases":[{"foreign":{"id":931,"name":"IERC1155Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":915,"src":"481:14:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":934,"name":"Context","nameLocations":["756:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":2557,"src":"756:7:8"},"id":935,"nodeType":"InheritanceSpecifier","src":"756:7:8"},{"baseName":{"id":936,"name":"ERC165","nameLocations":["765:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":2808,"src":"765:6:8"},"id":937,"nodeType":"InheritanceSpecifier","src":"765:6:8"},{"baseName":{"id":938,"name":"IERC1155","nameLocations":["773:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":2089,"src":"773:8:8"},"id":939,"nodeType":"InheritanceSpecifier","src":"773:8:8"},{"baseName":{"id":940,"name":"IERC1155MetadataURI","nameLocations":["783:19:8"],"nodeType":"IdentifierPath","referencedDeclaration":2266,"src":"783:19:8"},"id":941,"nodeType":"InheritanceSpecifier","src":"783:19:8"},{"baseName":{"id":942,"name":"IERC1155Errors","nameLocations":["804:14:8"],"nodeType":"IdentifierPath","referencedDeclaration":915,"src":"804:14:8"},"id":943,"nodeType":"InheritanceSpecifier","src":"804:14:8"}],"canonicalName":"ERC1155","contractDependencies":[],"contractKind":"contract","documentation":{"id":933,"nodeType":"StructuredDocumentation","src":"542:184:8","text":" @dev Implementation of the basic standard multi-token.\n See https://eips.ethereum.org/EIPS/eip-1155\n Originally based on code by Enjin: https://github.com/enjin/erc-1155"},"fullyImplemented":true,"id":1966,"linearizedBaseContracts":[1966,915,2266,2089,2808,2820,2557],"name":"ERC1155","nameLocation":"745:7:8","nodeType":"ContractDefinition","nodes":[{"global":false,"id":947,"libraryName":{"id":944,"name":"Arrays","nameLocations":["831:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":2527,"src":"831:6:8"},"nodeType":"UsingForDirective","src":"825:27:8","typeName":{"baseType":{"id":945,"name":"uint256","nodeType":"ElementaryTypeName","src":"842:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":946,"nodeType":"ArrayTypeName","src":"842:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},{"global":false,"id":951,"libraryName":{"id":948,"name":"Arrays","nameLocations":["863:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":2527,"src":"863:6:8"},"nodeType":"UsingForDirective","src":"857:27:8","typeName":{"baseType":{"id":949,"name":"address","nodeType":"ElementaryTypeName","src":"874:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":950,"nodeType":"ArrayTypeName","src":"874:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},{"constant":false,"id":957,"mutability":"mutable","name":"_balances","nameLocation":"957:9:8","nodeType":"VariableDeclaration","scope":1966,"src":"890:76:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"typeName":{"id":956,"keyName":"id","keyNameLocation":"906:2:8","keyType":{"id":952,"name":"uint256","nodeType":"ElementaryTypeName","src":"898:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"890:58:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":955,"keyName":"account","keyNameLocation":"928:7:8","keyType":{"id":953,"name":"address","nodeType":"ElementaryTypeName","src":"920:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"912:35:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":954,"name":"uint256","nodeType":"ElementaryTypeName","src":"939:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":963,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1043:18:8","nodeType":"VariableDeclaration","scope":1966,"src":"973:88:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":962,"keyName":"account","keyNameLocation":"989:7:8","keyType":{"id":958,"name":"address","nodeType":"ElementaryTypeName","src":"981:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"973:61:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":961,"keyName":"operator","keyNameLocation":"1016:8:8","keyType":{"id":959,"name":"address","nodeType":"ElementaryTypeName","src":"1008:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1000:33:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":960,"name":"bool","nodeType":"ElementaryTypeName","src":"1028:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"constant":false,"id":965,"mutability":"mutable","name":"_uri","nameLocation":"1197:4:8","nodeType":"VariableDeclaration","scope":1966,"src":"1182:19:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":964,"name":"string","nodeType":"ElementaryTypeName","src":"1182:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":975,"nodeType":"Block","src":"1283:30:8","statements":[{"expression":{"arguments":[{"id":972,"name":"uri_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":968,"src":"1301:4:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":971,"name":"_setURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1589,"src":"1293:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1293:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":974,"nodeType":"ExpressionStatement","src":"1293:13:8"}]},"documentation":{"id":966,"nodeType":"StructuredDocumentation","src":"1208:38:8","text":" @dev See {_setURI}."},"id":976,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":968,"mutability":"mutable","name":"uri_","nameLocation":"1277:4:8","nodeType":"VariableDeclaration","scope":976,"src":"1263:18:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":967,"name":"string","nodeType":"ElementaryTypeName","src":"1263:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1262:20:8"},"returnParameters":{"id":970,"nodeType":"ParameterList","parameters":[],"src":"1283:0:8"},"scope":1966,"src":"1251:62:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2807,2819],"body":{"id":1006,"nodeType":"Block","src":"1488:197:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":987,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"1517:11:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":989,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"1537:8:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155_$2089_$","typeString":"type(contract IERC1155)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155_$2089_$","typeString":"type(contract IERC1155)"}],"id":988,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1532:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1532:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155_$2089","typeString":"type(contract IERC1155)"}},"id":991,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1547:11:8","memberName":"interfaceId","nodeType":"MemberAccess","src":"1532:26:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1517:41:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":993,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"1574:11:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":995,"name":"IERC1155MetadataURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2266,"src":"1594:19:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155MetadataURI_$2266_$","typeString":"type(contract IERC1155MetadataURI)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155MetadataURI_$2266_$","typeString":"type(contract IERC1155MetadataURI)"}],"id":994,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1589:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":996,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1589:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155MetadataURI_$2266","typeString":"type(contract IERC1155MetadataURI)"}},"id":997,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1615:11:8","memberName":"interfaceId","nodeType":"MemberAccess","src":"1589:37:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1574:52:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1517:109:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1002,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"1666:11:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":1000,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1642:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC1155_$1966_$","typeString":"type(contract super ERC1155)"}},"id":1001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1648:17:8","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2807,"src":"1642:23:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1642:36:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1517:161:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":986,"id":1005,"nodeType":"Return","src":"1498:180:8"}]},"documentation":{"id":977,"nodeType":"StructuredDocumentation","src":"1319:56:8","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1007,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1389:17:8","nodeType":"FunctionDefinition","overrides":{"id":983,"nodeType":"OverrideSpecifier","overrides":[{"id":981,"name":"ERC165","nameLocations":["1456:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":2808,"src":"1456:6:8"},{"id":982,"name":"IERC165","nameLocations":["1464:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":2820,"src":"1464:7:8"}],"src":"1447:25:8"},"parameters":{"id":980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":979,"mutability":"mutable","name":"interfaceId","nameLocation":"1414:11:8","nodeType":"VariableDeclaration","scope":1007,"src":"1407:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":978,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1407:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1406:20:8"},"returnParameters":{"id":986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":985,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1007,"src":"1482:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":984,"name":"bool","nodeType":"ElementaryTypeName","src":"1482:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1481:6:8"},"scope":1966,"src":"1380:305:8","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2265],"body":{"id":1017,"nodeType":"Block","src":"2159:28:8","statements":[{"expression":{"id":1015,"name":"_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":965,"src":"2176:4:8","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1014,"id":1016,"nodeType":"Return","src":"2169:11:8"}]},"documentation":{"id":1008,"nodeType":"StructuredDocumentation","src":"1691:388:8","text":" @dev See {IERC1155MetadataURI-uri}.\n This implementation returns the same URI for *all* token types. It relies\n on the token type ID substitution mechanism\n https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n Clients calling this function must replace the `\\{id\\}` substring with the\n actual token type ID."},"functionSelector":"0e89341c","id":1018,"implemented":true,"kind":"function","modifiers":[],"name":"uri","nameLocation":"2093:3:8","nodeType":"FunctionDefinition","parameters":{"id":1011,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1010,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1018,"src":"2097:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1009,"name":"uint256","nodeType":"ElementaryTypeName","src":"2097:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2096:18:8"},"returnParameters":{"id":1014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1013,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1018,"src":"2144:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1012,"name":"string","nodeType":"ElementaryTypeName","src":"2144:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2143:15:8"},"scope":1966,"src":"2084:103:8","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2027],"body":{"id":1034,"nodeType":"Block","src":"2333:46:8","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":1028,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"2350:9:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1030,"indexExpression":{"id":1029,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"2360:2:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2350:13:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1032,"indexExpression":{"id":1031,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1021,"src":"2364:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2350:22:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1027,"id":1033,"nodeType":"Return","src":"2343:29:8"}]},"documentation":{"id":1019,"nodeType":"StructuredDocumentation","src":"2193:49:8","text":" @dev See {IERC1155-balanceOf}."},"functionSelector":"00fdd58e","id":1035,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2256:9:8","nodeType":"FunctionDefinition","parameters":{"id":1024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1021,"mutability":"mutable","name":"account","nameLocation":"2274:7:8","nodeType":"VariableDeclaration","scope":1035,"src":"2266:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1020,"name":"address","nodeType":"ElementaryTypeName","src":"2266:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1023,"mutability":"mutable","name":"id","nameLocation":"2291:2:8","nodeType":"VariableDeclaration","scope":1035,"src":"2283:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1022,"name":"uint256","nodeType":"ElementaryTypeName","src":"2283:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2265:29:8"},"returnParameters":{"id":1027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1026,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1035,"src":"2324:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1025,"name":"uint256","nodeType":"ElementaryTypeName","src":"2324:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2323:9:8"},"scope":1966,"src":"2247:132:8","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2040],"body":{"id":1104,"nodeType":"Block","src":"2678:410:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1048,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"2692:8:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":1049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2701:6:8","memberName":"length","nodeType":"MemberAccess","src":"2692:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1050,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"2711:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2715:6:8","memberName":"length","nodeType":"MemberAccess","src":"2711:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2692:29:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1061,"nodeType":"IfStatement","src":"2688:121:8","trueBody":{"id":1060,"nodeType":"Block","src":"2723:86:8","statements":[{"errorCall":{"arguments":[{"expression":{"id":1054,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"2770:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2774:6:8","memberName":"length","nodeType":"MemberAccess","src":"2770:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1056,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"2782:8:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":1057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2791:6:8","memberName":"length","nodeType":"MemberAccess","src":"2782:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1053,"name":"ERC1155InvalidArrayLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":914,"src":"2744:25:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2744:54:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1059,"nodeType":"RevertStatement","src":"2737:61:8"}]}},{"assignments":[1066],"declarations":[{"constant":false,"id":1066,"mutability":"mutable","name":"batchBalances","nameLocation":"2836:13:8","nodeType":"VariableDeclaration","scope":1104,"src":"2819:30:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1064,"name":"uint256","nodeType":"ElementaryTypeName","src":"2819:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1065,"nodeType":"ArrayTypeName","src":"2819:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1073,"initialValue":{"arguments":[{"expression":{"id":1070,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"2866:8:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2875:6:8","memberName":"length","nodeType":"MemberAccess","src":"2866:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1069,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2852:13:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":1067,"name":"uint256","nodeType":"ElementaryTypeName","src":"2856:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1068,"nodeType":"ArrayTypeName","src":"2856:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2852:30:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"2819:63:8"},{"body":{"id":1100,"nodeType":"Block","src":"2939:112:8","statements":[{"expression":{"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1085,"name":"batchBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"2953:13:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1087,"indexExpression":{"id":1086,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"2967:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2953:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":1091,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"3010:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1089,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"2982:8:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":1090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2991:18:8","memberName":"unsafeMemoryAccess","nodeType":"MemberAccess","referencedDeclaration":2526,"src":"2982:27:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_address_$dyn_memory_ptr_$_t_uint256_$returns$_t_address_$attached_to$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (address[] memory,uint256) pure returns (address)"}},"id":1092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2982:30:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":1095,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"3037:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1093,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"3014:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3018:18:8","memberName":"unsafeMemoryAccess","nodeType":"MemberAccess","referencedDeclaration":2513,"src":"3014:22:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$returns$_t_uint256_$attached_to$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256[] memory,uint256) pure returns (uint256)"}},"id":1096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3014:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1088,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"2972:9:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2972:68:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2953:87:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1099,"nodeType":"ExpressionStatement","src":"2953:87:8"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1078,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"2913:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1079,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"2917:8:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":1080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2926:6:8","memberName":"length","nodeType":"MemberAccess","src":"2917:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2913:19:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1101,"initializationExpression":{"assignments":[1075],"declarations":[{"constant":false,"id":1075,"mutability":"mutable","name":"i","nameLocation":"2906:1:8","nodeType":"VariableDeclaration","scope":1101,"src":"2898:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1074,"name":"uint256","nodeType":"ElementaryTypeName","src":"2898:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1077,"initialValue":{"hexValue":"30","id":1076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2910:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2898:13:8"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"2934:3:8","subExpression":{"id":1082,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"2936:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1084,"nodeType":"ExpressionStatement","src":"2934:3:8"},"nodeType":"ForStatement","src":"2893:158:8"},{"expression":{"id":1102,"name":"batchBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"3068:13:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":1047,"id":1103,"nodeType":"Return","src":"3061:20:8"}]},"documentation":{"id":1036,"nodeType":"StructuredDocumentation","src":"2385:146:8","text":" @dev See {IERC1155-balanceOfBatch}.\n Requirements:\n - `accounts` and `ids` must have the same length."},"functionSelector":"4e1273f4","id":1105,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"2545:14:8","nodeType":"FunctionDefinition","parameters":{"id":1043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1039,"mutability":"mutable","name":"accounts","nameLocation":"2586:8:8","nodeType":"VariableDeclaration","scope":1105,"src":"2569:25:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1037,"name":"address","nodeType":"ElementaryTypeName","src":"2569:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1038,"nodeType":"ArrayTypeName","src":"2569:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1042,"mutability":"mutable","name":"ids","nameLocation":"2621:3:8","nodeType":"VariableDeclaration","scope":1105,"src":"2604:20:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1040,"name":"uint256","nodeType":"ElementaryTypeName","src":"2604:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1041,"nodeType":"ArrayTypeName","src":"2604:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2559:71:8"},"returnParameters":{"id":1047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1046,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1105,"src":"2660:16:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1044,"name":"uint256","nodeType":"ElementaryTypeName","src":"2660:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1045,"nodeType":"ArrayTypeName","src":"2660:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2659:18:8"},"scope":1966,"src":"2536:552:8","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2048],"body":{"id":1120,"nodeType":"Block","src":"3231:69:8","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1114,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"3260:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3260:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1116,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"3274:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1117,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1110,"src":"3284:8:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1113,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1811,"src":"3241:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3241:52:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1119,"nodeType":"ExpressionStatement","src":"3241:52:8"}]},"documentation":{"id":1106,"nodeType":"StructuredDocumentation","src":"3094:57:8","text":" @dev See {IERC1155-setApprovalForAll}."},"functionSelector":"a22cb465","id":1121,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"3165:17:8","nodeType":"FunctionDefinition","parameters":{"id":1111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1108,"mutability":"mutable","name":"operator","nameLocation":"3191:8:8","nodeType":"VariableDeclaration","scope":1121,"src":"3183:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1107,"name":"address","nodeType":"ElementaryTypeName","src":"3183:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1110,"mutability":"mutable","name":"approved","nameLocation":"3206:8:8","nodeType":"VariableDeclaration","scope":1121,"src":"3201:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1109,"name":"bool","nodeType":"ElementaryTypeName","src":"3201:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3182:33:8"},"returnParameters":{"id":1112,"nodeType":"ParameterList","parameters":[],"src":"3231:0:8"},"scope":1966,"src":"3156:144:8","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2058],"body":{"id":1137,"nodeType":"Block","src":"3463:61:8","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":1131,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":963,"src":"3480:18:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1133,"indexExpression":{"id":1132,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"3499:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3480:27:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1135,"indexExpression":{"id":1134,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"3508:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3480:37:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1130,"id":1136,"nodeType":"Return","src":"3473:44:8"}]},"documentation":{"id":1122,"nodeType":"StructuredDocumentation","src":"3306:56:8","text":" @dev See {IERC1155-isApprovedForAll}."},"functionSelector":"e985e9c5","id":1138,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"3376:16:8","nodeType":"FunctionDefinition","parameters":{"id":1127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1124,"mutability":"mutable","name":"account","nameLocation":"3401:7:8","nodeType":"VariableDeclaration","scope":1138,"src":"3393:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1123,"name":"address","nodeType":"ElementaryTypeName","src":"3393:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1126,"mutability":"mutable","name":"operator","nameLocation":"3418:8:8","nodeType":"VariableDeclaration","scope":1138,"src":"3410:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1125,"name":"address","nodeType":"ElementaryTypeName","src":"3410:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3392:35:8"},"returnParameters":{"id":1130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1129,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1138,"src":"3457:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1128,"name":"bool","nodeType":"ElementaryTypeName","src":"3457:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3456:6:8"},"scope":1966,"src":"3367:157:8","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2072],"body":{"id":1181,"nodeType":"Block","src":"3704:238:8","statements":[{"assignments":[1153],"declarations":[{"constant":false,"id":1153,"mutability":"mutable","name":"sender","nameLocation":"3722:6:8","nodeType":"VariableDeclaration","scope":1181,"src":"3714:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1152,"name":"address","nodeType":"ElementaryTypeName","src":"3714:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1156,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1154,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"3731:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3731:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3714:29:8"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1157,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"3757:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1158,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"3765:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3757:14:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":1164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3775:31:8","subExpression":{"arguments":[{"id":1161,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"3793:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1162,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"3799:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1160,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"3776:16:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":1163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3776:30:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3757:49:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1172,"nodeType":"IfStatement","src":"3753:129:8","trueBody":{"id":1171,"nodeType":"Block","src":"3808:74:8","statements":[{"errorCall":{"arguments":[{"id":1167,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"3858:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1168,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"3866:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1166,"name":"ERC1155MissingApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"3829:28:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":1169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3829:42:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1170,"nodeType":"RevertStatement","src":"3822:49:8"}]}},{"expression":{"arguments":[{"id":1174,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"3909:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1175,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1143,"src":"3915:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1176,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"3919:2:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1177,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"3923:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1178,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1149,"src":"3930:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1173,"name":"_safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"3891:17:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,uint256,bytes memory)"}},"id":1179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3891:44:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1180,"nodeType":"ExpressionStatement","src":"3891:44:8"}]},"documentation":{"id":1139,"nodeType":"StructuredDocumentation","src":"3530:56:8","text":" @dev See {IERC1155-safeTransferFrom}."},"functionSelector":"f242432a","id":1182,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3600:16:8","nodeType":"FunctionDefinition","parameters":{"id":1150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1141,"mutability":"mutable","name":"from","nameLocation":"3625:4:8","nodeType":"VariableDeclaration","scope":1182,"src":"3617:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1140,"name":"address","nodeType":"ElementaryTypeName","src":"3617:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1143,"mutability":"mutable","name":"to","nameLocation":"3639:2:8","nodeType":"VariableDeclaration","scope":1182,"src":"3631:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1142,"name":"address","nodeType":"ElementaryTypeName","src":"3631:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1145,"mutability":"mutable","name":"id","nameLocation":"3651:2:8","nodeType":"VariableDeclaration","scope":1182,"src":"3643:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1144,"name":"uint256","nodeType":"ElementaryTypeName","src":"3643:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1147,"mutability":"mutable","name":"value","nameLocation":"3663:5:8","nodeType":"VariableDeclaration","scope":1182,"src":"3655:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1146,"name":"uint256","nodeType":"ElementaryTypeName","src":"3655:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1149,"mutability":"mutable","name":"data","nameLocation":"3683:4:8","nodeType":"VariableDeclaration","scope":1182,"src":"3670:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1148,"name":"bytes","nodeType":"ElementaryTypeName","src":"3670:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3616:72:8"},"returnParameters":{"id":1151,"nodeType":"ParameterList","parameters":[],"src":"3704:0:8"},"scope":1966,"src":"3591:351:8","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2088],"body":{"id":1227,"nodeType":"Block","src":"4198:245:8","statements":[{"assignments":[1199],"declarations":[{"constant":false,"id":1199,"mutability":"mutable","name":"sender","nameLocation":"4216:6:8","nodeType":"VariableDeclaration","scope":1227,"src":"4208:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1198,"name":"address","nodeType":"ElementaryTypeName","src":"4208:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1202,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1200,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"4225:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4225:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4208:29:8"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1203,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1185,"src":"4251:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1204,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1199,"src":"4259:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4251:14:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":1210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4269:31:8","subExpression":{"arguments":[{"id":1207,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1185,"src":"4287:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1208,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1199,"src":"4293:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1206,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"4270:16:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":1209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4270:30:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4251:49:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1218,"nodeType":"IfStatement","src":"4247:129:8","trueBody":{"id":1217,"nodeType":"Block","src":"4302:74:8","statements":[{"errorCall":{"arguments":[{"id":1213,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1199,"src":"4352:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1214,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1185,"src":"4360:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1212,"name":"ERC1155MissingApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"4323:28:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":1215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4323:42:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1216,"nodeType":"RevertStatement","src":"4316:49:8"}]}},{"expression":{"arguments":[{"id":1220,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1185,"src":"4408:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1221,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1187,"src":"4414:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1222,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"4418:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1223,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1193,"src":"4423:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1224,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"4431:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1219,"name":"_safeBatchTransferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1578,"src":"4385:22:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4385:51:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1226,"nodeType":"ExpressionStatement","src":"4385:51:8"}]},"documentation":{"id":1183,"nodeType":"StructuredDocumentation","src":"3948:61:8","text":" @dev See {IERC1155-safeBatchTransferFrom}."},"functionSelector":"2eb2c2d6","id":1228,"implemented":true,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"4023:21:8","nodeType":"FunctionDefinition","parameters":{"id":1196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1185,"mutability":"mutable","name":"from","nameLocation":"4062:4:8","nodeType":"VariableDeclaration","scope":1228,"src":"4054:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1184,"name":"address","nodeType":"ElementaryTypeName","src":"4054:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1187,"mutability":"mutable","name":"to","nameLocation":"4084:2:8","nodeType":"VariableDeclaration","scope":1228,"src":"4076:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1186,"name":"address","nodeType":"ElementaryTypeName","src":"4076:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1190,"mutability":"mutable","name":"ids","nameLocation":"4113:3:8","nodeType":"VariableDeclaration","scope":1228,"src":"4096:20:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1188,"name":"uint256","nodeType":"ElementaryTypeName","src":"4096:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1189,"nodeType":"ArrayTypeName","src":"4096:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1193,"mutability":"mutable","name":"values","nameLocation":"4143:6:8","nodeType":"VariableDeclaration","scope":1228,"src":"4126:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1191,"name":"uint256","nodeType":"ElementaryTypeName","src":"4126:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1192,"nodeType":"ArrayTypeName","src":"4126:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1195,"mutability":"mutable","name":"data","nameLocation":"4172:4:8","nodeType":"VariableDeclaration","scope":1228,"src":"4159:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1194,"name":"bytes","nodeType":"ElementaryTypeName","src":"4159:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4044:138:8"},"returnParameters":{"id":1197,"nodeType":"ParameterList","parameters":[],"src":"4198:0:8"},"scope":1966,"src":"4014:429:8","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1380,"nodeType":"Block","src":"5251:1174:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1242,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"5265:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5269:6:8","memberName":"length","nodeType":"MemberAccess","src":"5265:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1244,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"5279:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5286:6:8","memberName":"length","nodeType":"MemberAccess","src":"5279:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5265:27:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1255,"nodeType":"IfStatement","src":"5261:117:8","trueBody":{"id":1254,"nodeType":"Block","src":"5294:84:8","statements":[{"errorCall":{"arguments":[{"expression":{"id":1248,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"5341:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5345:6:8","memberName":"length","nodeType":"MemberAccess","src":"5341:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1250,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"5353:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5360:6:8","memberName":"length","nodeType":"MemberAccess","src":"5353:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1247,"name":"ERC1155InvalidArrayLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":914,"src":"5315:25:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":1252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5315:52:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1253,"nodeType":"RevertStatement","src":"5308:59:8"}]}},{"assignments":[1257],"declarations":[{"constant":false,"id":1257,"mutability":"mutable","name":"operator","nameLocation":"5396:8:8","nodeType":"VariableDeclaration","scope":1380,"src":"5388:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1256,"name":"address","nodeType":"ElementaryTypeName","src":"5388:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1260,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1258,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"5407:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5407:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5388:31:8"},{"body":{"id":1341,"nodeType":"Block","src":"5471:650:8","statements":[{"assignments":[1273],"declarations":[{"constant":false,"id":1273,"mutability":"mutable","name":"id","nameLocation":"5493:2:8","nodeType":"VariableDeclaration","scope":1341,"src":"5485:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1272,"name":"uint256","nodeType":"ElementaryTypeName","src":"5485:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1278,"initialValue":{"arguments":[{"id":1276,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1262,"src":"5521:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1274,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"5498:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5502:18:8","memberName":"unsafeMemoryAccess","nodeType":"MemberAccess","referencedDeclaration":2513,"src":"5498:22:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$returns$_t_uint256_$attached_to$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256[] memory,uint256) pure returns (uint256)"}},"id":1277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5498:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5485:38:8"},{"assignments":[1280],"declarations":[{"constant":false,"id":1280,"mutability":"mutable","name":"value","nameLocation":"5545:5:8","nodeType":"VariableDeclaration","scope":1341,"src":"5537:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1279,"name":"uint256","nodeType":"ElementaryTypeName","src":"5537:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1285,"initialValue":{"arguments":[{"id":1283,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1262,"src":"5579:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1281,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"5553:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5560:18:8","memberName":"unsafeMemoryAccess","nodeType":"MemberAccess","referencedDeclaration":2513,"src":"5553:25:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$returns$_t_uint256_$attached_to$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256[] memory,uint256) pure returns (uint256)"}},"id":1284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5553:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5537:44:8"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1286,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"5600:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5616:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1288,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5608:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1287,"name":"address","nodeType":"ElementaryTypeName","src":"5608:7:8","typeDescriptions":{}}},"id":1290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5608:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5600:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1324,"nodeType":"IfStatement","src":"5596:420:8","trueBody":{"id":1323,"nodeType":"Block","src":"5620:396:8","statements":[{"assignments":[1293],"declarations":[{"constant":false,"id":1293,"mutability":"mutable","name":"fromBalance","nameLocation":"5646:11:8","nodeType":"VariableDeclaration","scope":1323,"src":"5638:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1292,"name":"uint256","nodeType":"ElementaryTypeName","src":"5638:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1299,"initialValue":{"baseExpression":{"baseExpression":{"id":1294,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"5660:9:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1296,"indexExpression":{"id":1295,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1273,"src":"5670:2:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5660:13:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1298,"indexExpression":{"id":1297,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"5674:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5660:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5638:41:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1300,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"5701:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1301,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"5715:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5701:19:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1311,"nodeType":"IfStatement","src":"5697:129:8","trueBody":{"id":1310,"nodeType":"Block","src":"5722:104:8","statements":[{"errorCall":{"arguments":[{"id":1304,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"5778:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1305,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"5784:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1306,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"5797:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1307,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1273,"src":"5804:2:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1303,"name":"ERC1155InsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":880,"src":"5751:26:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256,uint256) pure"}},"id":1308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5751:56:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1309,"nodeType":"RevertStatement","src":"5744:63:8"}]}},{"id":1322,"nodeType":"UncheckedBlock","src":"5843:159:8","statements":[{"expression":{"id":1320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1312,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"5942:9:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1315,"indexExpression":{"id":1313,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1273,"src":"5952:2:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5942:13:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1316,"indexExpression":{"id":1314,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"5956:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5942:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1317,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"5964:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1318,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"5978:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5964:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5942:41:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1321,"nodeType":"ExpressionStatement","src":"5942:41:8"}]}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1325,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"6034:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6048:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1327,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6040:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1326,"name":"address","nodeType":"ElementaryTypeName","src":"6040:7:8","typeDescriptions":{}}},"id":1329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6040:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6034:16:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1340,"nodeType":"IfStatement","src":"6030:81:8","trueBody":{"id":1339,"nodeType":"Block","src":"6052:59:8","statements":[{"expression":{"id":1337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1331,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"6070:9:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1334,"indexExpression":{"id":1332,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1273,"src":"6080:2:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6070:13:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1335,"indexExpression":{"id":1333,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"6084:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6070:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1336,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"6091:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6070:26:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1338,"nodeType":"ExpressionStatement","src":"6070:26:8"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1265,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1262,"src":"5450:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1266,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"5454:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5458:6:8","memberName":"length","nodeType":"MemberAccess","src":"5454:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5450:14:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1342,"initializationExpression":{"assignments":[1262],"declarations":[{"constant":false,"id":1262,"mutability":"mutable","name":"i","nameLocation":"5443:1:8","nodeType":"VariableDeclaration","scope":1342,"src":"5435:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1261,"name":"uint256","nodeType":"ElementaryTypeName","src":"5435:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1264,"initialValue":{"hexValue":"30","id":1263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5447:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5435:13:8"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"5466:3:8","subExpression":{"id":1269,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1262,"src":"5468:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1271,"nodeType":"ExpressionStatement","src":"5466:3:8"},"nodeType":"ForStatement","src":"5430:691:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1343,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"6135:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6139:6:8","memberName":"length","nodeType":"MemberAccess","src":"6135:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":1345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6149:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6135:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1378,"nodeType":"Block","src":"6343:76:8","statements":[{"eventCall":{"arguments":[{"id":1371,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1257,"src":"6376:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1372,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"6386:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1373,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"6392:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1374,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"6396:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1375,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"6401:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":1370,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"6362:13:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6362:46:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1377,"nodeType":"EmitStatement","src":"6357:51:8"}]},"id":1379,"nodeType":"IfStatement","src":"6131:288:8","trueBody":{"id":1369,"nodeType":"Block","src":"6152:185:8","statements":[{"assignments":[1348],"declarations":[{"constant":false,"id":1348,"mutability":"mutable","name":"id","nameLocation":"6174:2:8","nodeType":"VariableDeclaration","scope":1369,"src":"6166:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1347,"name":"uint256","nodeType":"ElementaryTypeName","src":"6166:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1353,"initialValue":{"arguments":[{"hexValue":"30","id":1351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6202:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":1349,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"6179:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6183:18:8","memberName":"unsafeMemoryAccess","nodeType":"MemberAccess","referencedDeclaration":2513,"src":"6179:22:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$returns$_t_uint256_$attached_to$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256[] memory,uint256) pure returns (uint256)"}},"id":1352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6179:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6166:38:8"},{"assignments":[1355],"declarations":[{"constant":false,"id":1355,"mutability":"mutable","name":"value","nameLocation":"6226:5:8","nodeType":"VariableDeclaration","scope":1369,"src":"6218:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1354,"name":"uint256","nodeType":"ElementaryTypeName","src":"6218:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1360,"initialValue":{"arguments":[{"hexValue":"30","id":1358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6260:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":1356,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"6234:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6241:18:8","memberName":"unsafeMemoryAccess","nodeType":"MemberAccess","referencedDeclaration":2513,"src":"6234:25:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$returns$_t_uint256_$attached_to$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256[] memory,uint256) pure returns (uint256)"}},"id":1359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6234:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6218:44:8"},{"eventCall":{"arguments":[{"id":1362,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1257,"src":"6296:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1363,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"6306:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1364,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"6312:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1365,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1348,"src":"6316:2:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1366,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1355,"src":"6320:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1361,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1986,"src":"6281:14:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":1367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6281:45:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1368,"nodeType":"EmitStatement","src":"6276:50:8"}]}}]},"documentation":{"id":1229,"nodeType":"StructuredDocumentation","src":"4449:690:8","text":" @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\n (or `to`) is the zero address.\n Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\n Requirements:\n - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\n   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\n - `ids` and `values` must have the same length.\n NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead."},"id":1381,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"5153:7:8","nodeType":"FunctionDefinition","parameters":{"id":1240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1231,"mutability":"mutable","name":"from","nameLocation":"5169:4:8","nodeType":"VariableDeclaration","scope":1381,"src":"5161:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1230,"name":"address","nodeType":"ElementaryTypeName","src":"5161:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1233,"mutability":"mutable","name":"to","nameLocation":"5183:2:8","nodeType":"VariableDeclaration","scope":1381,"src":"5175:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1232,"name":"address","nodeType":"ElementaryTypeName","src":"5175:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1236,"mutability":"mutable","name":"ids","nameLocation":"5204:3:8","nodeType":"VariableDeclaration","scope":1381,"src":"5187:20:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1234,"name":"uint256","nodeType":"ElementaryTypeName","src":"5187:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1235,"nodeType":"ArrayTypeName","src":"5187:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1239,"mutability":"mutable","name":"values","nameLocation":"5226:6:8","nodeType":"VariableDeclaration","scope":1381,"src":"5209:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1237,"name":"uint256","nodeType":"ElementaryTypeName","src":"5209:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1238,"nodeType":"ArrayTypeName","src":"5209:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"5160:73:8"},"returnParameters":{"id":1241,"nodeType":"ParameterList","parameters":[],"src":"5251:0:8"},"scope":1966,"src":"5144:1281:8","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1456,"nodeType":"Block","src":"7195:499:8","statements":[{"expression":{"arguments":[{"id":1398,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"7213:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1399,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1386,"src":"7219:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1400,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"7223:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1401,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"7228:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":1397,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"7205:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory)"}},"id":1402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7205:30:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1403,"nodeType":"ExpressionStatement","src":"7205:30:8"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1404,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1386,"src":"7249:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7263:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1406,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7255:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1405,"name":"address","nodeType":"ElementaryTypeName","src":"7255:7:8","typeDescriptions":{}}},"id":1408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7255:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7249:16:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1455,"nodeType":"IfStatement","src":"7245:443:8","trueBody":{"id":1454,"nodeType":"Block","src":"7267:421:8","statements":[{"assignments":[1411],"declarations":[{"constant":false,"id":1411,"mutability":"mutable","name":"operator","nameLocation":"7289:8:8","nodeType":"VariableDeclaration","scope":1454,"src":"7281:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1410,"name":"address","nodeType":"ElementaryTypeName","src":"7281:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1414,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1412,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"7300:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7300:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7281:31:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1415,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"7330:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7334:6:8","memberName":"length","nodeType":"MemberAccess","src":"7330:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":1417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7344:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7330:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1452,"nodeType":"Block","src":"7571:107:8","statements":[{"expression":{"arguments":[{"id":1444,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1411,"src":"7625:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1445,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"7635:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1446,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1386,"src":"7641:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1447,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"7645:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1448,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"7650:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1449,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1394,"src":"7658:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1443,"name":"_doSafeBatchTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"7589:35:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7589:74:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1451,"nodeType":"ExpressionStatement","src":"7589:74:8"}]},"id":1453,"nodeType":"IfStatement","src":"7326:352:8","trueBody":{"id":1442,"nodeType":"Block","src":"7347:218:8","statements":[{"assignments":[1420],"declarations":[{"constant":false,"id":1420,"mutability":"mutable","name":"id","nameLocation":"7373:2:8","nodeType":"VariableDeclaration","scope":1442,"src":"7365:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1419,"name":"uint256","nodeType":"ElementaryTypeName","src":"7365:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1425,"initialValue":{"arguments":[{"hexValue":"30","id":1423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7401:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":1421,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"7378:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7382:18:8","memberName":"unsafeMemoryAccess","nodeType":"MemberAccess","referencedDeclaration":2513,"src":"7378:22:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$returns$_t_uint256_$attached_to$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256[] memory,uint256) pure returns (uint256)"}},"id":1424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7378:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7365:38:8"},{"assignments":[1427],"declarations":[{"constant":false,"id":1427,"mutability":"mutable","name":"value","nameLocation":"7429:5:8","nodeType":"VariableDeclaration","scope":1442,"src":"7421:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1426,"name":"uint256","nodeType":"ElementaryTypeName","src":"7421:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1432,"initialValue":{"arguments":[{"hexValue":"30","id":1430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7463:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":1428,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"7437:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7444:18:8","memberName":"unsafeMemoryAccess","nodeType":"MemberAccess","referencedDeclaration":2513,"src":"7437:25:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$returns$_t_uint256_$attached_to$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256[] memory,uint256) pure returns (uint256)"}},"id":1431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7437:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7421:44:8"},{"expression":{"arguments":[{"id":1434,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1411,"src":"7514:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1435,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"7524:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1436,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1386,"src":"7530:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1437,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"7534:2:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1438,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1427,"src":"7538:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1439,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1394,"src":"7545:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1433,"name":"_doSafeTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"7483:30:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,uint256,bytes memory)"}},"id":1440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7483:67:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1441,"nodeType":"ExpressionStatement","src":"7483:67:8"}]}}]}}]},"documentation":{"id":1382,"nodeType":"StructuredDocumentation","src":"6431:568:8","text":" @dev Version of {_update} that performs the token acceptance check by calling\n {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\n contains code (eg. is a smart contract at the moment of execution).\n IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\n update to the contract state after this function would break the check-effect-interaction pattern. Consider\n overriding {_update} instead."},"id":1457,"implemented":true,"kind":"function","modifiers":[],"name":"_updateWithAcceptanceCheck","nameLocation":"7013:26:8","nodeType":"FunctionDefinition","parameters":{"id":1395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1384,"mutability":"mutable","name":"from","nameLocation":"7057:4:8","nodeType":"VariableDeclaration","scope":1457,"src":"7049:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1383,"name":"address","nodeType":"ElementaryTypeName","src":"7049:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1386,"mutability":"mutable","name":"to","nameLocation":"7079:2:8","nodeType":"VariableDeclaration","scope":1457,"src":"7071:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1385,"name":"address","nodeType":"ElementaryTypeName","src":"7071:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1389,"mutability":"mutable","name":"ids","nameLocation":"7108:3:8","nodeType":"VariableDeclaration","scope":1457,"src":"7091:20:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1387,"name":"uint256","nodeType":"ElementaryTypeName","src":"7091:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1388,"nodeType":"ArrayTypeName","src":"7091:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1392,"mutability":"mutable","name":"values","nameLocation":"7138:6:8","nodeType":"VariableDeclaration","scope":1457,"src":"7121:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1390,"name":"uint256","nodeType":"ElementaryTypeName","src":"7121:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1391,"nodeType":"ArrayTypeName","src":"7121:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1394,"mutability":"mutable","name":"data","nameLocation":"7167:4:8","nodeType":"VariableDeclaration","scope":1457,"src":"7154:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1393,"name":"bytes","nodeType":"ElementaryTypeName","src":"7154:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7039:138:8"},"returnParameters":{"id":1396,"nodeType":"ParameterList","parameters":[],"src":"7195:0:8"},"scope":1966,"src":"7004:690:8","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1522,"nodeType":"Block","src":"8259:355:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1471,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"8273:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8287:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1473,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8279:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1472,"name":"address","nodeType":"ElementaryTypeName","src":"8279:7:8","typeDescriptions":{}}},"id":1475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8279:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8273:16:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1485,"nodeType":"IfStatement","src":"8269:88:8","trueBody":{"id":1484,"nodeType":"Block","src":"8291:66:8","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8343:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1479,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8335:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1478,"name":"address","nodeType":"ElementaryTypeName","src":"8335:7:8","typeDescriptions":{}}},"id":1481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8335:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1477,"name":"ERC1155InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":890,"src":"8312:22:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8312:34:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1483,"nodeType":"RevertStatement","src":"8305:41:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1486,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1460,"src":"8370:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8386:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1488,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8378:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1487,"name":"address","nodeType":"ElementaryTypeName","src":"8378:7:8","typeDescriptions":{}}},"id":1490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8378:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8370:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1500,"nodeType":"IfStatement","src":"8366:88:8","trueBody":{"id":1499,"nodeType":"Block","src":"8390:64:8","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8440:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1494,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8432:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1493,"name":"address","nodeType":"ElementaryTypeName","src":"8432:7:8","typeDescriptions":{}}},"id":1496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8432:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1492,"name":"ERC1155InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"8411:20:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8411:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1498,"nodeType":"RevertStatement","src":"8404:39:8"}]}},{"assignments":[1505,1508],"declarations":[{"constant":false,"id":1505,"mutability":"mutable","name":"ids","nameLocation":"8481:3:8","nodeType":"VariableDeclaration","scope":1522,"src":"8464:20:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1503,"name":"uint256","nodeType":"ElementaryTypeName","src":"8464:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1504,"nodeType":"ArrayTypeName","src":"8464:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1508,"mutability":"mutable","name":"values","nameLocation":"8503:6:8","nodeType":"VariableDeclaration","scope":1522,"src":"8486:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1506,"name":"uint256","nodeType":"ElementaryTypeName","src":"8486:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1507,"nodeType":"ArrayTypeName","src":"8486:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1513,"initialValue":{"arguments":[{"id":1510,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"8532:2:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1511,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"8536:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1509,"name":"_asSingletonArrays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1965,"src":"8513:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (uint256[] memory,uint256[] memory)"}},"id":1512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8513:29:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(uint256[] memory,uint256[] memory)"}},"nodeType":"VariableDeclarationStatement","src":"8463:79:8"},{"expression":{"arguments":[{"id":1515,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1460,"src":"8579:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1516,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"8585:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1517,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"8589:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1518,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"8594:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1519,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"8602:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1514,"name":"_updateWithAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1457,"src":"8552:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8552:55:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1521,"nodeType":"ExpressionStatement","src":"8552:55:8"}]},"documentation":{"id":1458,"nodeType":"StructuredDocumentation","src":"7700:446:8","text":" @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - `from` must have a balance of tokens of type `id` of at least `value` amount.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"id":1523,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransferFrom","nameLocation":"8160:17:8","nodeType":"FunctionDefinition","parameters":{"id":1469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1460,"mutability":"mutable","name":"from","nameLocation":"8186:4:8","nodeType":"VariableDeclaration","scope":1523,"src":"8178:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1459,"name":"address","nodeType":"ElementaryTypeName","src":"8178:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1462,"mutability":"mutable","name":"to","nameLocation":"8200:2:8","nodeType":"VariableDeclaration","scope":1523,"src":"8192:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1461,"name":"address","nodeType":"ElementaryTypeName","src":"8192:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1464,"mutability":"mutable","name":"id","nameLocation":"8212:2:8","nodeType":"VariableDeclaration","scope":1523,"src":"8204:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1463,"name":"uint256","nodeType":"ElementaryTypeName","src":"8204:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1466,"mutability":"mutable","name":"value","nameLocation":"8224:5:8","nodeType":"VariableDeclaration","scope":1523,"src":"8216:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1465,"name":"uint256","nodeType":"ElementaryTypeName","src":"8216:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1468,"mutability":"mutable","name":"data","nameLocation":"8244:4:8","nodeType":"VariableDeclaration","scope":1523,"src":"8231:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1467,"name":"bytes","nodeType":"ElementaryTypeName","src":"8231:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8177:72:8"},"returnParameters":{"id":1470,"nodeType":"ParameterList","parameters":[],"src":"8259:0:8"},"scope":1966,"src":"8151:463:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1577,"nodeType":"Block","src":"9194:266:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1539,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"9208:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9222:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1541,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9214:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1540,"name":"address","nodeType":"ElementaryTypeName","src":"9214:7:8","typeDescriptions":{}}},"id":1543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9214:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9208:16:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1553,"nodeType":"IfStatement","src":"9204:88:8","trueBody":{"id":1552,"nodeType":"Block","src":"9226:66:8","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9278:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1547,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9270:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1546,"name":"address","nodeType":"ElementaryTypeName","src":"9270:7:8","typeDescriptions":{}}},"id":1549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9270:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1545,"name":"ERC1155InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":890,"src":"9247:22:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9247:34:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1551,"nodeType":"RevertStatement","src":"9240:41:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1554,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"9305:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9321:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1556,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9313:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1555,"name":"address","nodeType":"ElementaryTypeName","src":"9313:7:8","typeDescriptions":{}}},"id":1558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9313:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9305:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1568,"nodeType":"IfStatement","src":"9301:88:8","trueBody":{"id":1567,"nodeType":"Block","src":"9325:64:8","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9375:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1562,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9367:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1561,"name":"address","nodeType":"ElementaryTypeName","src":"9367:7:8","typeDescriptions":{}}},"id":1564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9367:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1560,"name":"ERC1155InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"9346:20:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9346:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1566,"nodeType":"RevertStatement","src":"9339:39:8"}]}},{"expression":{"arguments":[{"id":1570,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"9425:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1571,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"9431:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1572,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"9435:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1573,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"9440:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1574,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"9448:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1569,"name":"_updateWithAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1457,"src":"9398:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9398:55:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1576,"nodeType":"ExpressionStatement","src":"9398:55:8"}]},"documentation":{"id":1524,"nodeType":"StructuredDocumentation","src":"8620:390:8","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n Emits a {TransferBatch} event.\n Requirements:\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value.\n - `ids` and `values` must have the same length."},"id":1578,"implemented":true,"kind":"function","modifiers":[],"name":"_safeBatchTransferFrom","nameLocation":"9024:22:8","nodeType":"FunctionDefinition","parameters":{"id":1537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1526,"mutability":"mutable","name":"from","nameLocation":"9064:4:8","nodeType":"VariableDeclaration","scope":1578,"src":"9056:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1525,"name":"address","nodeType":"ElementaryTypeName","src":"9056:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1528,"mutability":"mutable","name":"to","nameLocation":"9086:2:8","nodeType":"VariableDeclaration","scope":1578,"src":"9078:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1527,"name":"address","nodeType":"ElementaryTypeName","src":"9078:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1531,"mutability":"mutable","name":"ids","nameLocation":"9115:3:8","nodeType":"VariableDeclaration","scope":1578,"src":"9098:20:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1529,"name":"uint256","nodeType":"ElementaryTypeName","src":"9098:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1530,"nodeType":"ArrayTypeName","src":"9098:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1534,"mutability":"mutable","name":"values","nameLocation":"9145:6:8","nodeType":"VariableDeclaration","scope":1578,"src":"9128:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1532,"name":"uint256","nodeType":"ElementaryTypeName","src":"9128:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1533,"nodeType":"ArrayTypeName","src":"9128:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1536,"mutability":"mutable","name":"data","nameLocation":"9174:4:8","nodeType":"VariableDeclaration","scope":1578,"src":"9161:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1535,"name":"bytes","nodeType":"ElementaryTypeName","src":"9161:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9046:138:8"},"returnParameters":{"id":1538,"nodeType":"ParameterList","parameters":[],"src":"9194:0:8"},"scope":1966,"src":"9015:445:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1588,"nodeType":"Block","src":"10338:30:8","statements":[{"expression":{"id":1586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1584,"name":"_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":965,"src":"10348:4:8","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1585,"name":"newuri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1581,"src":"10355:6:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"10348:13:8","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1587,"nodeType":"ExpressionStatement","src":"10348:13:8"}]},"documentation":{"id":1579,"nodeType":"StructuredDocumentation","src":"9466:811:8","text":" @dev Sets a new URI for all token types, by relying on the token type ID\n substitution mechanism\n https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n URI or any of the values in the JSON file at said URI will be replaced by\n clients with the token type ID.\n For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n interpreted by clients as\n `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n for token type ID 0x4cce0.\n See {uri}.\n Because these URIs cannot be meaningfully represented by the {URI} event,\n this function emits no events."},"id":1589,"implemented":true,"kind":"function","modifiers":[],"name":"_setURI","nameLocation":"10291:7:8","nodeType":"FunctionDefinition","parameters":{"id":1582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1581,"mutability":"mutable","name":"newuri","nameLocation":"10313:6:8","nodeType":"VariableDeclaration","scope":1589,"src":"10299:20:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1580,"name":"string","nodeType":"ElementaryTypeName","src":"10299:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"10298:22:8"},"returnParameters":{"id":1583,"nodeType":"ParameterList","parameters":[],"src":"10338:0:8"},"scope":1966,"src":"10282:86:8","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1640,"nodeType":"Block","src":"10828:264:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1601,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1592,"src":"10842:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1603,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10848:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1602,"name":"address","nodeType":"ElementaryTypeName","src":"10848:7:8","typeDescriptions":{}}},"id":1605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10848:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10842:16:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1615,"nodeType":"IfStatement","src":"10838:88:8","trueBody":{"id":1614,"nodeType":"Block","src":"10860:66:8","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10912:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1609,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10904:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1608,"name":"address","nodeType":"ElementaryTypeName","src":"10904:7:8","typeDescriptions":{}}},"id":1611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10904:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1607,"name":"ERC1155InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":890,"src":"10881:22:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10881:34:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1613,"nodeType":"RevertStatement","src":"10874:41:8"}]}},{"assignments":[1620,1623],"declarations":[{"constant":false,"id":1620,"mutability":"mutable","name":"ids","nameLocation":"10953:3:8","nodeType":"VariableDeclaration","scope":1640,"src":"10936:20:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1618,"name":"uint256","nodeType":"ElementaryTypeName","src":"10936:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1619,"nodeType":"ArrayTypeName","src":"10936:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1623,"mutability":"mutable","name":"values","nameLocation":"10975:6:8","nodeType":"VariableDeclaration","scope":1640,"src":"10958:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1621,"name":"uint256","nodeType":"ElementaryTypeName","src":"10958:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1622,"nodeType":"ArrayTypeName","src":"10958:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1628,"initialValue":{"arguments":[{"id":1625,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"11004:2:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1626,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"11008:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1624,"name":"_asSingletonArrays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1965,"src":"10985:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (uint256[] memory,uint256[] memory)"}},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10985:29:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(uint256[] memory,uint256[] memory)"}},"nodeType":"VariableDeclarationStatement","src":"10935:79:8"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11059:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1631,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11051:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1630,"name":"address","nodeType":"ElementaryTypeName","src":"11051:7:8","typeDescriptions":{}}},"id":1633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11051:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1634,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1592,"src":"11063:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1635,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1620,"src":"11067:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1636,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"11072:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1637,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"11080:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1629,"name":"_updateWithAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1457,"src":"11024:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11024:61:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1639,"nodeType":"ExpressionStatement","src":"11024:61:8"}]},"documentation":{"id":1590,"nodeType":"StructuredDocumentation","src":"10374:367:8","text":" @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"id":1641,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"10755:5:8","nodeType":"FunctionDefinition","parameters":{"id":1599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1592,"mutability":"mutable","name":"to","nameLocation":"10769:2:8","nodeType":"VariableDeclaration","scope":1641,"src":"10761:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1591,"name":"address","nodeType":"ElementaryTypeName","src":"10761:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1594,"mutability":"mutable","name":"id","nameLocation":"10781:2:8","nodeType":"VariableDeclaration","scope":1641,"src":"10773:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1593,"name":"uint256","nodeType":"ElementaryTypeName","src":"10773:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1596,"mutability":"mutable","name":"value","nameLocation":"10793:5:8","nodeType":"VariableDeclaration","scope":1641,"src":"10785:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1595,"name":"uint256","nodeType":"ElementaryTypeName","src":"10785:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1598,"mutability":"mutable","name":"data","nameLocation":"10813:4:8","nodeType":"VariableDeclaration","scope":1641,"src":"10800:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1597,"name":"bytes","nodeType":"ElementaryTypeName","src":"10800:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10760:58:8"},"returnParameters":{"id":1600,"nodeType":"ParameterList","parameters":[],"src":"10828:0:8"},"scope":1966,"src":"10746:346:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1681,"nodeType":"Block","src":"11630:175:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1655,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1644,"src":"11644:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11658:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1657,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11650:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1656,"name":"address","nodeType":"ElementaryTypeName","src":"11650:7:8","typeDescriptions":{}}},"id":1659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11650:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11644:16:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1669,"nodeType":"IfStatement","src":"11640:88:8","trueBody":{"id":1668,"nodeType":"Block","src":"11662:66:8","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11714:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1663,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11706:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1662,"name":"address","nodeType":"ElementaryTypeName","src":"11706:7:8","typeDescriptions":{}}},"id":1665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11706:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1661,"name":"ERC1155InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":890,"src":"11683:22:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11683:34:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1667,"nodeType":"RevertStatement","src":"11676:41:8"}]}},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11772:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1672,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11764:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1671,"name":"address","nodeType":"ElementaryTypeName","src":"11764:7:8","typeDescriptions":{}}},"id":1674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11764:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1675,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1644,"src":"11776:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1676,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1647,"src":"11780:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1677,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1650,"src":"11785:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1678,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"11793:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1670,"name":"_updateWithAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1457,"src":"11737:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11737:61:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1680,"nodeType":"ExpressionStatement","src":"11737:61:8"}]},"documentation":{"id":1642,"nodeType":"StructuredDocumentation","src":"11098:420:8","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `values` must have the same length.\n - `to` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"id":1682,"implemented":true,"kind":"function","modifiers":[],"name":"_mintBatch","nameLocation":"11532:10:8","nodeType":"FunctionDefinition","parameters":{"id":1653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1644,"mutability":"mutable","name":"to","nameLocation":"11551:2:8","nodeType":"VariableDeclaration","scope":1682,"src":"11543:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1643,"name":"address","nodeType":"ElementaryTypeName","src":"11543:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1647,"mutability":"mutable","name":"ids","nameLocation":"11572:3:8","nodeType":"VariableDeclaration","scope":1682,"src":"11555:20:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1645,"name":"uint256","nodeType":"ElementaryTypeName","src":"11555:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1646,"nodeType":"ArrayTypeName","src":"11555:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1650,"mutability":"mutable","name":"values","nameLocation":"11594:6:8","nodeType":"VariableDeclaration","scope":1682,"src":"11577:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1648,"name":"uint256","nodeType":"ElementaryTypeName","src":"11577:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1649,"nodeType":"ArrayTypeName","src":"11577:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1652,"mutability":"mutable","name":"data","nameLocation":"11615:4:8","nodeType":"VariableDeclaration","scope":1682,"src":"11602:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1651,"name":"bytes","nodeType":"ElementaryTypeName","src":"11602:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11542:78:8"},"returnParameters":{"id":1654,"nodeType":"ParameterList","parameters":[],"src":"11630:0:8"},"scope":1966,"src":"11523:282:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1731,"nodeType":"Block","src":"12164:264:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1692,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"12178:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12194:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1694,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12186:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1693,"name":"address","nodeType":"ElementaryTypeName","src":"12186:7:8","typeDescriptions":{}}},"id":1696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12186:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12178:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1706,"nodeType":"IfStatement","src":"12174:88:8","trueBody":{"id":1705,"nodeType":"Block","src":"12198:64:8","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12248:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1700,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12240:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1699,"name":"address","nodeType":"ElementaryTypeName","src":"12240:7:8","typeDescriptions":{}}},"id":1702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12240:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1698,"name":"ERC1155InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"12219:20:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12219:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1704,"nodeType":"RevertStatement","src":"12212:39:8"}]}},{"assignments":[1711,1714],"declarations":[{"constant":false,"id":1711,"mutability":"mutable","name":"ids","nameLocation":"12289:3:8","nodeType":"VariableDeclaration","scope":1731,"src":"12272:20:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1709,"name":"uint256","nodeType":"ElementaryTypeName","src":"12272:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1710,"nodeType":"ArrayTypeName","src":"12272:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1714,"mutability":"mutable","name":"values","nameLocation":"12311:6:8","nodeType":"VariableDeclaration","scope":1731,"src":"12294:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1712,"name":"uint256","nodeType":"ElementaryTypeName","src":"12294:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1713,"nodeType":"ArrayTypeName","src":"12294:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1719,"initialValue":{"arguments":[{"id":1716,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1687,"src":"12340:2:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1717,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1689,"src":"12344:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1715,"name":"_asSingletonArrays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1965,"src":"12321:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (uint256[] memory,uint256[] memory)"}},"id":1718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12321:29:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(uint256[] memory,uint256[] memory)"}},"nodeType":"VariableDeclarationStatement","src":"12271:79:8"},{"expression":{"arguments":[{"id":1721,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"12387:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12401:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1723,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12393:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1722,"name":"address","nodeType":"ElementaryTypeName","src":"12393:7:8","typeDescriptions":{}}},"id":1725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12393:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1726,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1711,"src":"12405:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1727,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"12410:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12418:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1720,"name":"_updateWithAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1457,"src":"12360:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12360:61:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1730,"nodeType":"ExpressionStatement","src":"12360:61:8"}]},"documentation":{"id":1683,"nodeType":"StructuredDocumentation","src":"11811:283:8","text":" @dev Destroys a `value` amount of tokens of type `id` from `from`\n Emits a {TransferSingle} event.\n Requirements:\n - `from` cannot be the zero address.\n - `from` must have at least `value` amount of tokens of type `id`."},"id":1732,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"12108:5:8","nodeType":"FunctionDefinition","parameters":{"id":1690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1685,"mutability":"mutable","name":"from","nameLocation":"12122:4:8","nodeType":"VariableDeclaration","scope":1732,"src":"12114:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1684,"name":"address","nodeType":"ElementaryTypeName","src":"12114:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1687,"mutability":"mutable","name":"id","nameLocation":"12136:2:8","nodeType":"VariableDeclaration","scope":1732,"src":"12128:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1686,"name":"uint256","nodeType":"ElementaryTypeName","src":"12128:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1689,"mutability":"mutable","name":"value","nameLocation":"12148:5:8","nodeType":"VariableDeclaration","scope":1732,"src":"12140:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1688,"name":"uint256","nodeType":"ElementaryTypeName","src":"12140:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12113:41:8"},"returnParameters":{"id":1691,"nodeType":"ParameterList","parameters":[],"src":"12164:0:8"},"scope":1966,"src":"12099:329:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1770,"nodeType":"Block","src":"12874:175:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1744,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"12888:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12904:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1746,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12896:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1745,"name":"address","nodeType":"ElementaryTypeName","src":"12896:7:8","typeDescriptions":{}}},"id":1748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12896:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12888:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1758,"nodeType":"IfStatement","src":"12884:88:8","trueBody":{"id":1757,"nodeType":"Block","src":"12908:64:8","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12958:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1752,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12950:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1751,"name":"address","nodeType":"ElementaryTypeName","src":"12950:7:8","typeDescriptions":{}}},"id":1754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12950:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1750,"name":"ERC1155InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"12929:20:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12929:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1756,"nodeType":"RevertStatement","src":"12922:39:8"}]}},{"expression":{"arguments":[{"id":1760,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"13008:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13022:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1762,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13014:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1761,"name":"address","nodeType":"ElementaryTypeName","src":"13014:7:8","typeDescriptions":{}}},"id":1764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13014:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1765,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"13026:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1766,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1741,"src":"13031:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13039:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1759,"name":"_updateWithAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1457,"src":"12981:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12981:61:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1769,"nodeType":"ExpressionStatement","src":"12981:61:8"}]},"documentation":{"id":1733,"nodeType":"StructuredDocumentation","src":"12434:345:8","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n Emits a {TransferBatch} event.\n Requirements:\n - `from` cannot be the zero address.\n - `from` must have at least `value` amount of tokens of type `id`.\n - `ids` and `values` must have the same length."},"id":1771,"implemented":true,"kind":"function","modifiers":[],"name":"_burnBatch","nameLocation":"12793:10:8","nodeType":"FunctionDefinition","parameters":{"id":1742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1735,"mutability":"mutable","name":"from","nameLocation":"12812:4:8","nodeType":"VariableDeclaration","scope":1771,"src":"12804:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1734,"name":"address","nodeType":"ElementaryTypeName","src":"12804:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1738,"mutability":"mutable","name":"ids","nameLocation":"12835:3:8","nodeType":"VariableDeclaration","scope":1771,"src":"12818:20:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1736,"name":"uint256","nodeType":"ElementaryTypeName","src":"12818:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1737,"nodeType":"ArrayTypeName","src":"12818:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1741,"mutability":"mutable","name":"values","nameLocation":"12857:6:8","nodeType":"VariableDeclaration","scope":1771,"src":"12840:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1739,"name":"uint256","nodeType":"ElementaryTypeName","src":"12840:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1740,"nodeType":"ArrayTypeName","src":"12840:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12803:61:8"},"returnParameters":{"id":1743,"nodeType":"ParameterList","parameters":[],"src":"12874:0:8"},"scope":1966,"src":"12784:265:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1810,"nodeType":"Block","src":"13361:222:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1781,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1776,"src":"13375:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13395:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1783,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13387:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1782,"name":"address","nodeType":"ElementaryTypeName","src":"13387:7:8","typeDescriptions":{}}},"id":1785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13387:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13375:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1795,"nodeType":"IfStatement","src":"13371:94:8","trueBody":{"id":1794,"nodeType":"Block","src":"13399:66:8","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13451:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1789,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13443:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1788,"name":"address","nodeType":"ElementaryTypeName","src":"13443:7:8","typeDescriptions":{}}},"id":1791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13443:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1787,"name":"ERC1155InvalidOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"13420:22:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13420:34:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1793,"nodeType":"RevertStatement","src":"13413:41:8"}]}},{"expression":{"id":1802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1796,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":963,"src":"13474:18:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1799,"indexExpression":{"id":1797,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1774,"src":"13493:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13474:25:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1800,"indexExpression":{"id":1798,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1776,"src":"13500:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13474:35:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1801,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1778,"src":"13512:8:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13474:46:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1803,"nodeType":"ExpressionStatement","src":"13474:46:8"},{"eventCall":{"arguments":[{"id":1805,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1774,"src":"13550:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1806,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1776,"src":"13557:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1807,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1778,"src":"13567:8:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1804,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2010,"src":"13535:14:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13535:41:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1809,"nodeType":"EmitStatement","src":"13530:46:8"}]},"documentation":{"id":1772,"nodeType":"StructuredDocumentation","src":"13055:208:8","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event.\n Requirements:\n - `operator` cannot be the zero address."},"id":1811,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"13277:18:8","nodeType":"FunctionDefinition","parameters":{"id":1779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1774,"mutability":"mutable","name":"owner","nameLocation":"13304:5:8","nodeType":"VariableDeclaration","scope":1811,"src":"13296:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1773,"name":"address","nodeType":"ElementaryTypeName","src":"13296:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1776,"mutability":"mutable","name":"operator","nameLocation":"13319:8:8","nodeType":"VariableDeclaration","scope":1811,"src":"13311:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1775,"name":"address","nodeType":"ElementaryTypeName","src":"13311:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1778,"mutability":"mutable","name":"approved","nameLocation":"13334:8:8","nodeType":"VariableDeclaration","scope":1811,"src":"13329:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1777,"name":"bool","nodeType":"ElementaryTypeName","src":"13329:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13295:48:8"},"returnParameters":{"id":1780,"nodeType":"ParameterList","parameters":[],"src":"13361:0:8"},"scope":1966,"src":"13268:315:8","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1878,"nodeType":"Block","src":"13953:782:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1827,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"13967:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13970:4:8","memberName":"code","nodeType":"MemberAccess","src":"13967:7:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13975:6:8","memberName":"length","nodeType":"MemberAccess","src":"13967:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13984:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13967:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1877,"nodeType":"IfStatement","src":"13963:766:8","trueBody":{"id":1876,"nodeType":"Block","src":"13987:742:8","statements":[{"clauses":[{"block":{"id":1856,"nodeType":"Block","src":"14103:206:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1845,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1843,"src":"14125:8:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":1846,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"14137:16:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$2131_$","typeString":"type(contract IERC1155Receiver)"}},"id":1847,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14154:17:8","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":2112,"src":"14137:34:8","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC1155Receiver.onERC1155Received(address,address,uint256,uint256,bytes calldata) returns (bytes4)"}},"id":1848,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14172:8:8","memberName":"selector","nodeType":"MemberAccess","src":"14137:43:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"14125:55:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1855,"nodeType":"IfStatement","src":"14121:174:8","trueBody":{"id":1854,"nodeType":"Block","src":"14182:113:8","statements":[{"errorCall":{"arguments":[{"id":1851,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"14273:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1850,"name":"ERC1155InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":890,"src":"14250:22:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14250:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1853,"nodeType":"RevertStatement","src":"14243:33:8"}]}}]},"errorName":"","id":1857,"nodeType":"TryCatchClause","parameters":{"id":1844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1843,"mutability":"mutable","name":"response","nameLocation":"14093:8:8","nodeType":"VariableDeclaration","scope":1857,"src":"14086:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1842,"name":"bytes4","nodeType":"ElementaryTypeName","src":"14086:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"14085:17:8"},"src":"14077:232:8"},{"block":{"id":1873,"nodeType":"Block","src":"14338:381:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1861,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1859,"src":"14360:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14367:6:8","memberName":"length","nodeType":"MemberAccess","src":"14360:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14377:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14360:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1871,"nodeType":"Block","src":"14515:190:8","statements":[{"AST":{"nativeSrc":"14601:86:8","nodeType":"YulBlock","src":"14601:86:8","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"14638:2:8","nodeType":"YulLiteral","src":"14638:2:8","type":"","value":"32"},{"name":"reason","nativeSrc":"14642:6:8","nodeType":"YulIdentifier","src":"14642:6:8"}],"functionName":{"name":"add","nativeSrc":"14634:3:8","nodeType":"YulIdentifier","src":"14634:3:8"},"nativeSrc":"14634:15:8","nodeType":"YulFunctionCall","src":"14634:15:8"},{"arguments":[{"name":"reason","nativeSrc":"14657:6:8","nodeType":"YulIdentifier","src":"14657:6:8"}],"functionName":{"name":"mload","nativeSrc":"14651:5:8","nodeType":"YulIdentifier","src":"14651:5:8"},"nativeSrc":"14651:13:8","nodeType":"YulFunctionCall","src":"14651:13:8"}],"functionName":{"name":"revert","nativeSrc":"14627:6:8","nodeType":"YulIdentifier","src":"14627:6:8"},"nativeSrc":"14627:38:8","nodeType":"YulFunctionCall","src":"14627:38:8"},"nativeSrc":"14627:38:8","nodeType":"YulExpressionStatement","src":"14627:38:8"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1859,"isOffset":false,"isSlot":false,"src":"14642:6:8","valueSize":1},{"declaration":1859,"isOffset":false,"isSlot":false,"src":"14657:6:8","valueSize":1}],"id":1870,"nodeType":"InlineAssembly","src":"14592:95:8"}]},"id":1872,"nodeType":"IfStatement","src":"14356:349:8","trueBody":{"id":1869,"nodeType":"Block","src":"14380:129:8","statements":[{"errorCall":{"arguments":[{"id":1866,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"14487:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1865,"name":"ERC1155InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":890,"src":"14464:22:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14464:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1868,"nodeType":"RevertStatement","src":"14457:33:8"}]}}]},"errorName":"","id":1874,"nodeType":"TryCatchClause","parameters":{"id":1860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1859,"mutability":"mutable","name":"reason","nameLocation":"14330:6:8","nodeType":"VariableDeclaration","scope":1874,"src":"14317:19:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1858,"name":"bytes","nodeType":"ElementaryTypeName","src":"14317:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14316:21:8"},"src":"14310:409:8"}],"externalCall":{"arguments":[{"id":1836,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1814,"src":"14044:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1837,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1816,"src":"14054:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1838,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"14060:2:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1839,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1822,"src":"14064:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1840,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"14071:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1833,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"14022:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1832,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"14005:16:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$2131_$","typeString":"type(contract IERC1155Receiver)"}},"id":1834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14005:20:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Receiver_$2131","typeString":"contract IERC1155Receiver"}},"id":1835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14026:17:8","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":2112,"src":"14005:38:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,uint256,bytes memory) external returns (bytes4)"}},"id":1841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14005:71:8","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1875,"nodeType":"TryStatement","src":"14001:718:8"}]}}]},"documentation":{"id":1812,"nodeType":"StructuredDocumentation","src":"13589:167:8","text":" @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\n if it contains code at the moment of execution."},"id":1879,"implemented":true,"kind":"function","modifiers":[],"name":"_doSafeTransferAcceptanceCheck","nameLocation":"13770:30:8","nodeType":"FunctionDefinition","parameters":{"id":1825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1814,"mutability":"mutable","name":"operator","nameLocation":"13818:8:8","nodeType":"VariableDeclaration","scope":1879,"src":"13810:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1813,"name":"address","nodeType":"ElementaryTypeName","src":"13810:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1816,"mutability":"mutable","name":"from","nameLocation":"13844:4:8","nodeType":"VariableDeclaration","scope":1879,"src":"13836:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1815,"name":"address","nodeType":"ElementaryTypeName","src":"13836:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1818,"mutability":"mutable","name":"to","nameLocation":"13866:2:8","nodeType":"VariableDeclaration","scope":1879,"src":"13858:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1817,"name":"address","nodeType":"ElementaryTypeName","src":"13858:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1820,"mutability":"mutable","name":"id","nameLocation":"13886:2:8","nodeType":"VariableDeclaration","scope":1879,"src":"13878:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1819,"name":"uint256","nodeType":"ElementaryTypeName","src":"13878:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1822,"mutability":"mutable","name":"value","nameLocation":"13906:5:8","nodeType":"VariableDeclaration","scope":1879,"src":"13898:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1821,"name":"uint256","nodeType":"ElementaryTypeName","src":"13898:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1824,"mutability":"mutable","name":"data","nameLocation":"13934:4:8","nodeType":"VariableDeclaration","scope":1879,"src":"13921:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1823,"name":"bytes","nodeType":"ElementaryTypeName","src":"13921:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13800:144:8"},"returnParameters":{"id":1826,"nodeType":"ParameterList","parameters":[],"src":"13953:0:8"},"scope":1966,"src":"13761:974:8","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1948,"nodeType":"Block","src":"15140:824:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1897,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"15154:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15157:4:8","memberName":"code","nodeType":"MemberAccess","src":"15154:7:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15162:6:8","memberName":"length","nodeType":"MemberAccess","src":"15154:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15171:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15154:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1947,"nodeType":"IfStatement","src":"15150:808:8","trueBody":{"id":1946,"nodeType":"Block","src":"15174:784:8","statements":[{"clauses":[{"block":{"id":1926,"nodeType":"Block","src":"15327:211:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1915,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"15349:8:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":1916,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"15361:16:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$2131_$","typeString":"type(contract IERC1155Receiver)"}},"id":1917,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15378:22:8","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":2130,"src":"15361:39:8","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC1155Receiver.onERC1155BatchReceived(address,address,uint256[] calldata,uint256[] calldata,bytes calldata) returns (bytes4)"}},"id":1918,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15401:8:8","memberName":"selector","nodeType":"MemberAccess","src":"15361:48:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"15349:60:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1925,"nodeType":"IfStatement","src":"15345:179:8","trueBody":{"id":1924,"nodeType":"Block","src":"15411:113:8","statements":[{"errorCall":{"arguments":[{"id":1921,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"15502:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1920,"name":"ERC1155InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":890,"src":"15479:22:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15479:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1923,"nodeType":"RevertStatement","src":"15472:33:8"}]}}]},"errorName":"","id":1927,"nodeType":"TryCatchClause","parameters":{"id":1914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1913,"mutability":"mutable","name":"response","nameLocation":"15304:8:8","nodeType":"VariableDeclaration","scope":1927,"src":"15297:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1912,"name":"bytes4","nodeType":"ElementaryTypeName","src":"15297:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"15279:47:8"},"src":"15271:267:8"},{"block":{"id":1943,"nodeType":"Block","src":"15567:381:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1931,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"15589:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15596:6:8","memberName":"length","nodeType":"MemberAccess","src":"15589:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15606:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15589:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1941,"nodeType":"Block","src":"15744:190:8","statements":[{"AST":{"nativeSrc":"15830:86:8","nodeType":"YulBlock","src":"15830:86:8","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"15867:2:8","nodeType":"YulLiteral","src":"15867:2:8","type":"","value":"32"},{"name":"reason","nativeSrc":"15871:6:8","nodeType":"YulIdentifier","src":"15871:6:8"}],"functionName":{"name":"add","nativeSrc":"15863:3:8","nodeType":"YulIdentifier","src":"15863:3:8"},"nativeSrc":"15863:15:8","nodeType":"YulFunctionCall","src":"15863:15:8"},{"arguments":[{"name":"reason","nativeSrc":"15886:6:8","nodeType":"YulIdentifier","src":"15886:6:8"}],"functionName":{"name":"mload","nativeSrc":"15880:5:8","nodeType":"YulIdentifier","src":"15880:5:8"},"nativeSrc":"15880:13:8","nodeType":"YulFunctionCall","src":"15880:13:8"}],"functionName":{"name":"revert","nativeSrc":"15856:6:8","nodeType":"YulIdentifier","src":"15856:6:8"},"nativeSrc":"15856:38:8","nodeType":"YulFunctionCall","src":"15856:38:8"},"nativeSrc":"15856:38:8","nodeType":"YulExpressionStatement","src":"15856:38:8"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1929,"isOffset":false,"isSlot":false,"src":"15871:6:8","valueSize":1},{"declaration":1929,"isOffset":false,"isSlot":false,"src":"15886:6:8","valueSize":1}],"id":1940,"nodeType":"InlineAssembly","src":"15821:95:8"}]},"id":1942,"nodeType":"IfStatement","src":"15585:349:8","trueBody":{"id":1939,"nodeType":"Block","src":"15609:129:8","statements":[{"errorCall":{"arguments":[{"id":1936,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"15716:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1935,"name":"ERC1155InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":890,"src":"15693:22:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15693:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1938,"nodeType":"RevertStatement","src":"15686:33:8"}]}}]},"errorName":"","id":1944,"nodeType":"TryCatchClause","parameters":{"id":1930,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1929,"mutability":"mutable","name":"reason","nameLocation":"15559:6:8","nodeType":"VariableDeclaration","scope":1944,"src":"15546:19:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1928,"name":"bytes","nodeType":"ElementaryTypeName","src":"15546:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15545:21:8"},"src":"15539:409:8"}],"externalCall":{"arguments":[{"id":1906,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1882,"src":"15236:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1907,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1884,"src":"15246:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1908,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"15252:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1909,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"15257:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1910,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1894,"src":"15265:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1903,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"15209:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1902,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"15192:16:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$2131_$","typeString":"type(contract IERC1155Receiver)"}},"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15192:20:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Receiver_$2131","typeString":"contract IERC1155Receiver"}},"id":1905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15213:22:8","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":2130,"src":"15192:43:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory) external returns (bytes4)"}},"id":1911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15192:78:8","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1945,"nodeType":"TryStatement","src":"15188:760:8"}]}}]},"documentation":{"id":1880,"nodeType":"StructuredDocumentation","src":"14741:177:8","text":" @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\n if it contains code at the moment of execution."},"id":1949,"implemented":true,"kind":"function","modifiers":[],"name":"_doSafeBatchTransferAcceptanceCheck","nameLocation":"14932:35:8","nodeType":"FunctionDefinition","parameters":{"id":1895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1882,"mutability":"mutable","name":"operator","nameLocation":"14985:8:8","nodeType":"VariableDeclaration","scope":1949,"src":"14977:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1881,"name":"address","nodeType":"ElementaryTypeName","src":"14977:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1884,"mutability":"mutable","name":"from","nameLocation":"15011:4:8","nodeType":"VariableDeclaration","scope":1949,"src":"15003:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1883,"name":"address","nodeType":"ElementaryTypeName","src":"15003:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1886,"mutability":"mutable","name":"to","nameLocation":"15033:2:8","nodeType":"VariableDeclaration","scope":1949,"src":"15025:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1885,"name":"address","nodeType":"ElementaryTypeName","src":"15025:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1889,"mutability":"mutable","name":"ids","nameLocation":"15062:3:8","nodeType":"VariableDeclaration","scope":1949,"src":"15045:20:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1887,"name":"uint256","nodeType":"ElementaryTypeName","src":"15045:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1888,"nodeType":"ArrayTypeName","src":"15045:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1892,"mutability":"mutable","name":"values","nameLocation":"15092:6:8","nodeType":"VariableDeclaration","scope":1949,"src":"15075:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1890,"name":"uint256","nodeType":"ElementaryTypeName","src":"15075:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1891,"nodeType":"ArrayTypeName","src":"15075:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1894,"mutability":"mutable","name":"data","nameLocation":"15121:4:8","nodeType":"VariableDeclaration","scope":1949,"src":"15108:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1893,"name":"bytes","nodeType":"ElementaryTypeName","src":"15108:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14967:164:8"},"returnParameters":{"id":1896,"nodeType":"ParameterList","parameters":[],"src":"15140:0:8"},"scope":1966,"src":"14923:1041:8","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1964,"nodeType":"Block","src":"16238:691:8","statements":[{"AST":{"nativeSrc":"16300:623:8","nodeType":"YulBlock","src":"16300:623:8","statements":[{"nativeSrc":"16358:21:8","nodeType":"YulAssignment","src":"16358:21:8","value":{"arguments":[{"kind":"number","nativeSrc":"16374:4:8","nodeType":"YulLiteral","src":"16374:4:8","type":"","value":"0x40"}],"functionName":{"name":"mload","nativeSrc":"16368:5:8","nodeType":"YulIdentifier","src":"16368:5:8"},"nativeSrc":"16368:11:8","nodeType":"YulFunctionCall","src":"16368:11:8"},"variableNames":[{"name":"array1","nativeSrc":"16358:6:8","nodeType":"YulIdentifier","src":"16358:6:8"}]},{"expression":{"arguments":[{"name":"array1","nativeSrc":"16436:6:8","nodeType":"YulIdentifier","src":"16436:6:8"},{"kind":"number","nativeSrc":"16444:1:8","nodeType":"YulLiteral","src":"16444:1:8","type":"","value":"1"}],"functionName":{"name":"mstore","nativeSrc":"16429:6:8","nodeType":"YulIdentifier","src":"16429:6:8"},"nativeSrc":"16429:17:8","nodeType":"YulFunctionCall","src":"16429:17:8"},"nativeSrc":"16429:17:8","nodeType":"YulExpressionStatement","src":"16429:17:8"},{"expression":{"arguments":[{"arguments":[{"name":"array1","nativeSrc":"16567:6:8","nodeType":"YulIdentifier","src":"16567:6:8"},{"kind":"number","nativeSrc":"16575:4:8","nodeType":"YulLiteral","src":"16575:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"16563:3:8","nodeType":"YulIdentifier","src":"16563:3:8"},"nativeSrc":"16563:17:8","nodeType":"YulFunctionCall","src":"16563:17:8"},{"name":"element1","nativeSrc":"16582:8:8","nodeType":"YulIdentifier","src":"16582:8:8"}],"functionName":{"name":"mstore","nativeSrc":"16556:6:8","nodeType":"YulIdentifier","src":"16556:6:8"},"nativeSrc":"16556:35:8","nodeType":"YulFunctionCall","src":"16556:35:8"},"nativeSrc":"16556:35:8","nodeType":"YulExpressionStatement","src":"16556:35:8"},{"nativeSrc":"16682:27:8","nodeType":"YulAssignment","src":"16682:27:8","value":{"arguments":[{"name":"array1","nativeSrc":"16696:6:8","nodeType":"YulIdentifier","src":"16696:6:8"},{"kind":"number","nativeSrc":"16704:4:8","nodeType":"YulLiteral","src":"16704:4:8","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"16692:3:8","nodeType":"YulIdentifier","src":"16692:3:8"},"nativeSrc":"16692:17:8","nodeType":"YulFunctionCall","src":"16692:17:8"},"variableNames":[{"name":"array2","nativeSrc":"16682:6:8","nodeType":"YulIdentifier","src":"16682:6:8"}]},{"expression":{"arguments":[{"name":"array2","nativeSrc":"16729:6:8","nodeType":"YulIdentifier","src":"16729:6:8"},{"kind":"number","nativeSrc":"16737:1:8","nodeType":"YulLiteral","src":"16737:1:8","type":"","value":"1"}],"functionName":{"name":"mstore","nativeSrc":"16722:6:8","nodeType":"YulIdentifier","src":"16722:6:8"},"nativeSrc":"16722:17:8","nodeType":"YulFunctionCall","src":"16722:17:8"},"nativeSrc":"16722:17:8","nodeType":"YulExpressionStatement","src":"16722:17:8"},{"expression":{"arguments":[{"arguments":[{"name":"array2","nativeSrc":"16763:6:8","nodeType":"YulIdentifier","src":"16763:6:8"},{"kind":"number","nativeSrc":"16771:4:8","nodeType":"YulLiteral","src":"16771:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"16759:3:8","nodeType":"YulIdentifier","src":"16759:3:8"},"nativeSrc":"16759:17:8","nodeType":"YulFunctionCall","src":"16759:17:8"},{"name":"element2","nativeSrc":"16778:8:8","nodeType":"YulIdentifier","src":"16778:8:8"}],"functionName":{"name":"mstore","nativeSrc":"16752:6:8","nodeType":"YulIdentifier","src":"16752:6:8"},"nativeSrc":"16752:35:8","nodeType":"YulFunctionCall","src":"16752:35:8"},"nativeSrc":"16752:35:8","nodeType":"YulExpressionStatement","src":"16752:35:8"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"16889:4:8","nodeType":"YulLiteral","src":"16889:4:8","type":"","value":"0x40"},{"arguments":[{"name":"array2","nativeSrc":"16899:6:8","nodeType":"YulIdentifier","src":"16899:6:8"},{"kind":"number","nativeSrc":"16907:4:8","nodeType":"YulLiteral","src":"16907:4:8","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"16895:3:8","nodeType":"YulIdentifier","src":"16895:3:8"},"nativeSrc":"16895:17:8","nodeType":"YulFunctionCall","src":"16895:17:8"}],"functionName":{"name":"mstore","nativeSrc":"16882:6:8","nodeType":"YulIdentifier","src":"16882:6:8"},"nativeSrc":"16882:31:8","nodeType":"YulFunctionCall","src":"16882:31:8"},"nativeSrc":"16882:31:8","nodeType":"YulExpressionStatement","src":"16882:31:8"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1958,"isOffset":false,"isSlot":false,"src":"16358:6:8","valueSize":1},{"declaration":1958,"isOffset":false,"isSlot":false,"src":"16436:6:8","valueSize":1},{"declaration":1958,"isOffset":false,"isSlot":false,"src":"16567:6:8","valueSize":1},{"declaration":1958,"isOffset":false,"isSlot":false,"src":"16696:6:8","valueSize":1},{"declaration":1961,"isOffset":false,"isSlot":false,"src":"16682:6:8","valueSize":1},{"declaration":1961,"isOffset":false,"isSlot":false,"src":"16729:6:8","valueSize":1},{"declaration":1961,"isOffset":false,"isSlot":false,"src":"16763:6:8","valueSize":1},{"declaration":1961,"isOffset":false,"isSlot":false,"src":"16899:6:8","valueSize":1},{"declaration":1952,"isOffset":false,"isSlot":false,"src":"16582:8:8","valueSize":1},{"declaration":1954,"isOffset":false,"isSlot":false,"src":"16778:8:8","valueSize":1}],"id":1963,"nodeType":"InlineAssembly","src":"16291:632:8"}]},"documentation":{"id":1950,"nodeType":"StructuredDocumentation","src":"15970:105:8","text":" @dev Creates an array in memory with only one value for each of the elements provided."},"id":1965,"implemented":true,"kind":"function","modifiers":[],"name":"_asSingletonArrays","nameLocation":"16089:18:8","nodeType":"FunctionDefinition","parameters":{"id":1955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1952,"mutability":"mutable","name":"element1","nameLocation":"16125:8:8","nodeType":"VariableDeclaration","scope":1965,"src":"16117:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1951,"name":"uint256","nodeType":"ElementaryTypeName","src":"16117:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1954,"mutability":"mutable","name":"element2","nameLocation":"16151:8:8","nodeType":"VariableDeclaration","scope":1965,"src":"16143:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1953,"name":"uint256","nodeType":"ElementaryTypeName","src":"16143:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16107:58:8"},"returnParameters":{"id":1962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1958,"mutability":"mutable","name":"array1","nameLocation":"16205:6:8","nodeType":"VariableDeclaration","scope":1965,"src":"16188:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1956,"name":"uint256","nodeType":"ElementaryTypeName","src":"16188:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1957,"nodeType":"ArrayTypeName","src":"16188:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1961,"mutability":"mutable","name":"array2","nameLocation":"16230:6:8","nodeType":"VariableDeclaration","scope":1965,"src":"16213:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1959,"name":"uint256","nodeType":"ElementaryTypeName","src":"16213:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1960,"nodeType":"ArrayTypeName","src":"16213:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"16187:50:8"},"scope":1966,"src":"16080:849:8","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1967,"src":"727:16204:8","usedErrors":[880,885,890,897,902,907,914],"usedEvents":[1986,2001,2010,2017]}],"src":"109:16823:8"},"id":8},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","exportedSymbols":{"IERC1155":[2089],"IERC165":[2820]},"id":2090,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1968,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"110:24:9"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1970,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2090,"sourceUnit":2821,"src":"136:62:9","symbolAliases":[{"foreign":{"id":1969,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"144:7:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1972,"name":"IERC165","nameLocations":["358:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":2820,"src":"358:7:9"},"id":1973,"nodeType":"InheritanceSpecifier","src":"358:7:9"}],"canonicalName":"IERC1155","contractDependencies":[],"contractKind":"interface","documentation":{"id":1971,"nodeType":"StructuredDocumentation","src":"200:135:9","text":" @dev Required interface of an ERC1155 compliant contract, as defined in the\n https://eips.ethereum.org/EIPS/eip-1155[EIP]."},"fullyImplemented":false,"id":2089,"linearizedBaseContracts":[2089,2820],"name":"IERC1155","nameLocation":"346:8:9","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1974,"nodeType":"StructuredDocumentation","src":"372:125:9","text":" @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."},"eventSelector":"c3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62","id":1986,"name":"TransferSingle","nameLocation":"508:14:9","nodeType":"EventDefinition","parameters":{"id":1985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1976,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"539:8:9","nodeType":"VariableDeclaration","scope":1986,"src":"523:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1975,"name":"address","nodeType":"ElementaryTypeName","src":"523:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1978,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"565:4:9","nodeType":"VariableDeclaration","scope":1986,"src":"549:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1977,"name":"address","nodeType":"ElementaryTypeName","src":"549:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1980,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"587:2:9","nodeType":"VariableDeclaration","scope":1986,"src":"571:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1979,"name":"address","nodeType":"ElementaryTypeName","src":"571:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1982,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"599:2:9","nodeType":"VariableDeclaration","scope":1986,"src":"591:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1981,"name":"uint256","nodeType":"ElementaryTypeName","src":"591:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1984,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"611:5:9","nodeType":"VariableDeclaration","scope":1986,"src":"603:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1983,"name":"uint256","nodeType":"ElementaryTypeName","src":"603:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"522:95:9"},"src":"502:116:9"},{"anonymous":false,"documentation":{"id":1987,"nodeType":"StructuredDocumentation","src":"624:144:9","text":" @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n transfers."},"eventSelector":"4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb","id":2001,"name":"TransferBatch","nameLocation":"779:13:9","nodeType":"EventDefinition","parameters":{"id":2000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1989,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"818:8:9","nodeType":"VariableDeclaration","scope":2001,"src":"802:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1988,"name":"address","nodeType":"ElementaryTypeName","src":"802:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1991,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"852:4:9","nodeType":"VariableDeclaration","scope":2001,"src":"836:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1990,"name":"address","nodeType":"ElementaryTypeName","src":"836:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1993,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"882:2:9","nodeType":"VariableDeclaration","scope":2001,"src":"866:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1992,"name":"address","nodeType":"ElementaryTypeName","src":"866:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1996,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"904:3:9","nodeType":"VariableDeclaration","scope":2001,"src":"894:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1994,"name":"uint256","nodeType":"ElementaryTypeName","src":"894:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1995,"nodeType":"ArrayTypeName","src":"894:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1999,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"927:6:9","nodeType":"VariableDeclaration","scope":2001,"src":"917:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1997,"name":"uint256","nodeType":"ElementaryTypeName","src":"917:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1998,"nodeType":"ArrayTypeName","src":"917:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"792:147:9"},"src":"773:167:9"},{"anonymous":false,"documentation":{"id":2002,"nodeType":"StructuredDocumentation","src":"946:147:9","text":" @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n `approved`."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":2010,"name":"ApprovalForAll","nameLocation":"1104:14:9","nodeType":"EventDefinition","parameters":{"id":2009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2004,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1135:7:9","nodeType":"VariableDeclaration","scope":2010,"src":"1119:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2003,"name":"address","nodeType":"ElementaryTypeName","src":"1119:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2006,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1160:8:9","nodeType":"VariableDeclaration","scope":2010,"src":"1144:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2005,"name":"address","nodeType":"ElementaryTypeName","src":"1144:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2008,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"1175:8:9","nodeType":"VariableDeclaration","scope":2010,"src":"1170:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2007,"name":"bool","nodeType":"ElementaryTypeName","src":"1170:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1118:66:9"},"src":"1098:87:9"},{"anonymous":false,"documentation":{"id":2011,"nodeType":"StructuredDocumentation","src":"1191:343:9","text":" @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n If an {URI} event was emitted for `id`, the standard\n https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n returned by {IERC1155MetadataURI-uri}."},"eventSelector":"6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b","id":2017,"name":"URI","nameLocation":"1545:3:9","nodeType":"EventDefinition","parameters":{"id":2016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2013,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1556:5:9","nodeType":"VariableDeclaration","scope":2017,"src":"1549:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2012,"name":"string","nodeType":"ElementaryTypeName","src":"1549:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2015,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"1579:2:9","nodeType":"VariableDeclaration","scope":2017,"src":"1563:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2014,"name":"uint256","nodeType":"ElementaryTypeName","src":"1563:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1548:34:9"},"src":"1539:44:9"},{"documentation":{"id":2018,"nodeType":"StructuredDocumentation","src":"1589:172:9","text":" @dev Returns the value of tokens of token type `id` owned by `account`.\n Requirements:\n - `account` cannot be the zero address."},"functionSelector":"00fdd58e","id":2027,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1775:9:9","nodeType":"FunctionDefinition","parameters":{"id":2023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2020,"mutability":"mutable","name":"account","nameLocation":"1793:7:9","nodeType":"VariableDeclaration","scope":2027,"src":"1785:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2019,"name":"address","nodeType":"ElementaryTypeName","src":"1785:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2022,"mutability":"mutable","name":"id","nameLocation":"1810:2:9","nodeType":"VariableDeclaration","scope":2027,"src":"1802:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2021,"name":"uint256","nodeType":"ElementaryTypeName","src":"1802:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1784:29:9"},"returnParameters":{"id":2026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2025,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2027,"src":"1837:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2024,"name":"uint256","nodeType":"ElementaryTypeName","src":"1837:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1836:9:9"},"scope":2089,"src":"1766:80:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2028,"nodeType":"StructuredDocumentation","src":"1852:188:9","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n Requirements:\n - `accounts` and `ids` must have the same length."},"functionSelector":"4e1273f4","id":2040,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"2054:14:9","nodeType":"FunctionDefinition","parameters":{"id":2035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2031,"mutability":"mutable","name":"accounts","nameLocation":"2097:8:9","nodeType":"VariableDeclaration","scope":2040,"src":"2078:27:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2029,"name":"address","nodeType":"ElementaryTypeName","src":"2078:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2030,"nodeType":"ArrayTypeName","src":"2078:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2034,"mutability":"mutable","name":"ids","nameLocation":"2134:3:9","nodeType":"VariableDeclaration","scope":2040,"src":"2115:22:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2032,"name":"uint256","nodeType":"ElementaryTypeName","src":"2115:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2033,"nodeType":"ArrayTypeName","src":"2115:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2068:75:9"},"returnParameters":{"id":2039,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2038,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2040,"src":"2167:16:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2036,"name":"uint256","nodeType":"ElementaryTypeName","src":"2167:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2037,"nodeType":"ArrayTypeName","src":"2167:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2166:18:9"},"scope":2089,"src":"2045:140:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2041,"nodeType":"StructuredDocumentation","src":"2191:248:9","text":" @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n Emits an {ApprovalForAll} event.\n Requirements:\n - `operator` cannot be the caller."},"functionSelector":"a22cb465","id":2048,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"2453:17:9","nodeType":"FunctionDefinition","parameters":{"id":2046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2043,"mutability":"mutable","name":"operator","nameLocation":"2479:8:9","nodeType":"VariableDeclaration","scope":2048,"src":"2471:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2042,"name":"address","nodeType":"ElementaryTypeName","src":"2471:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2045,"mutability":"mutable","name":"approved","nameLocation":"2494:8:9","nodeType":"VariableDeclaration","scope":2048,"src":"2489:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2044,"name":"bool","nodeType":"ElementaryTypeName","src":"2489:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2470:33:9"},"returnParameters":{"id":2047,"nodeType":"ParameterList","parameters":[],"src":"2512:0:9"},"scope":2089,"src":"2444:69:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2049,"nodeType":"StructuredDocumentation","src":"2519:135:9","text":" @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n See {setApprovalForAll}."},"functionSelector":"e985e9c5","id":2058,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"2668:16:9","nodeType":"FunctionDefinition","parameters":{"id":2054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2051,"mutability":"mutable","name":"account","nameLocation":"2693:7:9","nodeType":"VariableDeclaration","scope":2058,"src":"2685:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2050,"name":"address","nodeType":"ElementaryTypeName","src":"2685:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2053,"mutability":"mutable","name":"operator","nameLocation":"2710:8:9","nodeType":"VariableDeclaration","scope":2058,"src":"2702:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2052,"name":"address","nodeType":"ElementaryTypeName","src":"2702:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2684:35:9"},"returnParameters":{"id":2057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2056,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2058,"src":"2743:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2055,"name":"bool","nodeType":"ElementaryTypeName","src":"2743:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2742:6:9"},"scope":2089,"src":"2659:90:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2059,"nodeType":"StructuredDocumentation","src":"2755:910:9","text":" @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\n WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n to an untrusted contract, when invoking {onERC1155Received} on the receiver.\n Ensure to follow the checks-effects-interactions pattern and consider employing\n reentrancy guards when interacting with untrusted contracts.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n - `from` must have a balance of tokens of type `id` of at least `value` amount.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"functionSelector":"f242432a","id":2072,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3679:16:9","nodeType":"FunctionDefinition","parameters":{"id":2070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2061,"mutability":"mutable","name":"from","nameLocation":"3704:4:9","nodeType":"VariableDeclaration","scope":2072,"src":"3696:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2060,"name":"address","nodeType":"ElementaryTypeName","src":"3696:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2063,"mutability":"mutable","name":"to","nameLocation":"3718:2:9","nodeType":"VariableDeclaration","scope":2072,"src":"3710:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2062,"name":"address","nodeType":"ElementaryTypeName","src":"3710:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2065,"mutability":"mutable","name":"id","nameLocation":"3730:2:9","nodeType":"VariableDeclaration","scope":2072,"src":"3722:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2064,"name":"uint256","nodeType":"ElementaryTypeName","src":"3722:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2067,"mutability":"mutable","name":"value","nameLocation":"3742:5:9","nodeType":"VariableDeclaration","scope":2072,"src":"3734:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2066,"name":"uint256","nodeType":"ElementaryTypeName","src":"3734:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2069,"mutability":"mutable","name":"data","nameLocation":"3764:4:9","nodeType":"VariableDeclaration","scope":2072,"src":"3749:19:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2068,"name":"bytes","nodeType":"ElementaryTypeName","src":"3749:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3695:74:9"},"returnParameters":{"id":2071,"nodeType":"ParameterList","parameters":[],"src":"3778:0:9"},"scope":2089,"src":"3670:109:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2073,"nodeType":"StructuredDocumentation","src":"3785:814:9","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\n Ensure to follow the checks-effects-interactions pattern and consider employing\n reentrancy guards when interacting with untrusted contracts.\n Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\n Requirements:\n - `ids` and `values` must have the same length.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"functionSelector":"2eb2c2d6","id":2088,"implemented":false,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"4613:21:9","nodeType":"FunctionDefinition","parameters":{"id":2086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2075,"mutability":"mutable","name":"from","nameLocation":"4652:4:9","nodeType":"VariableDeclaration","scope":2088,"src":"4644:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2074,"name":"address","nodeType":"ElementaryTypeName","src":"4644:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2077,"mutability":"mutable","name":"to","nameLocation":"4674:2:9","nodeType":"VariableDeclaration","scope":2088,"src":"4666:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2076,"name":"address","nodeType":"ElementaryTypeName","src":"4666:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2080,"mutability":"mutable","name":"ids","nameLocation":"4705:3:9","nodeType":"VariableDeclaration","scope":2088,"src":"4686:22:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2078,"name":"uint256","nodeType":"ElementaryTypeName","src":"4686:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2079,"nodeType":"ArrayTypeName","src":"4686:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2083,"mutability":"mutable","name":"values","nameLocation":"4737:6:9","nodeType":"VariableDeclaration","scope":2088,"src":"4718:25:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2081,"name":"uint256","nodeType":"ElementaryTypeName","src":"4718:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2082,"nodeType":"ArrayTypeName","src":"4718:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2085,"mutability":"mutable","name":"data","nameLocation":"4768:4:9","nodeType":"VariableDeclaration","scope":2088,"src":"4753:19:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2084,"name":"bytes","nodeType":"ElementaryTypeName","src":"4753:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4634:144:9"},"returnParameters":{"id":2087,"nodeType":"ParameterList","parameters":[],"src":"4787:0:9"},"scope":2089,"src":"4604:184:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2090,"src":"336:4454:9","usedErrors":[],"usedEvents":[1986,2001,2010,2017]}],"src":"110:4681:9"},"id":9},"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol","exportedSymbols":{"IERC1155Receiver":[2131],"IERC165":[2820]},"id":2132,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2091,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"118:24:10"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":2093,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2132,"sourceUnit":2821,"src":"144:62:10","symbolAliases":[{"foreign":{"id":2092,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"152:7:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2095,"name":"IERC165","nameLocations":["357:7:10"],"nodeType":"IdentifierPath","referencedDeclaration":2820,"src":"357:7:10"},"id":2096,"nodeType":"InheritanceSpecifier","src":"357:7:10"}],"canonicalName":"IERC1155Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":2094,"nodeType":"StructuredDocumentation","src":"208:118:10","text":" @dev Interface that must be implemented by smart contracts in order to receive\n ERC-1155 token transfers."},"fullyImplemented":false,"id":2131,"linearizedBaseContracts":[2131,2820],"name":"IERC1155Receiver","nameLocation":"337:16:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2097,"nodeType":"StructuredDocumentation","src":"371:826:10","text":" @dev Handles the receipt of a single ERC1155 token type. This function is\n called at the end of a `safeTransferFrom` after the balance has been updated.\n NOTE: To accept the transfer, this must return\n `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n (i.e. 0xf23a6e61, or its own function selector).\n @param operator The address which initiated the transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param id The ID of the token being transferred\n @param value The amount of tokens being transferred\n @param data Additional data with no specified format\n @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"},"functionSelector":"f23a6e61","id":2112,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"1211:17:10","nodeType":"FunctionDefinition","parameters":{"id":2108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2099,"mutability":"mutable","name":"operator","nameLocation":"1246:8:10","nodeType":"VariableDeclaration","scope":2112,"src":"1238:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2098,"name":"address","nodeType":"ElementaryTypeName","src":"1238:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2101,"mutability":"mutable","name":"from","nameLocation":"1272:4:10","nodeType":"VariableDeclaration","scope":2112,"src":"1264:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2100,"name":"address","nodeType":"ElementaryTypeName","src":"1264:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2103,"mutability":"mutable","name":"id","nameLocation":"1294:2:10","nodeType":"VariableDeclaration","scope":2112,"src":"1286:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2102,"name":"uint256","nodeType":"ElementaryTypeName","src":"1286:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2105,"mutability":"mutable","name":"value","nameLocation":"1314:5:10","nodeType":"VariableDeclaration","scope":2112,"src":"1306:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2104,"name":"uint256","nodeType":"ElementaryTypeName","src":"1306:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2107,"mutability":"mutable","name":"data","nameLocation":"1344:4:10","nodeType":"VariableDeclaration","scope":2112,"src":"1329:19:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2106,"name":"bytes","nodeType":"ElementaryTypeName","src":"1329:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1228:126:10"},"returnParameters":{"id":2111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2110,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2112,"src":"1373:6:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2109,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1373:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1372:8:10"},"scope":2131,"src":"1202:179:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2113,"nodeType":"StructuredDocumentation","src":"1387:994:10","text":" @dev Handles the receipt of a multiple ERC1155 token types. This function\n is called at the end of a `safeBatchTransferFrom` after the balances have\n been updated.\n NOTE: To accept the transfer(s), this must return\n `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n (i.e. 0xbc197c81, or its own function selector).\n @param operator The address which initiated the batch transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param ids An array containing ids of each token being transferred (order and length must match values array)\n @param values An array containing amounts of each token being transferred (order and length must match ids array)\n @param data Additional data with no specified format\n @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"},"functionSelector":"bc197c81","id":2130,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"2395:22:10","nodeType":"FunctionDefinition","parameters":{"id":2126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2115,"mutability":"mutable","name":"operator","nameLocation":"2435:8:10","nodeType":"VariableDeclaration","scope":2130,"src":"2427:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2114,"name":"address","nodeType":"ElementaryTypeName","src":"2427:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2117,"mutability":"mutable","name":"from","nameLocation":"2461:4:10","nodeType":"VariableDeclaration","scope":2130,"src":"2453:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2116,"name":"address","nodeType":"ElementaryTypeName","src":"2453:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2120,"mutability":"mutable","name":"ids","nameLocation":"2494:3:10","nodeType":"VariableDeclaration","scope":2130,"src":"2475:22:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2118,"name":"uint256","nodeType":"ElementaryTypeName","src":"2475:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2119,"nodeType":"ArrayTypeName","src":"2475:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2123,"mutability":"mutable","name":"values","nameLocation":"2526:6:10","nodeType":"VariableDeclaration","scope":2130,"src":"2507:25:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2121,"name":"uint256","nodeType":"ElementaryTypeName","src":"2507:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2122,"nodeType":"ArrayTypeName","src":"2507:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2125,"mutability":"mutable","name":"data","nameLocation":"2557:4:10","nodeType":"VariableDeclaration","scope":2130,"src":"2542:19:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2124,"name":"bytes","nodeType":"ElementaryTypeName","src":"2542:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2417:150:10"},"returnParameters":{"id":2129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2128,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2130,"src":"2586:6:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2127,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2586:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2585:8:10"},"scope":2131,"src":"2386:208:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2132,"src":"327:2269:10","usedErrors":[],"usedEvents":[]}],"src":"118:2479:10"},"id":10},"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol","exportedSymbols":{"ERC1155":[1966],"ERC1155Burnable":[2211]},"id":2212,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2133,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"128:24:11"},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol","file":"../ERC1155.sol","id":2135,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2212,"sourceUnit":1967,"src":"154:39:11","symbolAliases":[{"foreign":{"id":2134,"name":"ERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"162:7:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2137,"name":"ERC1155","nameLocations":["380:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":1966,"src":"380:7:11"},"id":2138,"nodeType":"InheritanceSpecifier","src":"380:7:11"}],"canonicalName":"ERC1155Burnable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2136,"nodeType":"StructuredDocumentation","src":"195:147:11","text":" @dev Extension of {ERC1155} that allows token holders to destroy both their\n own tokens and those that they have been approved to use."},"fullyImplemented":true,"id":2211,"linearizedBaseContracts":[2211,1966,915,2266,2089,2808,2820,2557],"name":"ERC1155Burnable","nameLocation":"361:15:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":2172,"nodeType":"Block","src":"467:208:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2147,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"481:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2148,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"492:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"492:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"481:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":2156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"508:40:11","subExpression":{"arguments":[{"id":2152,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"526:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2153,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"535:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"535:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2151,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"509:16:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"509:39:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"481:67:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2165,"nodeType":"IfStatement","src":"477:156:11","trueBody":{"id":2164,"nodeType":"Block","src":"550:83:11","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2159,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"600:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"600:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2161,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"614:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2158,"name":"ERC1155MissingApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"571:28:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"571:51:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2163,"nodeType":"RevertStatement","src":"564:58:11"}]}},{"expression":{"arguments":[{"id":2167,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"649:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2168,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"658:2:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2169,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2144,"src":"662:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2166,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1732,"src":"643:5:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":2170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"643:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2171,"nodeType":"ExpressionStatement","src":"643:25:11"}]},"functionSelector":"f5298aca","id":2173,"implemented":true,"kind":"function","modifiers":[],"name":"burn","nameLocation":"403:4:11","nodeType":"FunctionDefinition","parameters":{"id":2145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2140,"mutability":"mutable","name":"account","nameLocation":"416:7:11","nodeType":"VariableDeclaration","scope":2173,"src":"408:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2139,"name":"address","nodeType":"ElementaryTypeName","src":"408:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2142,"mutability":"mutable","name":"id","nameLocation":"433:2:11","nodeType":"VariableDeclaration","scope":2173,"src":"425:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2141,"name":"uint256","nodeType":"ElementaryTypeName","src":"425:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2144,"mutability":"mutable","name":"value","nameLocation":"445:5:11","nodeType":"VariableDeclaration","scope":2173,"src":"437:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2143,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"407:44:11"},"returnParameters":{"id":2146,"nodeType":"ParameterList","parameters":[],"src":"467:0:11"},"scope":2211,"src":"394:281:11","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2209,"nodeType":"Block","src":"779:215:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2184,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2175,"src":"793:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2185,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"804:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"804:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"793:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":2193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"820:40:11","subExpression":{"arguments":[{"id":2189,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2175,"src":"838:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2190,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"847:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"847:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2188,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"821:16:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":2192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"821:39:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"793:67:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2202,"nodeType":"IfStatement","src":"789:156:11","trueBody":{"id":2201,"nodeType":"Block","src":"862:83:11","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2196,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"912:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"912:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2198,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2175,"src":"926:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2195,"name":"ERC1155MissingApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"883:28:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"883:51:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2200,"nodeType":"RevertStatement","src":"876:58:11"}]}},{"expression":{"arguments":[{"id":2204,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2175,"src":"966:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2205,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2178,"src":"975:3:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2206,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"980:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":2203,"name":"_burnBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"955:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory)"}},"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"955:32:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2208,"nodeType":"ExpressionStatement","src":"955:32:11"}]},"functionSelector":"6b20c454","id":2210,"implemented":true,"kind":"function","modifiers":[],"name":"burnBatch","nameLocation":"690:9:11","nodeType":"FunctionDefinition","parameters":{"id":2182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2175,"mutability":"mutable","name":"account","nameLocation":"708:7:11","nodeType":"VariableDeclaration","scope":2210,"src":"700:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2174,"name":"address","nodeType":"ElementaryTypeName","src":"700:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2178,"mutability":"mutable","name":"ids","nameLocation":"734:3:11","nodeType":"VariableDeclaration","scope":2210,"src":"717:20:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2176,"name":"uint256","nodeType":"ElementaryTypeName","src":"717:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2177,"nodeType":"ArrayTypeName","src":"717:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2181,"mutability":"mutable","name":"values","nameLocation":"756:6:11","nodeType":"VariableDeclaration","scope":2210,"src":"739:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2179,"name":"uint256","nodeType":"ElementaryTypeName","src":"739:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2180,"nodeType":"ArrayTypeName","src":"739:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"699:64:11"},"returnParameters":{"id":2183,"nodeType":"ParameterList","parameters":[],"src":"779:0:11"},"scope":2211,"src":"681:313:11","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":2212,"src":"343:653:11","usedErrors":[880,885,890,897,902,907,914],"usedEvents":[1986,2001,2010,2017]}],"src":"128:869:11"},"id":11},"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol","exportedSymbols":{"ERC1155":[1966],"ERC1155Pausable":[2250],"Pausable":[2674]},"id":2251,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2213,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"128:24:12"},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol","file":"../ERC1155.sol","id":2215,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2251,"sourceUnit":1967,"src":"154:39:12","symbolAliases":[{"foreign":{"id":2214,"name":"ERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"162:7:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Pausable.sol","file":"../../../utils/Pausable.sol","id":2217,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2251,"sourceUnit":2675,"src":"194:53:12","symbolAliases":[{"foreign":{"id":2216,"name":"Pausable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2674,"src":"202:8:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2219,"name":"ERC1155","nameLocations":["976:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":1966,"src":"976:7:12"},"id":2220,"nodeType":"InheritanceSpecifier","src":"976:7:12"},{"baseName":{"id":2221,"name":"Pausable","nameLocations":["985:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":2674,"src":"985:8:12"},"id":2222,"nodeType":"InheritanceSpecifier","src":"985:8:12"}],"canonicalName":"ERC1155Pausable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2218,"nodeType":"StructuredDocumentation","src":"249:689:12","text":" @dev ERC1155 token with pausable token transfers, minting and burning.\n Useful for scenarios such as preventing trades until the end of an evaluation\n period, or having an emergency switch for freezing all token transfers in the\n event of a large bug.\n IMPORTANT: This contract does not include public pause and unpause functions. In\n addition to inheriting this contract, you must define both functions, invoking the\n {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\n access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\n make the contract pause mechanism of the contract unreachable, and thus unusable."},"fullyImplemented":true,"id":2250,"linearizedBaseContracts":[2250,2674,1966,915,2266,2089,2808,2820,2557],"name":"ERC1155Pausable","nameLocation":"957:15:12","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[1381],"body":{"id":2248,"nodeType":"Block","src":"1296:53:12","statements":[{"expression":{"arguments":[{"id":2242,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"1320:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2243,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"1326:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2244,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"1330:3:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2245,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2233,"src":"1335:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"expression":{"id":2239,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1306:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC1155Pausable_$2250_$","typeString":"type(contract super ERC1155Pausable)"}},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1312:7:12","memberName":"_update","nodeType":"MemberAccess","referencedDeclaration":1381,"src":"1306:13:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory)"}},"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1306:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2247,"nodeType":"ExpressionStatement","src":"1306:36:12"}]},"documentation":{"id":2223,"nodeType":"StructuredDocumentation","src":"1000:123:12","text":" @dev See {ERC1155-_update}.\n Requirements:\n - the contract must not be paused."},"id":2249,"implemented":true,"kind":"function","modifiers":[{"id":2237,"kind":"modifierInvocation","modifierName":{"id":2236,"name":"whenNotPaused","nameLocations":["1282:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":2599,"src":"1282:13:12"},"nodeType":"ModifierInvocation","src":"1282:13:12"}],"name":"_update","nameLocation":"1137:7:12","nodeType":"FunctionDefinition","overrides":{"id":2235,"nodeType":"OverrideSpecifier","overrides":[],"src":"1273:8:12"},"parameters":{"id":2234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2225,"mutability":"mutable","name":"from","nameLocation":"1162:4:12","nodeType":"VariableDeclaration","scope":2249,"src":"1154:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2224,"name":"address","nodeType":"ElementaryTypeName","src":"1154:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2227,"mutability":"mutable","name":"to","nameLocation":"1184:2:12","nodeType":"VariableDeclaration","scope":2249,"src":"1176:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2226,"name":"address","nodeType":"ElementaryTypeName","src":"1176:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2230,"mutability":"mutable","name":"ids","nameLocation":"1213:3:12","nodeType":"VariableDeclaration","scope":2249,"src":"1196:20:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2228,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2229,"nodeType":"ArrayTypeName","src":"1196:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2233,"mutability":"mutable","name":"values","nameLocation":"1243:6:12","nodeType":"VariableDeclaration","scope":2249,"src":"1226:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2231,"name":"uint256","nodeType":"ElementaryTypeName","src":"1226:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2232,"nodeType":"ArrayTypeName","src":"1226:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1144:111:12"},"returnParameters":{"id":2238,"nodeType":"ParameterList","parameters":[],"src":"1296:0:12"},"scope":2250,"src":"1128:221:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":2251,"src":"939:412:12","usedErrors":[880,885,890,897,902,907,914,2579,2582],"usedEvents":[1986,2001,2010,2017,2571,2576]}],"src":"128:1224:12"},"id":12},"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol","exportedSymbols":{"IERC1155":[2089],"IERC1155MetadataURI":[2266]},"id":2267,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2252,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"132:24:13"},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","file":"../IERC1155.sol","id":2254,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2267,"sourceUnit":2090,"src":"158:41:13","symbolAliases":[{"foreign":{"id":2253,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"166:8:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2256,"name":"IERC1155","nameLocations":["399:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":2089,"src":"399:8:13"},"id":2257,"nodeType":"InheritanceSpecifier","src":"399:8:13"}],"canonicalName":"IERC1155MetadataURI","contractDependencies":[],"contractKind":"interface","documentation":{"id":2255,"nodeType":"StructuredDocumentation","src":"201:164:13","text":" @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP]."},"fullyImplemented":false,"id":2266,"linearizedBaseContracts":[2266,2089,2820],"name":"IERC1155MetadataURI","nameLocation":"376:19:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2258,"nodeType":"StructuredDocumentation","src":"414:192:13","text":" @dev Returns the URI for token type `id`.\n If the `\\{id\\}` substring is present in the URI, it must be replaced by\n clients with the actual token type ID."},"functionSelector":"0e89341c","id":2265,"implemented":false,"kind":"function","modifiers":[],"name":"uri","nameLocation":"620:3:13","nodeType":"FunctionDefinition","parameters":{"id":2261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2260,"mutability":"mutable","name":"id","nameLocation":"632:2:13","nodeType":"VariableDeclaration","scope":2265,"src":"624:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2259,"name":"uint256","nodeType":"ElementaryTypeName","src":"624:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"623:12:13"},"returnParameters":{"id":2264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2263,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2265,"src":"659:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2262,"name":"string","nodeType":"ElementaryTypeName","src":"659:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"658:15:13"},"scope":2266,"src":"611:63:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2267,"src":"366:310:13","usedErrors":[],"usedEvents":[1986,2001,2010,2017]}],"src":"132:545:13"},"id":13},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[2344]},"id":2345,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2268,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:14"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":2269,"nodeType":"StructuredDocumentation","src":"132:70:14","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":2344,"linearizedBaseContracts":[2344],"name":"IERC20","nameLocation":"213:6:14","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2270,"nodeType":"StructuredDocumentation","src":"226:158:14","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":2278,"name":"Transfer","nameLocation":"395:8:14","nodeType":"EventDefinition","parameters":{"id":2277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2272,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"420:4:14","nodeType":"VariableDeclaration","scope":2278,"src":"404:20:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2271,"name":"address","nodeType":"ElementaryTypeName","src":"404:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2274,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"442:2:14","nodeType":"VariableDeclaration","scope":2278,"src":"426:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2273,"name":"address","nodeType":"ElementaryTypeName","src":"426:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2276,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"454:5:14","nodeType":"VariableDeclaration","scope":2278,"src":"446:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2275,"name":"uint256","nodeType":"ElementaryTypeName","src":"446:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"403:57:14"},"src":"389:72:14"},{"anonymous":false,"documentation":{"id":2279,"nodeType":"StructuredDocumentation","src":"467:148:14","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":2287,"name":"Approval","nameLocation":"626:8:14","nodeType":"EventDefinition","parameters":{"id":2286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2281,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"651:5:14","nodeType":"VariableDeclaration","scope":2287,"src":"635:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2280,"name":"address","nodeType":"ElementaryTypeName","src":"635:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2283,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"674:7:14","nodeType":"VariableDeclaration","scope":2287,"src":"658:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2282,"name":"address","nodeType":"ElementaryTypeName","src":"658:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2285,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"691:5:14","nodeType":"VariableDeclaration","scope":2287,"src":"683:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2284,"name":"uint256","nodeType":"ElementaryTypeName","src":"683:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"634:63:14"},"src":"620:78:14"},{"documentation":{"id":2288,"nodeType":"StructuredDocumentation","src":"704:65:14","text":" @dev Returns the value of tokens in existence."},"functionSelector":"18160ddd","id":2293,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:14","nodeType":"FunctionDefinition","parameters":{"id":2289,"nodeType":"ParameterList","parameters":[],"src":"794:2:14"},"returnParameters":{"id":2292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2291,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2293,"src":"820:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2290,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:14"},"scope":2344,"src":"774:55:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2294,"nodeType":"StructuredDocumentation","src":"835:71:14","text":" @dev Returns the value of tokens owned by `account`."},"functionSelector":"70a08231","id":2301,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"920:9:14","nodeType":"FunctionDefinition","parameters":{"id":2297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2296,"mutability":"mutable","name":"account","nameLocation":"938:7:14","nodeType":"VariableDeclaration","scope":2301,"src":"930:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2295,"name":"address","nodeType":"ElementaryTypeName","src":"930:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"929:17:14"},"returnParameters":{"id":2300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2299,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2301,"src":"970:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2298,"name":"uint256","nodeType":"ElementaryTypeName","src":"970:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"969:9:14"},"scope":2344,"src":"911:68:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2302,"nodeType":"StructuredDocumentation","src":"985:213:14","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":2311,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1212:8:14","nodeType":"FunctionDefinition","parameters":{"id":2307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2304,"mutability":"mutable","name":"to","nameLocation":"1229:2:14","nodeType":"VariableDeclaration","scope":2311,"src":"1221:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2303,"name":"address","nodeType":"ElementaryTypeName","src":"1221:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2306,"mutability":"mutable","name":"value","nameLocation":"1241:5:14","nodeType":"VariableDeclaration","scope":2311,"src":"1233:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2305,"name":"uint256","nodeType":"ElementaryTypeName","src":"1233:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1220:27:14"},"returnParameters":{"id":2310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2309,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2311,"src":"1266:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2308,"name":"bool","nodeType":"ElementaryTypeName","src":"1266:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1265:6:14"},"scope":2344,"src":"1203:69:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2312,"nodeType":"StructuredDocumentation","src":"1278:264:14","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":2321,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1556:9:14","nodeType":"FunctionDefinition","parameters":{"id":2317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2314,"mutability":"mutable","name":"owner","nameLocation":"1574:5:14","nodeType":"VariableDeclaration","scope":2321,"src":"1566:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2313,"name":"address","nodeType":"ElementaryTypeName","src":"1566:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2316,"mutability":"mutable","name":"spender","nameLocation":"1589:7:14","nodeType":"VariableDeclaration","scope":2321,"src":"1581:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2315,"name":"address","nodeType":"ElementaryTypeName","src":"1581:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1565:32:14"},"returnParameters":{"id":2320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2319,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2321,"src":"1621:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2318,"name":"uint256","nodeType":"ElementaryTypeName","src":"1621:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1620:9:14"},"scope":2344,"src":"1547:83:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2322,"nodeType":"StructuredDocumentation","src":"1636:667:14","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":2331,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2317:7:14","nodeType":"FunctionDefinition","parameters":{"id":2327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2324,"mutability":"mutable","name":"spender","nameLocation":"2333:7:14","nodeType":"VariableDeclaration","scope":2331,"src":"2325:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2323,"name":"address","nodeType":"ElementaryTypeName","src":"2325:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2326,"mutability":"mutable","name":"value","nameLocation":"2350:5:14","nodeType":"VariableDeclaration","scope":2331,"src":"2342:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2325,"name":"uint256","nodeType":"ElementaryTypeName","src":"2342:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2324:32:14"},"returnParameters":{"id":2330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2329,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2331,"src":"2375:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2328,"name":"bool","nodeType":"ElementaryTypeName","src":"2375:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2374:6:14"},"scope":2344,"src":"2308:73:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2332,"nodeType":"StructuredDocumentation","src":"2387:297:14","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":2343,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2698:12:14","nodeType":"FunctionDefinition","parameters":{"id":2339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2334,"mutability":"mutable","name":"from","nameLocation":"2719:4:14","nodeType":"VariableDeclaration","scope":2343,"src":"2711:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2333,"name":"address","nodeType":"ElementaryTypeName","src":"2711:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2336,"mutability":"mutable","name":"to","nameLocation":"2733:2:14","nodeType":"VariableDeclaration","scope":2343,"src":"2725:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2335,"name":"address","nodeType":"ElementaryTypeName","src":"2725:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2338,"mutability":"mutable","name":"value","nameLocation":"2745:5:14","nodeType":"VariableDeclaration","scope":2343,"src":"2737:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2337,"name":"uint256","nodeType":"ElementaryTypeName","src":"2737:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2710:41:14"},"returnParameters":{"id":2342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2341,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2343,"src":"2770:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2340,"name":"bool","nodeType":"ElementaryTypeName","src":"2770:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2769:6:14"},"scope":2344,"src":"2689:87:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2345,"src":"203:2575:14","usedErrors":[],"usedEvents":[2278,2287]}],"src":"106:2673:14"},"id":14},"@openzeppelin/contracts/utils/Arrays.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Arrays.sol","exportedSymbols":{"Arrays":[2527],"Math":[3874],"StorageSlot":[2784]},"id":2528,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2346,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"100:24:15"},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"./StorageSlot.sol","id":2348,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2528,"sourceUnit":2785,"src":"126:46:15","symbolAliases":[{"foreign":{"id":2347,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2784,"src":"134:11:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":2350,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2528,"sourceUnit":3875,"src":"173:37:15","symbolAliases":[{"foreign":{"id":2349,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"181:4:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Arrays","contractDependencies":[],"contractKind":"library","documentation":{"id":2351,"nodeType":"StructuredDocumentation","src":"212:63:15","text":" @dev Collection of functions related to array types."},"fullyImplemented":true,"id":2527,"linearizedBaseContracts":[2527],"name":"Arrays","nameLocation":"284:6:15","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2354,"libraryName":{"id":2352,"name":"StorageSlot","nameLocations":["303:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":2784,"src":"303:11:15"},"nodeType":"UsingForDirective","src":"297:30:15","typeName":{"id":2353,"name":"bytes32","nodeType":"ElementaryTypeName","src":"319:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"body":{"id":2436,"nodeType":"Block","src":"843:834:15","statements":[{"assignments":[2366],"declarations":[{"constant":false,"id":2366,"mutability":"mutable","name":"low","nameLocation":"861:3:15","nodeType":"VariableDeclaration","scope":2436,"src":"853:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2365,"name":"uint256","nodeType":"ElementaryTypeName","src":"853:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2368,"initialValue":{"hexValue":"30","id":2367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"867:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"853:15:15"},{"assignments":[2370],"declarations":[{"constant":false,"id":2370,"mutability":"mutable","name":"high","nameLocation":"886:4:15","nodeType":"VariableDeclaration","scope":2436,"src":"878:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2369,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2373,"initialValue":{"expression":{"id":2371,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"893:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[] storage pointer"}},"id":2372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"899:6:15","memberName":"length","nodeType":"MemberAccess","src":"893:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"878:27:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2374,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"920:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"928:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"920:9:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2380,"nodeType":"IfStatement","src":"916:48:15","trueBody":{"id":2379,"nodeType":"Block","src":"931:33:15","statements":[{"expression":{"hexValue":"30","id":2377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2364,"id":2378,"nodeType":"Return","src":"945:8:15"}]}},{"body":{"id":2412,"nodeType":"Block","src":"993:423:15","statements":[{"assignments":[2385],"declarations":[{"constant":false,"id":2385,"mutability":"mutable","name":"mid","nameLocation":"1015:3:15","nodeType":"VariableDeclaration","scope":2412,"src":"1007:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2384,"name":"uint256","nodeType":"ElementaryTypeName","src":"1007:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2391,"initialValue":{"arguments":[{"id":2388,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2366,"src":"1034:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2389,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"1039:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2386,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"1021:4:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3874_$","typeString":"type(library Math)"}},"id":2387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1026:7:15","memberName":"average","nodeType":"MemberAccess","referencedDeclaration":3048,"src":"1021:12:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1021:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1007:37:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2393,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"1282:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[] storage pointer"}},{"id":2394,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"1289:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[] storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2392,"name":"unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[2458,2479,2500],"referencedDeclaration":2500,"src":"1269:12:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Uint256Slot_$2689_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":2395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1269:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2689_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":2396,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1294:5:15","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2688,"src":"1269:30:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2397,"name":"element","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2360,"src":"1302:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1269:40:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2410,"nodeType":"Block","src":"1360:46:15","statements":[{"expression":{"id":2408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2404,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2366,"src":"1378:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2405,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"1384:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1390:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1384:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1378:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2409,"nodeType":"ExpressionStatement","src":"1378:13:15"}]},"id":2411,"nodeType":"IfStatement","src":"1265:141:15","trueBody":{"id":2403,"nodeType":"Block","src":"1311:43:15","statements":[{"expression":{"id":2401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2399,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"1329:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2400,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"1336:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2402,"nodeType":"ExpressionStatement","src":"1329:10:15"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2381,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2366,"src":"981:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2382,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"987:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"981:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2413,"nodeType":"WhileStatement","src":"974:442:15"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2414,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2366,"src":"1533:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1539:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1533:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2418,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"1557:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[] storage pointer"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2419,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2366,"src":"1564:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1570:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1564:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[] storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2417,"name":"unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[2458,2479,2500],"referencedDeclaration":2500,"src":"1544:12:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Uint256Slot_$2689_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":2422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1544:28:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2689_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":2423,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1573:5:15","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2688,"src":"1544:34:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2424,"name":"element","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2360,"src":"1582:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1544:45:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1533:56:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2434,"nodeType":"Block","src":"1636:35:15","statements":[{"expression":{"id":2432,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2366,"src":"1657:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2364,"id":2433,"nodeType":"Return","src":"1650:10:15"}]},"id":2435,"nodeType":"IfStatement","src":"1529:142:15","trueBody":{"id":2431,"nodeType":"Block","src":"1591:39:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2427,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2366,"src":"1612:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1618:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1612:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2364,"id":2430,"nodeType":"Return","src":"1605:14:15"}]}}]},"documentation":{"id":2355,"nodeType":"StructuredDocumentation","src":"333:407:15","text":" @dev Searches a sorted `array` and returns the first index that contains\n a value greater or equal to `element`. If no such index exists (i.e. all\n values in the array are strictly less than `element`), the array length is\n returned. Time complexity O(log n).\n `array` is expected to be sorted in ascending order, and to contain no\n repeated elements."},"id":2437,"implemented":true,"kind":"function","modifiers":[],"name":"findUpperBound","nameLocation":"754:14:15","nodeType":"FunctionDefinition","parameters":{"id":2361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2358,"mutability":"mutable","name":"array","nameLocation":"787:5:15","nodeType":"VariableDeclaration","scope":2437,"src":"769:23:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2356,"name":"uint256","nodeType":"ElementaryTypeName","src":"769:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2357,"nodeType":"ArrayTypeName","src":"769:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2360,"mutability":"mutable","name":"element","nameLocation":"802:7:15","nodeType":"VariableDeclaration","scope":2437,"src":"794:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2359,"name":"uint256","nodeType":"ElementaryTypeName","src":"794:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"768:42:15"},"returnParameters":{"id":2364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2363,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2437,"src":"834:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2362,"name":"uint256","nodeType":"ElementaryTypeName","src":"834:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"833:9:15"},"scope":2527,"src":"745:932:15","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2457,"nodeType":"Block","src":"1993:459:15","statements":[{"assignments":[2450],"declarations":[{"constant":false,"id":2450,"mutability":"mutable","name":"slot","nameLocation":"2011:4:15","nodeType":"VariableDeclaration","scope":2457,"src":"2003:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2449,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2003:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2451,"nodeType":"VariableDeclarationStatement","src":"2003:12:15"},{"AST":{"nativeSrc":"2316:92:15","nodeType":"YulBlock","src":"2316:92:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2337:1:15","nodeType":"YulLiteral","src":"2337:1:15","type":"","value":"0"},{"name":"arr.slot","nativeSrc":"2340:8:15","nodeType":"YulIdentifier","src":"2340:8:15"}],"functionName":{"name":"mstore","nativeSrc":"2330:6:15","nodeType":"YulIdentifier","src":"2330:6:15"},"nativeSrc":"2330:19:15","nodeType":"YulFunctionCall","src":"2330:19:15"},"nativeSrc":"2330:19:15","nodeType":"YulExpressionStatement","src":"2330:19:15"},{"nativeSrc":"2362:36:15","nodeType":"YulAssignment","src":"2362:36:15","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"2384:1:15","nodeType":"YulLiteral","src":"2384:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"2387:4:15","nodeType":"YulLiteral","src":"2387:4:15","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"2374:9:15","nodeType":"YulIdentifier","src":"2374:9:15"},"nativeSrc":"2374:18:15","nodeType":"YulFunctionCall","src":"2374:18:15"},{"name":"pos","nativeSrc":"2394:3:15","nodeType":"YulIdentifier","src":"2394:3:15"}],"functionName":{"name":"add","nativeSrc":"2370:3:15","nodeType":"YulIdentifier","src":"2370:3:15"},"nativeSrc":"2370:28:15","nodeType":"YulFunctionCall","src":"2370:28:15"},"variableNames":[{"name":"slot","nativeSrc":"2362:4:15","nodeType":"YulIdentifier","src":"2362:4:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2441,"isOffset":false,"isSlot":true,"src":"2340:8:15","suffix":"slot","valueSize":1},{"declaration":2443,"isOffset":false,"isSlot":false,"src":"2394:3:15","valueSize":1},{"declaration":2450,"isOffset":false,"isSlot":false,"src":"2362:4:15","valueSize":1}],"id":2452,"nodeType":"InlineAssembly","src":"2307:101:15"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2453,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2450,"src":"2424:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2429:14:15","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2706,"src":"2424:19:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2680_storage_ptr_$attached_to$_t_bytes32_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":2455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2424:21:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2680_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"functionReturnParameters":2448,"id":2456,"nodeType":"Return","src":"2417:28:15"}]},"documentation":{"id":2438,"nodeType":"StructuredDocumentation","src":"1683:191:15","text":" @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n WARNING: Only use if you are certain `pos` is lower than the array length."},"id":2458,"implemented":true,"kind":"function","modifiers":[],"name":"unsafeAccess","nameLocation":"1888:12:15","nodeType":"FunctionDefinition","parameters":{"id":2444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2441,"mutability":"mutable","name":"arr","nameLocation":"1919:3:15","nodeType":"VariableDeclaration","scope":2458,"src":"1901:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2439,"name":"address","nodeType":"ElementaryTypeName","src":"1901:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2440,"nodeType":"ArrayTypeName","src":"1901:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2443,"mutability":"mutable","name":"pos","nameLocation":"1932:3:15","nodeType":"VariableDeclaration","scope":2458,"src":"1924:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2442,"name":"uint256","nodeType":"ElementaryTypeName","src":"1924:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1900:36:15"},"returnParameters":{"id":2448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2447,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2458,"src":"1960:31:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2680_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":2446,"nodeType":"UserDefinedTypeName","pathNode":{"id":2445,"name":"StorageSlot.AddressSlot","nameLocations":["1960:11:15","1972:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":2680,"src":"1960:23:15"},"referencedDeclaration":2680,"src":"1960:23:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2680_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1959:33:15"},"scope":2527,"src":"1879:573:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2478,"nodeType":"Block","src":"2768:459:15","statements":[{"assignments":[2471],"declarations":[{"constant":false,"id":2471,"mutability":"mutable","name":"slot","nameLocation":"2786:4:15","nodeType":"VariableDeclaration","scope":2478,"src":"2778:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2470,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2778:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2472,"nodeType":"VariableDeclarationStatement","src":"2778:12:15"},{"AST":{"nativeSrc":"3091:92:15","nodeType":"YulBlock","src":"3091:92:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3112:1:15","nodeType":"YulLiteral","src":"3112:1:15","type":"","value":"0"},{"name":"arr.slot","nativeSrc":"3115:8:15","nodeType":"YulIdentifier","src":"3115:8:15"}],"functionName":{"name":"mstore","nativeSrc":"3105:6:15","nodeType":"YulIdentifier","src":"3105:6:15"},"nativeSrc":"3105:19:15","nodeType":"YulFunctionCall","src":"3105:19:15"},"nativeSrc":"3105:19:15","nodeType":"YulExpressionStatement","src":"3105:19:15"},{"nativeSrc":"3137:36:15","nodeType":"YulAssignment","src":"3137:36:15","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"3159:1:15","nodeType":"YulLiteral","src":"3159:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"3162:4:15","nodeType":"YulLiteral","src":"3162:4:15","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"3149:9:15","nodeType":"YulIdentifier","src":"3149:9:15"},"nativeSrc":"3149:18:15","nodeType":"YulFunctionCall","src":"3149:18:15"},{"name":"pos","nativeSrc":"3169:3:15","nodeType":"YulIdentifier","src":"3169:3:15"}],"functionName":{"name":"add","nativeSrc":"3145:3:15","nodeType":"YulIdentifier","src":"3145:3:15"},"nativeSrc":"3145:28:15","nodeType":"YulFunctionCall","src":"3145:28:15"},"variableNames":[{"name":"slot","nativeSrc":"3137:4:15","nodeType":"YulIdentifier","src":"3137:4:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2462,"isOffset":false,"isSlot":true,"src":"3115:8:15","suffix":"slot","valueSize":1},{"declaration":2464,"isOffset":false,"isSlot":false,"src":"3169:3:15","valueSize":1},{"declaration":2471,"isOffset":false,"isSlot":false,"src":"3137:4:15","valueSize":1}],"id":2473,"nodeType":"InlineAssembly","src":"3082:101:15"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2474,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2471,"src":"3199:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3204:14:15","memberName":"getBytes32Slot","nodeType":"MemberAccess","referencedDeclaration":2728,"src":"3199:19:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Bytes32Slot_$2686_storage_ptr_$attached_to$_t_bytes32_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Bytes32Slot storage pointer)"}},"id":2476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3199:21:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2686_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot storage pointer"}},"functionReturnParameters":2469,"id":2477,"nodeType":"Return","src":"3192:28:15"}]},"documentation":{"id":2459,"nodeType":"StructuredDocumentation","src":"2458:191:15","text":" @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n WARNING: Only use if you are certain `pos` is lower than the array length."},"id":2479,"implemented":true,"kind":"function","modifiers":[],"name":"unsafeAccess","nameLocation":"2663:12:15","nodeType":"FunctionDefinition","parameters":{"id":2465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2462,"mutability":"mutable","name":"arr","nameLocation":"2694:3:15","nodeType":"VariableDeclaration","scope":2479,"src":"2676:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2460,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2676:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2461,"nodeType":"ArrayTypeName","src":"2676:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2464,"mutability":"mutable","name":"pos","nameLocation":"2707:3:15","nodeType":"VariableDeclaration","scope":2479,"src":"2699:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2463,"name":"uint256","nodeType":"ElementaryTypeName","src":"2699:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2675:36:15"},"returnParameters":{"id":2469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2468,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2479,"src":"2735:31:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2686_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":2467,"nodeType":"UserDefinedTypeName","pathNode":{"id":2466,"name":"StorageSlot.Bytes32Slot","nameLocations":["2735:11:15","2747:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":2686,"src":"2735:23:15"},"referencedDeclaration":2686,"src":"2735:23:15","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2686_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2734:33:15"},"scope":2527,"src":"2654:573:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2499,"nodeType":"Block","src":"3543:459:15","statements":[{"assignments":[2492],"declarations":[{"constant":false,"id":2492,"mutability":"mutable","name":"slot","nameLocation":"3561:4:15","nodeType":"VariableDeclaration","scope":2499,"src":"3553:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2491,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3553:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2493,"nodeType":"VariableDeclarationStatement","src":"3553:12:15"},{"AST":{"nativeSrc":"3866:92:15","nodeType":"YulBlock","src":"3866:92:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3887:1:15","nodeType":"YulLiteral","src":"3887:1:15","type":"","value":"0"},{"name":"arr.slot","nativeSrc":"3890:8:15","nodeType":"YulIdentifier","src":"3890:8:15"}],"functionName":{"name":"mstore","nativeSrc":"3880:6:15","nodeType":"YulIdentifier","src":"3880:6:15"},"nativeSrc":"3880:19:15","nodeType":"YulFunctionCall","src":"3880:19:15"},"nativeSrc":"3880:19:15","nodeType":"YulExpressionStatement","src":"3880:19:15"},{"nativeSrc":"3912:36:15","nodeType":"YulAssignment","src":"3912:36:15","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"3934:1:15","nodeType":"YulLiteral","src":"3934:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"3937:4:15","nodeType":"YulLiteral","src":"3937:4:15","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"3924:9:15","nodeType":"YulIdentifier","src":"3924:9:15"},"nativeSrc":"3924:18:15","nodeType":"YulFunctionCall","src":"3924:18:15"},{"name":"pos","nativeSrc":"3944:3:15","nodeType":"YulIdentifier","src":"3944:3:15"}],"functionName":{"name":"add","nativeSrc":"3920:3:15","nodeType":"YulIdentifier","src":"3920:3:15"},"nativeSrc":"3920:28:15","nodeType":"YulFunctionCall","src":"3920:28:15"},"variableNames":[{"name":"slot","nativeSrc":"3912:4:15","nodeType":"YulIdentifier","src":"3912:4:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2483,"isOffset":false,"isSlot":true,"src":"3890:8:15","suffix":"slot","valueSize":1},{"declaration":2485,"isOffset":false,"isSlot":false,"src":"3944:3:15","valueSize":1},{"declaration":2492,"isOffset":false,"isSlot":false,"src":"3912:4:15","valueSize":1}],"id":2494,"nodeType":"InlineAssembly","src":"3857:101:15"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2495,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"3974:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3979:14:15","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":2739,"src":"3974:19:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$2689_storage_ptr_$attached_to$_t_bytes32_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":2497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3974:21:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2689_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"functionReturnParameters":2490,"id":2498,"nodeType":"Return","src":"3967:28:15"}]},"documentation":{"id":2480,"nodeType":"StructuredDocumentation","src":"3233:191:15","text":" @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n WARNING: Only use if you are certain `pos` is lower than the array length."},"id":2500,"implemented":true,"kind":"function","modifiers":[],"name":"unsafeAccess","nameLocation":"3438:12:15","nodeType":"FunctionDefinition","parameters":{"id":2486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2483,"mutability":"mutable","name":"arr","nameLocation":"3469:3:15","nodeType":"VariableDeclaration","scope":2500,"src":"3451:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2481,"name":"uint256","nodeType":"ElementaryTypeName","src":"3451:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2482,"nodeType":"ArrayTypeName","src":"3451:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2485,"mutability":"mutable","name":"pos","nameLocation":"3482:3:15","nodeType":"VariableDeclaration","scope":2500,"src":"3474:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2484,"name":"uint256","nodeType":"ElementaryTypeName","src":"3474:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3450:36:15"},"returnParameters":{"id":2490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2489,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2500,"src":"3510:31:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2689_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":2488,"nodeType":"UserDefinedTypeName","pathNode":{"id":2487,"name":"StorageSlot.Uint256Slot","nameLocations":["3510:11:15","3522:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":2689,"src":"3510:23:15"},"referencedDeclaration":2689,"src":"3510:23:15","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2689_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"3509:33:15"},"scope":2527,"src":"3429:573:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2512,"nodeType":"Block","src":"4303:98:15","statements":[{"AST":{"nativeSrc":"4322:73:15","nodeType":"YulBlock","src":"4322:73:15","statements":[{"nativeSrc":"4336:49:15","nodeType":"YulAssignment","src":"4336:49:15","value":{"arguments":[{"arguments":[{"arguments":[{"name":"arr","nativeSrc":"4357:3:15","nodeType":"YulIdentifier","src":"4357:3:15"},{"kind":"number","nativeSrc":"4362:4:15","nodeType":"YulLiteral","src":"4362:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4353:3:15","nodeType":"YulIdentifier","src":"4353:3:15"},"nativeSrc":"4353:14:15","nodeType":"YulFunctionCall","src":"4353:14:15"},{"arguments":[{"name":"pos","nativeSrc":"4373:3:15","nodeType":"YulIdentifier","src":"4373:3:15"},{"kind":"number","nativeSrc":"4378:4:15","nodeType":"YulLiteral","src":"4378:4:15","type":"","value":"0x20"}],"functionName":{"name":"mul","nativeSrc":"4369:3:15","nodeType":"YulIdentifier","src":"4369:3:15"},"nativeSrc":"4369:14:15","nodeType":"YulFunctionCall","src":"4369:14:15"}],"functionName":{"name":"add","nativeSrc":"4349:3:15","nodeType":"YulIdentifier","src":"4349:3:15"},"nativeSrc":"4349:35:15","nodeType":"YulFunctionCall","src":"4349:35:15"}],"functionName":{"name":"mload","nativeSrc":"4343:5:15","nodeType":"YulIdentifier","src":"4343:5:15"},"nativeSrc":"4343:42:15","nodeType":"YulFunctionCall","src":"4343:42:15"},"variableNames":[{"name":"res","nativeSrc":"4336:3:15","nodeType":"YulIdentifier","src":"4336:3:15"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2504,"isOffset":false,"isSlot":false,"src":"4357:3:15","valueSize":1},{"declaration":2506,"isOffset":false,"isSlot":false,"src":"4373:3:15","valueSize":1},{"declaration":2509,"isOffset":false,"isSlot":false,"src":"4336:3:15","valueSize":1}],"id":2511,"nodeType":"InlineAssembly","src":"4313:82:15"}]},"documentation":{"id":2501,"nodeType":"StructuredDocumentation","src":"4008:191:15","text":" @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n WARNING: Only use if you are certain `pos` is lower than the array length."},"id":2513,"implemented":true,"kind":"function","modifiers":[],"name":"unsafeMemoryAccess","nameLocation":"4213:18:15","nodeType":"FunctionDefinition","parameters":{"id":2507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2504,"mutability":"mutable","name":"arr","nameLocation":"4249:3:15","nodeType":"VariableDeclaration","scope":2513,"src":"4232:20:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2502,"name":"uint256","nodeType":"ElementaryTypeName","src":"4232:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2503,"nodeType":"ArrayTypeName","src":"4232:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2506,"mutability":"mutable","name":"pos","nameLocation":"4262:3:15","nodeType":"VariableDeclaration","scope":2513,"src":"4254:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2505,"name":"uint256","nodeType":"ElementaryTypeName","src":"4254:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4231:35:15"},"returnParameters":{"id":2510,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2509,"mutability":"mutable","name":"res","nameLocation":"4298:3:15","nodeType":"VariableDeclaration","scope":2513,"src":"4290:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2508,"name":"uint256","nodeType":"ElementaryTypeName","src":"4290:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4289:13:15"},"scope":2527,"src":"4204:197:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2525,"nodeType":"Block","src":"4702:98:15","statements":[{"AST":{"nativeSrc":"4721:73:15","nodeType":"YulBlock","src":"4721:73:15","statements":[{"nativeSrc":"4735:49:15","nodeType":"YulAssignment","src":"4735:49:15","value":{"arguments":[{"arguments":[{"arguments":[{"name":"arr","nativeSrc":"4756:3:15","nodeType":"YulIdentifier","src":"4756:3:15"},{"kind":"number","nativeSrc":"4761:4:15","nodeType":"YulLiteral","src":"4761:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4752:3:15","nodeType":"YulIdentifier","src":"4752:3:15"},"nativeSrc":"4752:14:15","nodeType":"YulFunctionCall","src":"4752:14:15"},{"arguments":[{"name":"pos","nativeSrc":"4772:3:15","nodeType":"YulIdentifier","src":"4772:3:15"},{"kind":"number","nativeSrc":"4777:4:15","nodeType":"YulLiteral","src":"4777:4:15","type":"","value":"0x20"}],"functionName":{"name":"mul","nativeSrc":"4768:3:15","nodeType":"YulIdentifier","src":"4768:3:15"},"nativeSrc":"4768:14:15","nodeType":"YulFunctionCall","src":"4768:14:15"}],"functionName":{"name":"add","nativeSrc":"4748:3:15","nodeType":"YulIdentifier","src":"4748:3:15"},"nativeSrc":"4748:35:15","nodeType":"YulFunctionCall","src":"4748:35:15"}],"functionName":{"name":"mload","nativeSrc":"4742:5:15","nodeType":"YulIdentifier","src":"4742:5:15"},"nativeSrc":"4742:42:15","nodeType":"YulFunctionCall","src":"4742:42:15"},"variableNames":[{"name":"res","nativeSrc":"4735:3:15","nodeType":"YulIdentifier","src":"4735:3:15"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2517,"isOffset":false,"isSlot":false,"src":"4756:3:15","valueSize":1},{"declaration":2519,"isOffset":false,"isSlot":false,"src":"4772:3:15","valueSize":1},{"declaration":2522,"isOffset":false,"isSlot":false,"src":"4735:3:15","valueSize":1}],"id":2524,"nodeType":"InlineAssembly","src":"4712:82:15"}]},"documentation":{"id":2514,"nodeType":"StructuredDocumentation","src":"4407:191:15","text":" @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n WARNING: Only use if you are certain `pos` is lower than the array length."},"id":2526,"implemented":true,"kind":"function","modifiers":[],"name":"unsafeMemoryAccess","nameLocation":"4612:18:15","nodeType":"FunctionDefinition","parameters":{"id":2520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2517,"mutability":"mutable","name":"arr","nameLocation":"4648:3:15","nodeType":"VariableDeclaration","scope":2526,"src":"4631:20:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2515,"name":"address","nodeType":"ElementaryTypeName","src":"4631:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2516,"nodeType":"ArrayTypeName","src":"4631:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2519,"mutability":"mutable","name":"pos","nameLocation":"4661:3:15","nodeType":"VariableDeclaration","scope":2526,"src":"4653:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2518,"name":"uint256","nodeType":"ElementaryTypeName","src":"4653:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4630:35:15"},"returnParameters":{"id":2523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2522,"mutability":"mutable","name":"res","nameLocation":"4697:3:15","nodeType":"VariableDeclaration","scope":2526,"src":"4689:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2521,"name":"address","nodeType":"ElementaryTypeName","src":"4689:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4688:13:15"},"scope":2527,"src":"4603:197:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2528,"src":"276:4526:15","usedErrors":[],"usedEvents":[]}],"src":"100:4703:15"},"id":15},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[2557]},"id":2558,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2529,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:16"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":2530,"nodeType":"StructuredDocumentation","src":"127:496:16","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2557,"linearizedBaseContracts":[2557],"name":"Context","nameLocation":"642:7:16","nodeType":"ContractDefinition","nodes":[{"body":{"id":2538,"nodeType":"Block","src":"718:34:16","statements":[{"expression":{"expression":{"id":2535,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:16","memberName":"sender","nodeType":"MemberAccess","src":"735:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2534,"id":2537,"nodeType":"Return","src":"728:17:16"}]},"id":2539,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:16","nodeType":"FunctionDefinition","parameters":{"id":2531,"nodeType":"ParameterList","parameters":[],"src":"675:2:16"},"returnParameters":{"id":2534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2533,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2539,"src":"709:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2532,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:16"},"scope":2557,"src":"656:96:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2547,"nodeType":"Block","src":"825:32:16","statements":[{"expression":{"expression":{"id":2544,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:16","memberName":"data","nodeType":"MemberAccess","src":"842:8:16","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2543,"id":2546,"nodeType":"Return","src":"835:15:16"}]},"id":2548,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:16","nodeType":"FunctionDefinition","parameters":{"id":2540,"nodeType":"ParameterList","parameters":[],"src":"775:2:16"},"returnParameters":{"id":2543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2542,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2548,"src":"809:14:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2541,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:16"},"scope":2557,"src":"758:99:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2555,"nodeType":"Block","src":"935:25:16","statements":[{"expression":{"hexValue":"30","id":2553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2552,"id":2554,"nodeType":"Return","src":"945:8:16"}]},"id":2556,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:16","nodeType":"FunctionDefinition","parameters":{"id":2549,"nodeType":"ParameterList","parameters":[],"src":"892:2:16"},"returnParameters":{"id":2552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2551,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2556,"src":"926:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2550,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:16"},"scope":2557,"src":"863:97:16","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2558,"src":"624:338:16","usedErrors":[],"usedEvents":[]}],"src":"101:862:16"},"id":16},"@openzeppelin/contracts/utils/Pausable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Pausable.sol","exportedSymbols":{"Context":[2557],"Pausable":[2674]},"id":2675,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2559,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:17"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2561,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2675,"sourceUnit":2558,"src":"128:45:17","symbolAliases":[{"foreign":{"id":2560,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2557,"src":"136:7:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2563,"name":"Context","nameLocations":["645:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":2557,"src":"645:7:17"},"id":2564,"nodeType":"InheritanceSpecifier","src":"645:7:17"}],"canonicalName":"Pausable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2562,"nodeType":"StructuredDocumentation","src":"175:439:17","text":" @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."},"fullyImplemented":true,"id":2674,"linearizedBaseContracts":[2674,2557],"name":"Pausable","nameLocation":"633:8:17","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":2566,"mutability":"mutable","name":"_paused","nameLocation":"672:7:17","nodeType":"VariableDeclaration","scope":2674,"src":"659:20:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2565,"name":"bool","nodeType":"ElementaryTypeName","src":"659:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":2567,"nodeType":"StructuredDocumentation","src":"686:73:17","text":" @dev Emitted when the pause is triggered by `account`."},"eventSelector":"62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258","id":2571,"name":"Paused","nameLocation":"770:6:17","nodeType":"EventDefinition","parameters":{"id":2570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2569,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"785:7:17","nodeType":"VariableDeclaration","scope":2571,"src":"777:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2568,"name":"address","nodeType":"ElementaryTypeName","src":"777:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"776:17:17"},"src":"764:30:17"},{"anonymous":false,"documentation":{"id":2572,"nodeType":"StructuredDocumentation","src":"800:70:17","text":" @dev Emitted when the pause is lifted by `account`."},"eventSelector":"5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa","id":2576,"name":"Unpaused","nameLocation":"881:8:17","nodeType":"EventDefinition","parameters":{"id":2575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2574,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"898:7:17","nodeType":"VariableDeclaration","scope":2576,"src":"890:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2573,"name":"address","nodeType":"ElementaryTypeName","src":"890:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"889:17:17"},"src":"875:32:17"},{"documentation":{"id":2577,"nodeType":"StructuredDocumentation","src":"913:76:17","text":" @dev The operation failed because the contract is paused."},"errorSelector":"d93c0665","id":2579,"name":"EnforcedPause","nameLocation":"1000:13:17","nodeType":"ErrorDefinition","parameters":{"id":2578,"nodeType":"ParameterList","parameters":[],"src":"1013:2:17"},"src":"994:22:17"},{"documentation":{"id":2580,"nodeType":"StructuredDocumentation","src":"1022:80:17","text":" @dev The operation failed because the contract is not paused."},"errorSelector":"8dfc202b","id":2582,"name":"ExpectedPause","nameLocation":"1113:13:17","nodeType":"ErrorDefinition","parameters":{"id":2581,"nodeType":"ParameterList","parameters":[],"src":"1126:2:17"},"src":"1107:22:17"},{"body":{"id":2590,"nodeType":"Block","src":"1221:32:17","statements":[{"expression":{"id":2588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2586,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"1231:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":2587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1241:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1231:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2589,"nodeType":"ExpressionStatement","src":"1231:15:17"}]},"documentation":{"id":2583,"nodeType":"StructuredDocumentation","src":"1135:67:17","text":" @dev Initializes the contract in unpaused state."},"id":2591,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2584,"nodeType":"ParameterList","parameters":[],"src":"1218:2:17"},"returnParameters":{"id":2585,"nodeType":"ParameterList","parameters":[],"src":"1221:0:17"},"scope":2674,"src":"1207:46:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2598,"nodeType":"Block","src":"1464:47:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2594,"name":"_requireNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2628,"src":"1474:17:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":2595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1474:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2596,"nodeType":"ExpressionStatement","src":"1474:19:17"},{"id":2597,"nodeType":"PlaceholderStatement","src":"1503:1:17"}]},"documentation":{"id":2592,"nodeType":"StructuredDocumentation","src":"1259:175:17","text":" @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."},"id":2599,"name":"whenNotPaused","nameLocation":"1448:13:17","nodeType":"ModifierDefinition","parameters":{"id":2593,"nodeType":"ParameterList","parameters":[],"src":"1461:2:17"},"src":"1439:72:17","virtual":false,"visibility":"internal"},{"body":{"id":2606,"nodeType":"Block","src":"1711:44:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2602,"name":"_requirePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"1721:14:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1721:16:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2604,"nodeType":"ExpressionStatement","src":"1721:16:17"},{"id":2605,"nodeType":"PlaceholderStatement","src":"1747:1:17"}]},"documentation":{"id":2600,"nodeType":"StructuredDocumentation","src":"1517:167:17","text":" @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."},"id":2607,"name":"whenPaused","nameLocation":"1698:10:17","nodeType":"ModifierDefinition","parameters":{"id":2601,"nodeType":"ParameterList","parameters":[],"src":"1708:2:17"},"src":"1689:66:17","virtual":false,"visibility":"internal"},{"body":{"id":2615,"nodeType":"Block","src":"1903:31:17","statements":[{"expression":{"id":2613,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"1920:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2612,"id":2614,"nodeType":"Return","src":"1913:14:17"}]},"documentation":{"id":2608,"nodeType":"StructuredDocumentation","src":"1761:84:17","text":" @dev Returns true if the contract is paused, and false otherwise."},"functionSelector":"5c975abb","id":2616,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1859:6:17","nodeType":"FunctionDefinition","parameters":{"id":2609,"nodeType":"ParameterList","parameters":[],"src":"1865:2:17"},"returnParameters":{"id":2612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2611,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2616,"src":"1897:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2610,"name":"bool","nodeType":"ElementaryTypeName","src":"1897:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1896:6:17"},"scope":2674,"src":"1850:84:17","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2627,"nodeType":"Block","src":"2053:77:17","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"id":2620,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2616,"src":"2067:6:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":2621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2067:8:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2626,"nodeType":"IfStatement","src":"2063:61:17","trueBody":{"id":2625,"nodeType":"Block","src":"2077:47:17","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2622,"name":"EnforcedPause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2579,"src":"2098:13:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2098:15:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2624,"nodeType":"RevertStatement","src":"2091:22:17"}]}}]},"documentation":{"id":2617,"nodeType":"StructuredDocumentation","src":"1940:57:17","text":" @dev Throws if the contract is paused."},"id":2628,"implemented":true,"kind":"function","modifiers":[],"name":"_requireNotPaused","nameLocation":"2011:17:17","nodeType":"FunctionDefinition","parameters":{"id":2618,"nodeType":"ParameterList","parameters":[],"src":"2028:2:17"},"returnParameters":{"id":2619,"nodeType":"ParameterList","parameters":[],"src":"2053:0:17"},"scope":2674,"src":"2002:128:17","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2640,"nodeType":"Block","src":"2250:78:17","statements":[{"condition":{"id":2634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2264:9:17","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2632,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2616,"src":"2265:6:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":2633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2265:8:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2639,"nodeType":"IfStatement","src":"2260:62:17","trueBody":{"id":2638,"nodeType":"Block","src":"2275:47:17","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2635,"name":"ExpectedPause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2582,"src":"2296:13:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2296:15:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2637,"nodeType":"RevertStatement","src":"2289:22:17"}]}}]},"documentation":{"id":2629,"nodeType":"StructuredDocumentation","src":"2136:61:17","text":" @dev Throws if the contract is not paused."},"id":2641,"implemented":true,"kind":"function","modifiers":[],"name":"_requirePaused","nameLocation":"2211:14:17","nodeType":"FunctionDefinition","parameters":{"id":2630,"nodeType":"ParameterList","parameters":[],"src":"2225:2:17"},"returnParameters":{"id":2631,"nodeType":"ParameterList","parameters":[],"src":"2250:0:17"},"scope":2674,"src":"2202:126:17","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2656,"nodeType":"Block","src":"2512:66:17","statements":[{"expression":{"id":2649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2647,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"2522:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2532:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2522:14:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2650,"nodeType":"ExpressionStatement","src":"2522:14:17"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2652,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"2558:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2558:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2651,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2571,"src":"2551:6:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2551:20:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2655,"nodeType":"EmitStatement","src":"2546:25:17"}]},"documentation":{"id":2642,"nodeType":"StructuredDocumentation","src":"2334:124:17","text":" @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."},"id":2657,"implemented":true,"kind":"function","modifiers":[{"id":2645,"kind":"modifierInvocation","modifierName":{"id":2644,"name":"whenNotPaused","nameLocations":["2498:13:17"],"nodeType":"IdentifierPath","referencedDeclaration":2599,"src":"2498:13:17"},"nodeType":"ModifierInvocation","src":"2498:13:17"}],"name":"_pause","nameLocation":"2472:6:17","nodeType":"FunctionDefinition","parameters":{"id":2643,"nodeType":"ParameterList","parameters":[],"src":"2478:2:17"},"returnParameters":{"id":2646,"nodeType":"ParameterList","parameters":[],"src":"2512:0:17"},"scope":2674,"src":"2463:115:17","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2672,"nodeType":"Block","src":"2758:69:17","statements":[{"expression":{"id":2665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2663,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"2768:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":2664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2778:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2768:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2666,"nodeType":"ExpressionStatement","src":"2768:15:17"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2668,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"2807:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2807:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2667,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2576,"src":"2798:8:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2798:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2671,"nodeType":"EmitStatement","src":"2793:27:17"}]},"documentation":{"id":2658,"nodeType":"StructuredDocumentation","src":"2584:121:17","text":" @dev Returns to normal state.\n Requirements:\n - The contract must be paused."},"id":2673,"implemented":true,"kind":"function","modifiers":[{"id":2661,"kind":"modifierInvocation","modifierName":{"id":2660,"name":"whenPaused","nameLocations":["2747:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":2607,"src":"2747:10:17"},"nodeType":"ModifierInvocation","src":"2747:10:17"}],"name":"_unpause","nameLocation":"2719:8:17","nodeType":"FunctionDefinition","parameters":{"id":2659,"nodeType":"ParameterList","parameters":[],"src":"2727:2:17"},"returnParameters":{"id":2662,"nodeType":"ParameterList","parameters":[],"src":"2758:0:17"},"scope":2674,"src":"2710:117:17","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":2675,"src":"615:2214:17","usedErrors":[2579,2582],"usedEvents":[2571,2576]}],"src":"102:2728:17"},"id":17},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[2784]},"id":2785,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2676,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"193:24:18"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":2677,"nodeType":"StructuredDocumentation","src":"219:1025:18","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(newImplementation.code.length > 0);\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```"},"fullyImplemented":true,"id":2784,"linearizedBaseContracts":[2784],"name":"StorageSlot","nameLocation":"1253:11:18","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":2680,"members":[{"constant":false,"id":2679,"mutability":"mutable","name":"value","nameLocation":"1308:5:18","nodeType":"VariableDeclaration","scope":2680,"src":"1300:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2678,"name":"address","nodeType":"ElementaryTypeName","src":"1300:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1278:11:18","nodeType":"StructDefinition","scope":2784,"src":"1271:49:18","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":2683,"members":[{"constant":false,"id":2682,"mutability":"mutable","name":"value","nameLocation":"1360:5:18","nodeType":"VariableDeclaration","scope":2683,"src":"1355:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2681,"name":"bool","nodeType":"ElementaryTypeName","src":"1355:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1333:11:18","nodeType":"StructDefinition","scope":2784,"src":"1326:46:18","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":2686,"members":[{"constant":false,"id":2685,"mutability":"mutable","name":"value","nameLocation":"1415:5:18","nodeType":"VariableDeclaration","scope":2686,"src":"1407:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2684,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1407:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1385:11:18","nodeType":"StructDefinition","scope":2784,"src":"1378:49:18","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":2689,"members":[{"constant":false,"id":2688,"mutability":"mutable","name":"value","nameLocation":"1470:5:18","nodeType":"VariableDeclaration","scope":2689,"src":"1462:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2687,"name":"uint256","nodeType":"ElementaryTypeName","src":"1462:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1440:11:18","nodeType":"StructDefinition","scope":2784,"src":"1433:49:18","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":2692,"members":[{"constant":false,"id":2691,"mutability":"mutable","name":"value","nameLocation":"1523:5:18","nodeType":"VariableDeclaration","scope":2692,"src":"1516:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2690,"name":"string","nodeType":"ElementaryTypeName","src":"1516:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1495:10:18","nodeType":"StructDefinition","scope":2784,"src":"1488:47:18","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":2695,"members":[{"constant":false,"id":2694,"mutability":"mutable","name":"value","nameLocation":"1574:5:18","nodeType":"VariableDeclaration","scope":2695,"src":"1568:11:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2693,"name":"bytes","nodeType":"ElementaryTypeName","src":"1568:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1548:9:18","nodeType":"StructDefinition","scope":2784,"src":"1541:45:18","visibility":"public"},{"body":{"id":2705,"nodeType":"Block","src":"1768:106:18","statements":[{"AST":{"nativeSrc":"1830:38:18","nodeType":"YulBlock","src":"1830:38:18","statements":[{"nativeSrc":"1844:14:18","nodeType":"YulAssignment","src":"1844:14:18","value":{"name":"slot","nativeSrc":"1854:4:18","nodeType":"YulIdentifier","src":"1854:4:18"},"variableNames":[{"name":"r.slot","nativeSrc":"1844:6:18","nodeType":"YulIdentifier","src":"1844:6:18"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2702,"isOffset":false,"isSlot":true,"src":"1844:6:18","suffix":"slot","valueSize":1},{"declaration":2698,"isOffset":false,"isSlot":false,"src":"1854:4:18","valueSize":1}],"id":2704,"nodeType":"InlineAssembly","src":"1821:47:18"}]},"documentation":{"id":2696,"nodeType":"StructuredDocumentation","src":"1592:87:18","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":2706,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1693:14:18","nodeType":"FunctionDefinition","parameters":{"id":2699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2698,"mutability":"mutable","name":"slot","nameLocation":"1716:4:18","nodeType":"VariableDeclaration","scope":2706,"src":"1708:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2697,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1708:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1707:14:18"},"returnParameters":{"id":2703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2702,"mutability":"mutable","name":"r","nameLocation":"1765:1:18","nodeType":"VariableDeclaration","scope":2706,"src":"1745:21:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2680_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":2701,"nodeType":"UserDefinedTypeName","pathNode":{"id":2700,"name":"AddressSlot","nameLocations":["1745:11:18"],"nodeType":"IdentifierPath","referencedDeclaration":2680,"src":"1745:11:18"},"referencedDeclaration":2680,"src":"1745:11:18","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2680_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1744:23:18"},"scope":2784,"src":"1684:190:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2716,"nodeType":"Block","src":"2056:106:18","statements":[{"AST":{"nativeSrc":"2118:38:18","nodeType":"YulBlock","src":"2118:38:18","statements":[{"nativeSrc":"2132:14:18","nodeType":"YulAssignment","src":"2132:14:18","value":{"name":"slot","nativeSrc":"2142:4:18","nodeType":"YulIdentifier","src":"2142:4:18"},"variableNames":[{"name":"r.slot","nativeSrc":"2132:6:18","nodeType":"YulIdentifier","src":"2132:6:18"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2713,"isOffset":false,"isSlot":true,"src":"2132:6:18","suffix":"slot","valueSize":1},{"declaration":2709,"isOffset":false,"isSlot":false,"src":"2142:4:18","valueSize":1}],"id":2715,"nodeType":"InlineAssembly","src":"2109:47:18"}]},"documentation":{"id":2707,"nodeType":"StructuredDocumentation","src":"1880:87:18","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":2717,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"1981:14:18","nodeType":"FunctionDefinition","parameters":{"id":2710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2709,"mutability":"mutable","name":"slot","nameLocation":"2004:4:18","nodeType":"VariableDeclaration","scope":2717,"src":"1996:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2708,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1996:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1995:14:18"},"returnParameters":{"id":2714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2713,"mutability":"mutable","name":"r","nameLocation":"2053:1:18","nodeType":"VariableDeclaration","scope":2717,"src":"2033:21:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2683_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":2712,"nodeType":"UserDefinedTypeName","pathNode":{"id":2711,"name":"BooleanSlot","nameLocations":["2033:11:18"],"nodeType":"IdentifierPath","referencedDeclaration":2683,"src":"2033:11:18"},"referencedDeclaration":2683,"src":"2033:11:18","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2683_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2032:23:18"},"scope":2784,"src":"1972:190:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2727,"nodeType":"Block","src":"2344:106:18","statements":[{"AST":{"nativeSrc":"2406:38:18","nodeType":"YulBlock","src":"2406:38:18","statements":[{"nativeSrc":"2420:14:18","nodeType":"YulAssignment","src":"2420:14:18","value":{"name":"slot","nativeSrc":"2430:4:18","nodeType":"YulIdentifier","src":"2430:4:18"},"variableNames":[{"name":"r.slot","nativeSrc":"2420:6:18","nodeType":"YulIdentifier","src":"2420:6:18"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2724,"isOffset":false,"isSlot":true,"src":"2420:6:18","suffix":"slot","valueSize":1},{"declaration":2720,"isOffset":false,"isSlot":false,"src":"2430:4:18","valueSize":1}],"id":2726,"nodeType":"InlineAssembly","src":"2397:47:18"}]},"documentation":{"id":2718,"nodeType":"StructuredDocumentation","src":"2168:87:18","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":2728,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2269:14:18","nodeType":"FunctionDefinition","parameters":{"id":2721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2720,"mutability":"mutable","name":"slot","nameLocation":"2292:4:18","nodeType":"VariableDeclaration","scope":2728,"src":"2284:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2719,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2284:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2283:14:18"},"returnParameters":{"id":2725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2724,"mutability":"mutable","name":"r","nameLocation":"2341:1:18","nodeType":"VariableDeclaration","scope":2728,"src":"2321:21:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2686_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":2723,"nodeType":"UserDefinedTypeName","pathNode":{"id":2722,"name":"Bytes32Slot","nameLocations":["2321:11:18"],"nodeType":"IdentifierPath","referencedDeclaration":2686,"src":"2321:11:18"},"referencedDeclaration":2686,"src":"2321:11:18","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2686_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2320:23:18"},"scope":2784,"src":"2260:190:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2738,"nodeType":"Block","src":"2632:106:18","statements":[{"AST":{"nativeSrc":"2694:38:18","nodeType":"YulBlock","src":"2694:38:18","statements":[{"nativeSrc":"2708:14:18","nodeType":"YulAssignment","src":"2708:14:18","value":{"name":"slot","nativeSrc":"2718:4:18","nodeType":"YulIdentifier","src":"2718:4:18"},"variableNames":[{"name":"r.slot","nativeSrc":"2708:6:18","nodeType":"YulIdentifier","src":"2708:6:18"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2735,"isOffset":false,"isSlot":true,"src":"2708:6:18","suffix":"slot","valueSize":1},{"declaration":2731,"isOffset":false,"isSlot":false,"src":"2718:4:18","valueSize":1}],"id":2737,"nodeType":"InlineAssembly","src":"2685:47:18"}]},"documentation":{"id":2729,"nodeType":"StructuredDocumentation","src":"2456:87:18","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":2739,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2557:14:18","nodeType":"FunctionDefinition","parameters":{"id":2732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2731,"mutability":"mutable","name":"slot","nameLocation":"2580:4:18","nodeType":"VariableDeclaration","scope":2739,"src":"2572:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2730,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2572:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2571:14:18"},"returnParameters":{"id":2736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2735,"mutability":"mutable","name":"r","nameLocation":"2629:1:18","nodeType":"VariableDeclaration","scope":2739,"src":"2609:21:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2689_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":2734,"nodeType":"UserDefinedTypeName","pathNode":{"id":2733,"name":"Uint256Slot","nameLocations":["2609:11:18"],"nodeType":"IdentifierPath","referencedDeclaration":2689,"src":"2609:11:18"},"referencedDeclaration":2689,"src":"2609:11:18","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2689_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2608:23:18"},"scope":2784,"src":"2548:190:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2749,"nodeType":"Block","src":"2917:106:18","statements":[{"AST":{"nativeSrc":"2979:38:18","nodeType":"YulBlock","src":"2979:38:18","statements":[{"nativeSrc":"2993:14:18","nodeType":"YulAssignment","src":"2993:14:18","value":{"name":"slot","nativeSrc":"3003:4:18","nodeType":"YulIdentifier","src":"3003:4:18"},"variableNames":[{"name":"r.slot","nativeSrc":"2993:6:18","nodeType":"YulIdentifier","src":"2993:6:18"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2746,"isOffset":false,"isSlot":true,"src":"2993:6:18","suffix":"slot","valueSize":1},{"declaration":2742,"isOffset":false,"isSlot":false,"src":"3003:4:18","valueSize":1}],"id":2748,"nodeType":"InlineAssembly","src":"2970:47:18"}]},"documentation":{"id":2740,"nodeType":"StructuredDocumentation","src":"2744:86:18","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":2750,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"2844:13:18","nodeType":"FunctionDefinition","parameters":{"id":2743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2742,"mutability":"mutable","name":"slot","nameLocation":"2866:4:18","nodeType":"VariableDeclaration","scope":2750,"src":"2858:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2741,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2858:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2857:14:18"},"returnParameters":{"id":2747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2746,"mutability":"mutable","name":"r","nameLocation":"2914:1:18","nodeType":"VariableDeclaration","scope":2750,"src":"2895:20:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2692_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":2745,"nodeType":"UserDefinedTypeName","pathNode":{"id":2744,"name":"StringSlot","nameLocations":["2895:10:18"],"nodeType":"IdentifierPath","referencedDeclaration":2692,"src":"2895:10:18"},"referencedDeclaration":2692,"src":"2895:10:18","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2692_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"2894:22:18"},"scope":2784,"src":"2835:188:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2760,"nodeType":"Block","src":"3225:112:18","statements":[{"AST":{"nativeSrc":"3287:44:18","nodeType":"YulBlock","src":"3287:44:18","statements":[{"nativeSrc":"3301:20:18","nodeType":"YulAssignment","src":"3301:20:18","value":{"name":"store.slot","nativeSrc":"3311:10:18","nodeType":"YulIdentifier","src":"3311:10:18"},"variableNames":[{"name":"r.slot","nativeSrc":"3301:6:18","nodeType":"YulIdentifier","src":"3301:6:18"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2757,"isOffset":false,"isSlot":true,"src":"3301:6:18","suffix":"slot","valueSize":1},{"declaration":2753,"isOffset":false,"isSlot":true,"src":"3311:10:18","suffix":"slot","valueSize":1}],"id":2759,"nodeType":"InlineAssembly","src":"3278:53:18"}]},"documentation":{"id":2751,"nodeType":"StructuredDocumentation","src":"3029:101:18","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":2761,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3144:13:18","nodeType":"FunctionDefinition","parameters":{"id":2754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2753,"mutability":"mutable","name":"store","nameLocation":"3173:5:18","nodeType":"VariableDeclaration","scope":2761,"src":"3158:20:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2752,"name":"string","nodeType":"ElementaryTypeName","src":"3158:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3157:22:18"},"returnParameters":{"id":2758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2757,"mutability":"mutable","name":"r","nameLocation":"3222:1:18","nodeType":"VariableDeclaration","scope":2761,"src":"3203:20:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2692_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":2756,"nodeType":"UserDefinedTypeName","pathNode":{"id":2755,"name":"StringSlot","nameLocations":["3203:10:18"],"nodeType":"IdentifierPath","referencedDeclaration":2692,"src":"3203:10:18"},"referencedDeclaration":2692,"src":"3203:10:18","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2692_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3202:22:18"},"scope":2784,"src":"3135:202:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2771,"nodeType":"Block","src":"3513:106:18","statements":[{"AST":{"nativeSrc":"3575:38:18","nodeType":"YulBlock","src":"3575:38:18","statements":[{"nativeSrc":"3589:14:18","nodeType":"YulAssignment","src":"3589:14:18","value":{"name":"slot","nativeSrc":"3599:4:18","nodeType":"YulIdentifier","src":"3599:4:18"},"variableNames":[{"name":"r.slot","nativeSrc":"3589:6:18","nodeType":"YulIdentifier","src":"3589:6:18"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2768,"isOffset":false,"isSlot":true,"src":"3589:6:18","suffix":"slot","valueSize":1},{"declaration":2764,"isOffset":false,"isSlot":false,"src":"3599:4:18","valueSize":1}],"id":2770,"nodeType":"InlineAssembly","src":"3566:47:18"}]},"documentation":{"id":2762,"nodeType":"StructuredDocumentation","src":"3343:85:18","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":2772,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3442:12:18","nodeType":"FunctionDefinition","parameters":{"id":2765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2764,"mutability":"mutable","name":"slot","nameLocation":"3463:4:18","nodeType":"VariableDeclaration","scope":2772,"src":"3455:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2763,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3455:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3454:14:18"},"returnParameters":{"id":2769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2768,"mutability":"mutable","name":"r","nameLocation":"3510:1:18","nodeType":"VariableDeclaration","scope":2772,"src":"3492:19:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2695_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":2767,"nodeType":"UserDefinedTypeName","pathNode":{"id":2766,"name":"BytesSlot","nameLocations":["3492:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":2695,"src":"3492:9:18"},"referencedDeclaration":2695,"src":"3492:9:18","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2695_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3491:21:18"},"scope":2784,"src":"3433:186:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2782,"nodeType":"Block","src":"3816:112:18","statements":[{"AST":{"nativeSrc":"3878:44:18","nodeType":"YulBlock","src":"3878:44:18","statements":[{"nativeSrc":"3892:20:18","nodeType":"YulAssignment","src":"3892:20:18","value":{"name":"store.slot","nativeSrc":"3902:10:18","nodeType":"YulIdentifier","src":"3902:10:18"},"variableNames":[{"name":"r.slot","nativeSrc":"3892:6:18","nodeType":"YulIdentifier","src":"3892:6:18"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2779,"isOffset":false,"isSlot":true,"src":"3892:6:18","suffix":"slot","valueSize":1},{"declaration":2775,"isOffset":false,"isSlot":true,"src":"3902:10:18","suffix":"slot","valueSize":1}],"id":2781,"nodeType":"InlineAssembly","src":"3869:53:18"}]},"documentation":{"id":2773,"nodeType":"StructuredDocumentation","src":"3625:99:18","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":2783,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3738:12:18","nodeType":"FunctionDefinition","parameters":{"id":2776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2775,"mutability":"mutable","name":"store","nameLocation":"3765:5:18","nodeType":"VariableDeclaration","scope":2783,"src":"3751:19:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2774,"name":"bytes","nodeType":"ElementaryTypeName","src":"3751:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3750:21:18"},"returnParameters":{"id":2780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2779,"mutability":"mutable","name":"r","nameLocation":"3813:1:18","nodeType":"VariableDeclaration","scope":2783,"src":"3795:19:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2695_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":2778,"nodeType":"UserDefinedTypeName","pathNode":{"id":2777,"name":"BytesSlot","nameLocations":["3795:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":2695,"src":"3795:9:18"},"referencedDeclaration":2695,"src":"3795:9:18","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2695_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3794:21:18"},"scope":2784,"src":"3729:199:18","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2785,"src":"1245:2685:18","usedErrors":[],"usedEvents":[]}],"src":"193:3738:18"},"id":18},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[2808],"IERC165":[2820]},"id":2809,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2786,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:19"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":2788,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2809,"sourceUnit":2821,"src":"140:38:19","symbolAliases":[{"foreign":{"id":2787,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"148:7:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2790,"name":"IERC165","nameLocations":["687:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":2820,"src":"687:7:19"},"id":2791,"nodeType":"InheritanceSpecifier","src":"687:7:19"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":2789,"nodeType":"StructuredDocumentation","src":"180:478:19","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"},"fullyImplemented":true,"id":2808,"linearizedBaseContracts":[2808,2820],"name":"ERC165","nameLocation":"677:6:19","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[2819],"body":{"id":2806,"nodeType":"Block","src":"844:64:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2799,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2794,"src":"861:11:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2801,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"881:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$2820_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$2820_$","typeString":"type(contract IERC165)"}],"id":2800,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"876:4:19","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"876:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$2820","typeString":"type(contract IERC165)"}},"id":2803,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"890:11:19","memberName":"interfaceId","nodeType":"MemberAccess","src":"876:25:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"861:40:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2798,"id":2805,"nodeType":"Return","src":"854:47:19"}]},"documentation":{"id":2792,"nodeType":"StructuredDocumentation","src":"701:56:19","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2807,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"771:17:19","nodeType":"FunctionDefinition","parameters":{"id":2795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2794,"mutability":"mutable","name":"interfaceId","nameLocation":"796:11:19","nodeType":"VariableDeclaration","scope":2807,"src":"789:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2793,"name":"bytes4","nodeType":"ElementaryTypeName","src":"789:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"788:20:19"},"returnParameters":{"id":2798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2797,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2807,"src":"838:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2796,"name":"bool","nodeType":"ElementaryTypeName","src":"838:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"837:6:19"},"scope":2808,"src":"762:146:19","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":2809,"src":"659:251:19","usedErrors":[],"usedEvents":[]}],"src":"114:797:19"},"id":19},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[2820]},"id":2821,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2810,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:20"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":2811,"nodeType":"StructuredDocumentation","src":"141:279:20","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":2820,"linearizedBaseContracts":[2820],"name":"IERC165","nameLocation":"431:7:20","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2812,"nodeType":"StructuredDocumentation","src":"445:340:20","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":2819,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"799:17:20","nodeType":"FunctionDefinition","parameters":{"id":2815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2814,"mutability":"mutable","name":"interfaceId","nameLocation":"824:11:20","nodeType":"VariableDeclaration","scope":2819,"src":"817:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2813,"name":"bytes4","nodeType":"ElementaryTypeName","src":"817:6:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"816:20:20"},"returnParameters":{"id":2818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2817,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2819,"src":"860:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2816,"name":"bool","nodeType":"ElementaryTypeName","src":"860:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"859:6:20"},"scope":2820,"src":"790:76:20","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2821,"src":"421:447:20","usedErrors":[],"usedEvents":[]}],"src":"115:754:20"},"id":20},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[3874]},"id":3875,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2822,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"103:24:21"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":2823,"nodeType":"StructuredDocumentation","src":"129:73:21","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3874,"linearizedBaseContracts":[3874],"name":"Math","nameLocation":"211:4:21","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2824,"nodeType":"StructuredDocumentation","src":"222:50:21","text":" @dev Muldiv operation overflow."},"errorSelector":"227bc153","id":2826,"name":"MathOverflowedMulDiv","nameLocation":"283:20:21","nodeType":"ErrorDefinition","parameters":{"id":2825,"nodeType":"ParameterList","parameters":[],"src":"303:2:21"},"src":"277:29:21"},{"canonicalName":"Math.Rounding","id":2831,"members":[{"id":2827,"name":"Floor","nameLocation":"336:5:21","nodeType":"EnumValue","src":"336:5:21"},{"id":2828,"name":"Ceil","nameLocation":"379:4:21","nodeType":"EnumValue","src":"379:4:21"},{"id":2829,"name":"Trunc","nameLocation":"421:5:21","nodeType":"EnumValue","src":"421:5:21"},{"id":2830,"name":"Expand","nameLocation":"451:6:21","nodeType":"EnumValue","src":"451:6:21"}],"name":"Rounding","nameLocation":"317:8:21","nodeType":"EnumDefinition","src":"312:169:21"},{"body":{"id":2862,"nodeType":"Block","src":"661:140:21","statements":[{"id":2861,"nodeType":"UncheckedBlock","src":"671:124:21","statements":[{"assignments":[2844],"declarations":[{"constant":false,"id":2844,"mutability":"mutable","name":"c","nameLocation":"703:1:21","nodeType":"VariableDeclaration","scope":2861,"src":"695:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2843,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2848,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2845,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"707:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2846,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"711:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"707:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"695:17:21"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2849,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2844,"src":"730:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2850,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"734:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"730:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2856,"nodeType":"IfStatement","src":"726:28:21","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"745:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"752:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2854,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"744:10:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2842,"id":2855,"nodeType":"Return","src":"737:17:21"}},{"expression":{"components":[{"hexValue":"74727565","id":2857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"776:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2858,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2844,"src":"782:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2859,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"775:9:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2842,"id":2860,"nodeType":"Return","src":"768:16:21"}]}]},"documentation":{"id":2832,"nodeType":"StructuredDocumentation","src":"487:93:21","text":" @dev Returns the addition of two unsigned integers, with an overflow flag."},"id":2863,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"594:6:21","nodeType":"FunctionDefinition","parameters":{"id":2837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2834,"mutability":"mutable","name":"a","nameLocation":"609:1:21","nodeType":"VariableDeclaration","scope":2863,"src":"601:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2833,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2836,"mutability":"mutable","name":"b","nameLocation":"620:1:21","nodeType":"VariableDeclaration","scope":2863,"src":"612:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2835,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:21"},"returnParameters":{"id":2842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2839,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2863,"src":"646:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2838,"name":"bool","nodeType":"ElementaryTypeName","src":"646:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2841,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2863,"src":"652:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2840,"name":"uint256","nodeType":"ElementaryTypeName","src":"652:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:15:21"},"scope":3874,"src":"585:216:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2890,"nodeType":"Block","src":"984:113:21","statements":[{"id":2889,"nodeType":"UncheckedBlock","src":"994:97:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2875,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2868,"src":"1022:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2876,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2866,"src":"1026:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1022:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2882,"nodeType":"IfStatement","src":"1018:28:21","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2878,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1037:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2880,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1036:10:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2874,"id":2881,"nodeType":"Return","src":"1029:17:21"}},{"expression":{"components":[{"hexValue":"74727565","id":2883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1068:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2884,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2866,"src":"1074:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2885,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2868,"src":"1078:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1074:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2887,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1067:13:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2874,"id":2888,"nodeType":"Return","src":"1060:20:21"}]}]},"documentation":{"id":2864,"nodeType":"StructuredDocumentation","src":"807:96:21","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag."},"id":2891,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"917:6:21","nodeType":"FunctionDefinition","parameters":{"id":2869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2866,"mutability":"mutable","name":"a","nameLocation":"932:1:21","nodeType":"VariableDeclaration","scope":2891,"src":"924:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2865,"name":"uint256","nodeType":"ElementaryTypeName","src":"924:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2868,"mutability":"mutable","name":"b","nameLocation":"943:1:21","nodeType":"VariableDeclaration","scope":2891,"src":"935:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2867,"name":"uint256","nodeType":"ElementaryTypeName","src":"935:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"923:22:21"},"returnParameters":{"id":2874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2871,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2891,"src":"969:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2870,"name":"bool","nodeType":"ElementaryTypeName","src":"969:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2873,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2891,"src":"975:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2872,"name":"uint256","nodeType":"ElementaryTypeName","src":"975:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"968:15:21"},"scope":3874,"src":"908:189:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2932,"nodeType":"Block","src":"1283:417:21","statements":[{"id":2931,"nodeType":"UncheckedBlock","src":"1293:401:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2903,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2894,"src":"1551:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1556:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1551:6:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2910,"nodeType":"IfStatement","src":"1547:28:21","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":2906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1567:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":2907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1573:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2908,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1566:9:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2902,"id":2909,"nodeType":"Return","src":"1559:16:21"}},{"assignments":[2912],"declarations":[{"constant":false,"id":2912,"mutability":"mutable","name":"c","nameLocation":"1597:1:21","nodeType":"VariableDeclaration","scope":2931,"src":"1589:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2911,"name":"uint256","nodeType":"ElementaryTypeName","src":"1589:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2916,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2913,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2894,"src":"1601:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2914,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2896,"src":"1605:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1601:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1589:17:21"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2917,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2912,"src":"1624:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2918,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2894,"src":"1628:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2920,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2896,"src":"1633:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:10:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2926,"nodeType":"IfStatement","src":"1620:33:21","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1644:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1651:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2924,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1643:10:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2902,"id":2925,"nodeType":"Return","src":"1636:17:21"}},{"expression":{"components":[{"hexValue":"74727565","id":2927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1675:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2928,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2912,"src":"1681:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2929,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1674:9:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2902,"id":2930,"nodeType":"Return","src":"1667:16:21"}]}]},"documentation":{"id":2892,"nodeType":"StructuredDocumentation","src":"1103:99:21","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag."},"id":2933,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1216:6:21","nodeType":"FunctionDefinition","parameters":{"id":2897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2894,"mutability":"mutable","name":"a","nameLocation":"1231:1:21","nodeType":"VariableDeclaration","scope":2933,"src":"1223:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2893,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2896,"mutability":"mutable","name":"b","nameLocation":"1242:1:21","nodeType":"VariableDeclaration","scope":2933,"src":"1234:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2895,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1222:22:21"},"returnParameters":{"id":2902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2899,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2933,"src":"1268:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2898,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2901,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2933,"src":"1274:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2900,"name":"uint256","nodeType":"ElementaryTypeName","src":"1274:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1267:15:21"},"scope":3874,"src":"1207:493:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2960,"nodeType":"Block","src":"1887:114:21","statements":[{"id":2959,"nodeType":"UncheckedBlock","src":"1897:98:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2945,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"1925:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1930:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1925:6:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2952,"nodeType":"IfStatement","src":"1921:29:21","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1941:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1948:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2950,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1940:10:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2944,"id":2951,"nodeType":"Return","src":"1933:17:21"}},{"expression":{"components":[{"hexValue":"74727565","id":2953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1972:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2954,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2936,"src":"1978:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2955,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"1982:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1978:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2957,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1971:13:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2944,"id":2958,"nodeType":"Return","src":"1964:20:21"}]}]},"documentation":{"id":2934,"nodeType":"StructuredDocumentation","src":"1706:100:21","text":" @dev Returns the division of two unsigned integers, with a division by zero flag."},"id":2961,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1820:6:21","nodeType":"FunctionDefinition","parameters":{"id":2939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2936,"mutability":"mutable","name":"a","nameLocation":"1835:1:21","nodeType":"VariableDeclaration","scope":2961,"src":"1827:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2935,"name":"uint256","nodeType":"ElementaryTypeName","src":"1827:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2938,"mutability":"mutable","name":"b","nameLocation":"1846:1:21","nodeType":"VariableDeclaration","scope":2961,"src":"1838:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2937,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1826:22:21"},"returnParameters":{"id":2944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2941,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2961,"src":"1872:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2940,"name":"bool","nodeType":"ElementaryTypeName","src":"1872:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2943,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2961,"src":"1878:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2942,"name":"uint256","nodeType":"ElementaryTypeName","src":"1878:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1871:15:21"},"scope":3874,"src":"1811:190:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2988,"nodeType":"Block","src":"2198:114:21","statements":[{"id":2987,"nodeType":"UncheckedBlock","src":"2208:98:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2973,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2966,"src":"2236:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2241:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:6:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2980,"nodeType":"IfStatement","src":"2232:29:21","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2252:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2259:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2978,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2251:10:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2972,"id":2979,"nodeType":"Return","src":"2244:17:21"}},{"expression":{"components":[{"hexValue":"74727565","id":2981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2283:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2982,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2964,"src":"2289:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":2983,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2966,"src":"2293:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2289:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2985,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2282:13:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2972,"id":2986,"nodeType":"Return","src":"2275:20:21"}]}]},"documentation":{"id":2962,"nodeType":"StructuredDocumentation","src":"2007:110:21","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."},"id":2989,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2131:6:21","nodeType":"FunctionDefinition","parameters":{"id":2967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2964,"mutability":"mutable","name":"a","nameLocation":"2146:1:21","nodeType":"VariableDeclaration","scope":2989,"src":"2138:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2963,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2966,"mutability":"mutable","name":"b","nameLocation":"2157:1:21","nodeType":"VariableDeclaration","scope":2989,"src":"2149:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2965,"name":"uint256","nodeType":"ElementaryTypeName","src":"2149:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2137:22:21"},"returnParameters":{"id":2972,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2969,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2989,"src":"2183:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2968,"name":"bool","nodeType":"ElementaryTypeName","src":"2183:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2971,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2989,"src":"2189:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2970,"name":"uint256","nodeType":"ElementaryTypeName","src":"2189:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2182:15:21"},"scope":3874,"src":"2122:190:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3006,"nodeType":"Block","src":"2449:37:21","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2999,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2992,"src":"2466:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3000,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2994,"src":"2470:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2466:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3003,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2994,"src":"2478:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2466:13:21","trueExpression":{"id":3002,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2992,"src":"2474:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2998,"id":3005,"nodeType":"Return","src":"2459:20:21"}]},"documentation":{"id":2990,"nodeType":"StructuredDocumentation","src":"2318:59:21","text":" @dev Returns the largest of two numbers."},"id":3007,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"2391:3:21","nodeType":"FunctionDefinition","parameters":{"id":2995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2992,"mutability":"mutable","name":"a","nameLocation":"2403:1:21","nodeType":"VariableDeclaration","scope":3007,"src":"2395:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2991,"name":"uint256","nodeType":"ElementaryTypeName","src":"2395:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2994,"mutability":"mutable","name":"b","nameLocation":"2414:1:21","nodeType":"VariableDeclaration","scope":3007,"src":"2406:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2993,"name":"uint256","nodeType":"ElementaryTypeName","src":"2406:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2394:22:21"},"returnParameters":{"id":2998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2997,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3007,"src":"2440:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2996,"name":"uint256","nodeType":"ElementaryTypeName","src":"2440:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2439:9:21"},"scope":3874,"src":"2382:104:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3024,"nodeType":"Block","src":"2624:37:21","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3017,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3010,"src":"2641:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3018,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3012,"src":"2645:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2641:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3021,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3012,"src":"2653:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2641:13:21","trueExpression":{"id":3020,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3010,"src":"2649:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3016,"id":3023,"nodeType":"Return","src":"2634:20:21"}]},"documentation":{"id":3008,"nodeType":"StructuredDocumentation","src":"2492:60:21","text":" @dev Returns the smallest of two numbers."},"id":3025,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"2566:3:21","nodeType":"FunctionDefinition","parameters":{"id":3013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3010,"mutability":"mutable","name":"a","nameLocation":"2578:1:21","nodeType":"VariableDeclaration","scope":3025,"src":"2570:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3009,"name":"uint256","nodeType":"ElementaryTypeName","src":"2570:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3012,"mutability":"mutable","name":"b","nameLocation":"2589:1:21","nodeType":"VariableDeclaration","scope":3025,"src":"2581:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3011,"name":"uint256","nodeType":"ElementaryTypeName","src":"2581:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2569:22:21"},"returnParameters":{"id":3016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3015,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3025,"src":"2615:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3014,"name":"uint256","nodeType":"ElementaryTypeName","src":"2615:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2614:9:21"},"scope":3874,"src":"2557:104:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3047,"nodeType":"Block","src":"2845:82:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3035,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3028,"src":"2900:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3036,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3030,"src":"2904:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2900:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3038,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2899:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3039,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3028,"src":"2910:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3040,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3030,"src":"2914:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2910:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3042,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2909:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2919:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2909:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2899:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3034,"id":3046,"nodeType":"Return","src":"2892:28:21"}]},"documentation":{"id":3026,"nodeType":"StructuredDocumentation","src":"2667:102:21","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":3048,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"2783:7:21","nodeType":"FunctionDefinition","parameters":{"id":3031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3028,"mutability":"mutable","name":"a","nameLocation":"2799:1:21","nodeType":"VariableDeclaration","scope":3048,"src":"2791:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3027,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3030,"mutability":"mutable","name":"b","nameLocation":"2810:1:21","nodeType":"VariableDeclaration","scope":3048,"src":"2802:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3029,"name":"uint256","nodeType":"ElementaryTypeName","src":"2802:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2790:22:21"},"returnParameters":{"id":3034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3033,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3048,"src":"2836:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3032,"name":"uint256","nodeType":"ElementaryTypeName","src":"2836:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2835:9:21"},"scope":3874,"src":"2774:153:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3081,"nodeType":"Block","src":"3219:260:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3058,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3053,"src":"3233:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3238:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3233:6:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3066,"nodeType":"IfStatement","src":"3229:127:21","trueBody":{"id":3065,"nodeType":"Block","src":"3241:115:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3061,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"3340:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3062,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3053,"src":"3344:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3340:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3057,"id":3064,"nodeType":"Return","src":"3333:12:21"}]}},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3067,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"3444:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3449:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3444:6:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3071,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"3458:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3462:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3458:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3074,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3457:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3075,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3053,"src":"3467:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3457:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3471:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3457:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3444:28:21","trueExpression":{"hexValue":"30","id":3070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3453:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3057,"id":3080,"nodeType":"Return","src":"3437:35:21"}]},"documentation":{"id":3049,"nodeType":"StructuredDocumentation","src":"2933:210:21","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."},"id":3082,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"3157:7:21","nodeType":"FunctionDefinition","parameters":{"id":3054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3051,"mutability":"mutable","name":"a","nameLocation":"3173:1:21","nodeType":"VariableDeclaration","scope":3082,"src":"3165:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3050,"name":"uint256","nodeType":"ElementaryTypeName","src":"3165:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3053,"mutability":"mutable","name":"b","nameLocation":"3184:1:21","nodeType":"VariableDeclaration","scope":3082,"src":"3176:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3052,"name":"uint256","nodeType":"ElementaryTypeName","src":"3176:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3164:22:21"},"returnParameters":{"id":3057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3056,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3082,"src":"3210:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3055,"name":"uint256","nodeType":"ElementaryTypeName","src":"3210:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3209:9:21"},"scope":3874,"src":"3148:331:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3207,"nodeType":"Block","src":"3901:4018:21","statements":[{"id":3206,"nodeType":"UncheckedBlock","src":"3911:4002:21","statements":[{"assignments":[3095],"declarations":[{"constant":false,"id":3095,"mutability":"mutable","name":"prod0","nameLocation":"4240:5:21","nodeType":"VariableDeclaration","scope":3206,"src":"4232:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3094,"name":"uint256","nodeType":"ElementaryTypeName","src":"4232:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3099,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3096,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"4248:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3097,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3087,"src":"4252:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4248:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4232:21:21"},{"assignments":[3101],"declarations":[{"constant":false,"id":3101,"mutability":"mutable","name":"prod1","nameLocation":"4320:5:21","nodeType":"VariableDeclaration","scope":3206,"src":"4312:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3100,"name":"uint256","nodeType":"ElementaryTypeName","src":"4312:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3102,"nodeType":"VariableDeclarationStatement","src":"4312:13:21"},{"AST":{"nativeSrc":"4392:122:21","nodeType":"YulBlock","src":"4392:122:21","statements":[{"nativeSrc":"4410:30:21","nodeType":"YulVariableDeclaration","src":"4410:30:21","value":{"arguments":[{"name":"x","nativeSrc":"4427:1:21","nodeType":"YulIdentifier","src":"4427:1:21"},{"name":"y","nativeSrc":"4430:1:21","nodeType":"YulIdentifier","src":"4430:1:21"},{"arguments":[{"kind":"number","nativeSrc":"4437:1:21","nodeType":"YulLiteral","src":"4437:1:21","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"4433:3:21","nodeType":"YulIdentifier","src":"4433:3:21"},"nativeSrc":"4433:6:21","nodeType":"YulFunctionCall","src":"4433:6:21"}],"functionName":{"name":"mulmod","nativeSrc":"4420:6:21","nodeType":"YulIdentifier","src":"4420:6:21"},"nativeSrc":"4420:20:21","nodeType":"YulFunctionCall","src":"4420:20:21"},"variables":[{"name":"mm","nativeSrc":"4414:2:21","nodeType":"YulTypedName","src":"4414:2:21","type":""}]},{"nativeSrc":"4457:43:21","nodeType":"YulAssignment","src":"4457:43:21","value":{"arguments":[{"arguments":[{"name":"mm","nativeSrc":"4474:2:21","nodeType":"YulIdentifier","src":"4474:2:21"},{"name":"prod0","nativeSrc":"4478:5:21","nodeType":"YulIdentifier","src":"4478:5:21"}],"functionName":{"name":"sub","nativeSrc":"4470:3:21","nodeType":"YulIdentifier","src":"4470:3:21"},"nativeSrc":"4470:14:21","nodeType":"YulFunctionCall","src":"4470:14:21"},{"arguments":[{"name":"mm","nativeSrc":"4489:2:21","nodeType":"YulIdentifier","src":"4489:2:21"},{"name":"prod0","nativeSrc":"4493:5:21","nodeType":"YulIdentifier","src":"4493:5:21"}],"functionName":{"name":"lt","nativeSrc":"4486:2:21","nodeType":"YulIdentifier","src":"4486:2:21"},"nativeSrc":"4486:13:21","nodeType":"YulFunctionCall","src":"4486:13:21"}],"functionName":{"name":"sub","nativeSrc":"4466:3:21","nodeType":"YulIdentifier","src":"4466:3:21"},"nativeSrc":"4466:34:21","nodeType":"YulFunctionCall","src":"4466:34:21"},"variableNames":[{"name":"prod1","nativeSrc":"4457:5:21","nodeType":"YulIdentifier","src":"4457:5:21"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3095,"isOffset":false,"isSlot":false,"src":"4478:5:21","valueSize":1},{"declaration":3095,"isOffset":false,"isSlot":false,"src":"4493:5:21","valueSize":1},{"declaration":3101,"isOffset":false,"isSlot":false,"src":"4457:5:21","valueSize":1},{"declaration":3085,"isOffset":false,"isSlot":false,"src":"4427:1:21","valueSize":1},{"declaration":3087,"isOffset":false,"isSlot":false,"src":"4430:1:21","valueSize":1}],"id":3103,"nodeType":"InlineAssembly","src":"4383:131:21"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3104,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3101,"src":"4595:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4604:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4595:10:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3112,"nodeType":"IfStatement","src":"4591:368:21","trueBody":{"id":3111,"nodeType":"Block","src":"4607:352:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3107,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3095,"src":"4925:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3108,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"4933:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4925:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3093,"id":3110,"nodeType":"Return","src":"4918:26:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3113,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"5065:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3114,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3101,"src":"5080:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:20:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3120,"nodeType":"IfStatement","src":"5061:88:21","trueBody":{"id":3119,"nodeType":"Block","src":"5087:62:21","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3116,"name":"MathOverflowedMulDiv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2826,"src":"5112:20:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5112:22:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3118,"nodeType":"RevertStatement","src":"5105:29:21"}]}},{"assignments":[3122],"declarations":[{"constant":false,"id":3122,"mutability":"mutable","name":"remainder","nameLocation":"5412:9:21","nodeType":"VariableDeclaration","scope":3206,"src":"5404:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3121,"name":"uint256","nodeType":"ElementaryTypeName","src":"5404:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3123,"nodeType":"VariableDeclarationStatement","src":"5404:17:21"},{"AST":{"nativeSrc":"5444:291:21","nodeType":"YulBlock","src":"5444:291:21","statements":[{"nativeSrc":"5513:38:21","nodeType":"YulAssignment","src":"5513:38:21","value":{"arguments":[{"name":"x","nativeSrc":"5533:1:21","nodeType":"YulIdentifier","src":"5533:1:21"},{"name":"y","nativeSrc":"5536:1:21","nodeType":"YulIdentifier","src":"5536:1:21"},{"name":"denominator","nativeSrc":"5539:11:21","nodeType":"YulIdentifier","src":"5539:11:21"}],"functionName":{"name":"mulmod","nativeSrc":"5526:6:21","nodeType":"YulIdentifier","src":"5526:6:21"},"nativeSrc":"5526:25:21","nodeType":"YulFunctionCall","src":"5526:25:21"},"variableNames":[{"name":"remainder","nativeSrc":"5513:9:21","nodeType":"YulIdentifier","src":"5513:9:21"}]},{"nativeSrc":"5633:41:21","nodeType":"YulAssignment","src":"5633:41:21","value":{"arguments":[{"name":"prod1","nativeSrc":"5646:5:21","nodeType":"YulIdentifier","src":"5646:5:21"},{"arguments":[{"name":"remainder","nativeSrc":"5656:9:21","nodeType":"YulIdentifier","src":"5656:9:21"},{"name":"prod0","nativeSrc":"5667:5:21","nodeType":"YulIdentifier","src":"5667:5:21"}],"functionName":{"name":"gt","nativeSrc":"5653:2:21","nodeType":"YulIdentifier","src":"5653:2:21"},"nativeSrc":"5653:20:21","nodeType":"YulFunctionCall","src":"5653:20:21"}],"functionName":{"name":"sub","nativeSrc":"5642:3:21","nodeType":"YulIdentifier","src":"5642:3:21"},"nativeSrc":"5642:32:21","nodeType":"YulFunctionCall","src":"5642:32:21"},"variableNames":[{"name":"prod1","nativeSrc":"5633:5:21","nodeType":"YulIdentifier","src":"5633:5:21"}]},{"nativeSrc":"5691:30:21","nodeType":"YulAssignment","src":"5691:30:21","value":{"arguments":[{"name":"prod0","nativeSrc":"5704:5:21","nodeType":"YulIdentifier","src":"5704:5:21"},{"name":"remainder","nativeSrc":"5711:9:21","nodeType":"YulIdentifier","src":"5711:9:21"}],"functionName":{"name":"sub","nativeSrc":"5700:3:21","nodeType":"YulIdentifier","src":"5700:3:21"},"nativeSrc":"5700:21:21","nodeType":"YulFunctionCall","src":"5700:21:21"},"variableNames":[{"name":"prod0","nativeSrc":"5691:5:21","nodeType":"YulIdentifier","src":"5691:5:21"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3089,"isOffset":false,"isSlot":false,"src":"5539:11:21","valueSize":1},{"declaration":3095,"isOffset":false,"isSlot":false,"src":"5667:5:21","valueSize":1},{"declaration":3095,"isOffset":false,"isSlot":false,"src":"5691:5:21","valueSize":1},{"declaration":3095,"isOffset":false,"isSlot":false,"src":"5704:5:21","valueSize":1},{"declaration":3101,"isOffset":false,"isSlot":false,"src":"5633:5:21","valueSize":1},{"declaration":3101,"isOffset":false,"isSlot":false,"src":"5646:5:21","valueSize":1},{"declaration":3122,"isOffset":false,"isSlot":false,"src":"5513:9:21","valueSize":1},{"declaration":3122,"isOffset":false,"isSlot":false,"src":"5656:9:21","valueSize":1},{"declaration":3122,"isOffset":false,"isSlot":false,"src":"5711:9:21","valueSize":1},{"declaration":3085,"isOffset":false,"isSlot":false,"src":"5533:1:21","valueSize":1},{"declaration":3087,"isOffset":false,"isSlot":false,"src":"5536:1:21","valueSize":1}],"id":3124,"nodeType":"InlineAssembly","src":"5435:300:21"},{"assignments":[3126],"declarations":[{"constant":false,"id":3126,"mutability":"mutable","name":"twos","nameLocation":"5947:4:21","nodeType":"VariableDeclaration","scope":3206,"src":"5939:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3125,"name":"uint256","nodeType":"ElementaryTypeName","src":"5939:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3133,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3127,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"5954:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":3128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5969:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3129,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"5973:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5969:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3131,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5968:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5954:31:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5939:46:21"},{"AST":{"nativeSrc":"6008:362:21","nodeType":"YulBlock","src":"6008:362:21","statements":[{"nativeSrc":"6073:37:21","nodeType":"YulAssignment","src":"6073:37:21","value":{"arguments":[{"name":"denominator","nativeSrc":"6092:11:21","nodeType":"YulIdentifier","src":"6092:11:21"},{"name":"twos","nativeSrc":"6105:4:21","nodeType":"YulIdentifier","src":"6105:4:21"}],"functionName":{"name":"div","nativeSrc":"6088:3:21","nodeType":"YulIdentifier","src":"6088:3:21"},"nativeSrc":"6088:22:21","nodeType":"YulFunctionCall","src":"6088:22:21"},"variableNames":[{"name":"denominator","nativeSrc":"6073:11:21","nodeType":"YulIdentifier","src":"6073:11:21"}]},{"nativeSrc":"6177:25:21","nodeType":"YulAssignment","src":"6177:25:21","value":{"arguments":[{"name":"prod0","nativeSrc":"6190:5:21","nodeType":"YulIdentifier","src":"6190:5:21"},{"name":"twos","nativeSrc":"6197:4:21","nodeType":"YulIdentifier","src":"6197:4:21"}],"functionName":{"name":"div","nativeSrc":"6186:3:21","nodeType":"YulIdentifier","src":"6186:3:21"},"nativeSrc":"6186:16:21","nodeType":"YulFunctionCall","src":"6186:16:21"},"variableNames":[{"name":"prod0","nativeSrc":"6177:5:21","nodeType":"YulIdentifier","src":"6177:5:21"}]},{"nativeSrc":"6317:39:21","nodeType":"YulAssignment","src":"6317:39:21","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"6337:1:21","nodeType":"YulLiteral","src":"6337:1:21","type":"","value":"0"},{"name":"twos","nativeSrc":"6340:4:21","nodeType":"YulIdentifier","src":"6340:4:21"}],"functionName":{"name":"sub","nativeSrc":"6333:3:21","nodeType":"YulIdentifier","src":"6333:3:21"},"nativeSrc":"6333:12:21","nodeType":"YulFunctionCall","src":"6333:12:21"},{"name":"twos","nativeSrc":"6347:4:21","nodeType":"YulIdentifier","src":"6347:4:21"}],"functionName":{"name":"div","nativeSrc":"6329:3:21","nodeType":"YulIdentifier","src":"6329:3:21"},"nativeSrc":"6329:23:21","nodeType":"YulFunctionCall","src":"6329:23:21"},{"kind":"number","nativeSrc":"6354:1:21","nodeType":"YulLiteral","src":"6354:1:21","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"6325:3:21","nodeType":"YulIdentifier","src":"6325:3:21"},"nativeSrc":"6325:31:21","nodeType":"YulFunctionCall","src":"6325:31:21"},"variableNames":[{"name":"twos","nativeSrc":"6317:4:21","nodeType":"YulIdentifier","src":"6317:4:21"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3089,"isOffset":false,"isSlot":false,"src":"6073:11:21","valueSize":1},{"declaration":3089,"isOffset":false,"isSlot":false,"src":"6092:11:21","valueSize":1},{"declaration":3095,"isOffset":false,"isSlot":false,"src":"6177:5:21","valueSize":1},{"declaration":3095,"isOffset":false,"isSlot":false,"src":"6190:5:21","valueSize":1},{"declaration":3126,"isOffset":false,"isSlot":false,"src":"6105:4:21","valueSize":1},{"declaration":3126,"isOffset":false,"isSlot":false,"src":"6197:4:21","valueSize":1},{"declaration":3126,"isOffset":false,"isSlot":false,"src":"6317:4:21","valueSize":1},{"declaration":3126,"isOffset":false,"isSlot":false,"src":"6340:4:21","valueSize":1},{"declaration":3126,"isOffset":false,"isSlot":false,"src":"6347:4:21","valueSize":1}],"id":3134,"nodeType":"InlineAssembly","src":"5999:371:21"},{"expression":{"id":3139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3135,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3095,"src":"6436:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3136,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3101,"src":"6445:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3137,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3126,"src":"6453:4:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6445:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6436:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3140,"nodeType":"ExpressionStatement","src":"6436:21:21"},{"assignments":[3142],"declarations":[{"constant":false,"id":3142,"mutability":"mutable","name":"inverse","nameLocation":"6783:7:21","nodeType":"VariableDeclaration","scope":3206,"src":"6775:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3141,"name":"uint256","nodeType":"ElementaryTypeName","src":"6775:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3149,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6794:1:21","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3144,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"6798:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6794:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3146,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6793:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":3147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6813:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6793:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6775:39:21"},{"expression":{"id":3156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3150,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"7031:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7042:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3152,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"7046:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3153,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"7060:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7046:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7042:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7031:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3157,"nodeType":"ExpressionStatement","src":"7031:36:21"},{"expression":{"id":3164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3158,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"7100:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7111:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3160,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"7115:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3161,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"7129:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7115:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7111:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7100:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3165,"nodeType":"ExpressionStatement","src":"7100:36:21"},{"expression":{"id":3172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3166,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"7170:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7181:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3168,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"7185:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3169,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"7199:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7185:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7181:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7170:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3173,"nodeType":"ExpressionStatement","src":"7170:36:21"},{"expression":{"id":3180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3174,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"7240:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7251:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3176,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"7255:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3177,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"7269:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7255:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7251:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7240:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3181,"nodeType":"ExpressionStatement","src":"7240:36:21"},{"expression":{"id":3188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3182,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"7310:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7321:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3184,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"7325:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3185,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"7339:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7325:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7321:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7310:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3189,"nodeType":"ExpressionStatement","src":"7310:36:21"},{"expression":{"id":3196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3190,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"7381:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7392:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3192,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"7396:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3193,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"7410:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7396:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7392:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7381:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3197,"nodeType":"ExpressionStatement","src":"7381:36:21"},{"expression":{"id":3202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3198,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3092,"src":"7851:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3199,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3095,"src":"7860:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3200,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"7868:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7860:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7851:24:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3203,"nodeType":"ExpressionStatement","src":"7851:24:21"},{"expression":{"id":3204,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3092,"src":"7896:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3093,"id":3205,"nodeType":"Return","src":"7889:13:21"}]}]},"documentation":{"id":3083,"nodeType":"StructuredDocumentation","src":"3485:313:21","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."},"id":3208,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"3812:6:21","nodeType":"FunctionDefinition","parameters":{"id":3090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3085,"mutability":"mutable","name":"x","nameLocation":"3827:1:21","nodeType":"VariableDeclaration","scope":3208,"src":"3819:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3084,"name":"uint256","nodeType":"ElementaryTypeName","src":"3819:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3087,"mutability":"mutable","name":"y","nameLocation":"3838:1:21","nodeType":"VariableDeclaration","scope":3208,"src":"3830:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3086,"name":"uint256","nodeType":"ElementaryTypeName","src":"3830:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3089,"mutability":"mutable","name":"denominator","nameLocation":"3849:11:21","nodeType":"VariableDeclaration","scope":3208,"src":"3841:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3088,"name":"uint256","nodeType":"ElementaryTypeName","src":"3841:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3818:43:21"},"returnParameters":{"id":3093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3092,"mutability":"mutable","name":"result","nameLocation":"3893:6:21","nodeType":"VariableDeclaration","scope":3208,"src":"3885:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3091,"name":"uint256","nodeType":"ElementaryTypeName","src":"3885:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3884:16:21"},"scope":3874,"src":"3803:4116:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3250,"nodeType":"Block","src":"8161:192:21","statements":[{"assignments":[3224],"declarations":[{"constant":false,"id":3224,"mutability":"mutable","name":"result","nameLocation":"8179:6:21","nodeType":"VariableDeclaration","scope":3250,"src":"8171:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3223,"name":"uint256","nodeType":"ElementaryTypeName","src":"8171:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3230,"initialValue":{"arguments":[{"id":3226,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3211,"src":"8195:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3227,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3213,"src":"8198:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3228,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3215,"src":"8201:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3225,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[3208,3251],"referencedDeclaration":3208,"src":"8188:6:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8188:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8171:42:21"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3232,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3218,"src":"8244:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2831","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2831","typeString":"enum Math.Rounding"}],"id":3231,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3873,"src":"8227:16:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2831_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8227:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3235,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3211,"src":"8264:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3236,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3213,"src":"8267:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3237,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3215,"src":"8270:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3234,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"8257:6:21","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8257:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8285:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8257:29:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8227:59:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3247,"nodeType":"IfStatement","src":"8223:101:21","trueBody":{"id":3246,"nodeType":"Block","src":"8288:36:21","statements":[{"expression":{"id":3244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3242,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3224,"src":"8302:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8312:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8302:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3245,"nodeType":"ExpressionStatement","src":"8302:11:21"}]}},{"expression":{"id":3248,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3224,"src":"8340:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3222,"id":3249,"nodeType":"Return","src":"8333:13:21"}]},"documentation":{"id":3209,"nodeType":"StructuredDocumentation","src":"7925:121:21","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":3251,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"8060:6:21","nodeType":"FunctionDefinition","parameters":{"id":3219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3211,"mutability":"mutable","name":"x","nameLocation":"8075:1:21","nodeType":"VariableDeclaration","scope":3251,"src":"8067:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3210,"name":"uint256","nodeType":"ElementaryTypeName","src":"8067:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3213,"mutability":"mutable","name":"y","nameLocation":"8086:1:21","nodeType":"VariableDeclaration","scope":3251,"src":"8078:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3212,"name":"uint256","nodeType":"ElementaryTypeName","src":"8078:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3215,"mutability":"mutable","name":"denominator","nameLocation":"8097:11:21","nodeType":"VariableDeclaration","scope":3251,"src":"8089:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3214,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3218,"mutability":"mutable","name":"rounding","nameLocation":"8119:8:21","nodeType":"VariableDeclaration","scope":3251,"src":"8110:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2831","typeString":"enum Math.Rounding"},"typeName":{"id":3217,"nodeType":"UserDefinedTypeName","pathNode":{"id":3216,"name":"Rounding","nameLocations":["8110:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":2831,"src":"8110:8:21"},"referencedDeclaration":2831,"src":"8110:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2831","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8066:62:21"},"returnParameters":{"id":3222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3221,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3251,"src":"8152:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3220,"name":"uint256","nodeType":"ElementaryTypeName","src":"8152:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8151:9:21"},"scope":3874,"src":"8051:302:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3362,"nodeType":"Block","src":"8644:1585:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3259,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3254,"src":"8658:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8663:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8658:6:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3265,"nodeType":"IfStatement","src":"8654:45:21","trueBody":{"id":3264,"nodeType":"Block","src":"8666:33:21","statements":[{"expression":{"hexValue":"30","id":3262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8687:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3258,"id":3263,"nodeType":"Return","src":"8680:8:21"}]}},{"assignments":[3267],"declarations":[{"constant":false,"id":3267,"mutability":"mutable","name":"result","nameLocation":"9386:6:21","nodeType":"VariableDeclaration","scope":3362,"src":"9378:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3266,"name":"uint256","nodeType":"ElementaryTypeName","src":"9378:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3276,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9395:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3270,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3254,"src":"9406:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3269,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3530,3565],"referencedDeclaration":3530,"src":"9401:4:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3271,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9401:7:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9412:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9401:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3274,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9400:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9395:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9378:36:21"},{"id":3361,"nodeType":"UncheckedBlock","src":"9815:408:21","statements":[{"expression":{"id":3286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3277,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"9839:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3278,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"9849:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3279,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3254,"src":"9858:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3280,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"9862:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9858:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9849:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3283,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9848:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9873:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9848:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9839:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3287,"nodeType":"ExpressionStatement","src":"9839:35:21"},{"expression":{"id":3297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3288,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"9888:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3289,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"9898:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3290,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3254,"src":"9907:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3291,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"9911:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9907:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9898:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3294,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9897:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9922:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9897:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9888:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3298,"nodeType":"ExpressionStatement","src":"9888:35:21"},{"expression":{"id":3308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3299,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"9937:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3300,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"9947:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3301,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3254,"src":"9956:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3302,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"9960:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9956:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9947:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3305,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9946:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9971:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9946:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9937:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3309,"nodeType":"ExpressionStatement","src":"9937:35:21"},{"expression":{"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3310,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"9986:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3311,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"9996:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3312,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3254,"src":"10005:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3313,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"10009:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10005:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9996:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3316,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9995:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10020:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9995:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9986:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3320,"nodeType":"ExpressionStatement","src":"9986:35:21"},{"expression":{"id":3330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3321,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"10035:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3322,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"10045:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3323,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3254,"src":"10054:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3324,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"10058:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10054:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10045:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3327,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10044:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10069:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10044:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10035:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3331,"nodeType":"ExpressionStatement","src":"10035:35:21"},{"expression":{"id":3341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3332,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"10084:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3333,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"10094:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3334,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3254,"src":"10103:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3335,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"10107:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10103:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10094:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3338,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10093:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10118:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10093:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10084:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3342,"nodeType":"ExpressionStatement","src":"10084:35:21"},{"expression":{"id":3352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3343,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"10133:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3344,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"10143:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3345,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3254,"src":"10152:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3346,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"10156:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10152:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10143:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3349,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10142:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10142:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10133:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3353,"nodeType":"ExpressionStatement","src":"10133:35:21"},{"expression":{"arguments":[{"id":3355,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"10193:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3356,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3254,"src":"10201:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3357,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"10205:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10201:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3354,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3025,"src":"10189:3:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10189:23:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3258,"id":3360,"nodeType":"Return","src":"10182:30:21"}]}]},"documentation":{"id":3252,"nodeType":"StructuredDocumentation","src":"8359:223:21","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":3363,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8596:4:21","nodeType":"FunctionDefinition","parameters":{"id":3255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3254,"mutability":"mutable","name":"a","nameLocation":"8609:1:21","nodeType":"VariableDeclaration","scope":3363,"src":"8601:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3253,"name":"uint256","nodeType":"ElementaryTypeName","src":"8601:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8600:11:21"},"returnParameters":{"id":3258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3257,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3363,"src":"8635:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3256,"name":"uint256","nodeType":"ElementaryTypeName","src":"8635:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8634:9:21"},"scope":3874,"src":"8587:1642:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3397,"nodeType":"Block","src":"10405:164:21","statements":[{"id":3396,"nodeType":"UncheckedBlock","src":"10415:148:21","statements":[{"assignments":[3375],"declarations":[{"constant":false,"id":3375,"mutability":"mutable","name":"result","nameLocation":"10447:6:21","nodeType":"VariableDeclaration","scope":3396,"src":"10439:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3374,"name":"uint256","nodeType":"ElementaryTypeName","src":"10439:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3379,"initialValue":{"arguments":[{"id":3377,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"10461:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3376,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[3363,3398],"referencedDeclaration":3363,"src":"10456:4:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10456:7:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10439:24:21"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3380,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3375,"src":"10484:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3382,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"10511:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2831","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2831","typeString":"enum Math.Rounding"}],"id":3381,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3873,"src":"10494:16:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2831_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10494:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3384,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3375,"src":"10524:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3385,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3375,"src":"10533:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3387,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"10542:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10494:49:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10550:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10494:57:21","trueExpression":{"hexValue":"31","id":3390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10546:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3393,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10493:59:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"10484:68:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3373,"id":3395,"nodeType":"Return","src":"10477:75:21"}]}]},"documentation":{"id":3364,"nodeType":"StructuredDocumentation","src":"10235:89:21","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":3398,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"10338:4:21","nodeType":"FunctionDefinition","parameters":{"id":3370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3366,"mutability":"mutable","name":"a","nameLocation":"10351:1:21","nodeType":"VariableDeclaration","scope":3398,"src":"10343:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3365,"name":"uint256","nodeType":"ElementaryTypeName","src":"10343:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3369,"mutability":"mutable","name":"rounding","nameLocation":"10363:8:21","nodeType":"VariableDeclaration","scope":3398,"src":"10354:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2831","typeString":"enum Math.Rounding"},"typeName":{"id":3368,"nodeType":"UserDefinedTypeName","pathNode":{"id":3367,"name":"Rounding","nameLocations":["10354:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":2831,"src":"10354:8:21"},"referencedDeclaration":2831,"src":"10354:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2831","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10342:30:21"},"returnParameters":{"id":3373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3372,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3398,"src":"10396:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3371,"name":"uint256","nodeType":"ElementaryTypeName","src":"10396:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10395:9:21"},"scope":3874,"src":"10329:240:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3529,"nodeType":"Block","src":"10760:922:21","statements":[{"assignments":[3407],"declarations":[{"constant":false,"id":3407,"mutability":"mutable","name":"result","nameLocation":"10778:6:21","nodeType":"VariableDeclaration","scope":3529,"src":"10770:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3406,"name":"uint256","nodeType":"ElementaryTypeName","src":"10770:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3409,"initialValue":{"hexValue":"30","id":3408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10787:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10770:18:21"},{"id":3526,"nodeType":"UncheckedBlock","src":"10798:855:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3410,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3401,"src":"10826:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10835:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10826:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10841:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10826:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3424,"nodeType":"IfStatement","src":"10822:99:21","trueBody":{"id":3423,"nodeType":"Block","src":"10844:77:21","statements":[{"expression":{"id":3417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3415,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3401,"src":"10862:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10872:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10862:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3418,"nodeType":"ExpressionStatement","src":"10862:13:21"},{"expression":{"id":3421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3419,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3407,"src":"10893:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":3420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10893:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3422,"nodeType":"ExpressionStatement","src":"10893:13:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3425,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3401,"src":"10938:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10947:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10938:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10952:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10938:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3439,"nodeType":"IfStatement","src":"10934:96:21","trueBody":{"id":3438,"nodeType":"Block","src":"10955:75:21","statements":[{"expression":{"id":3432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3430,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3401,"src":"10973:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10983:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10973:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3433,"nodeType":"ExpressionStatement","src":"10973:12:21"},{"expression":{"id":3436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3434,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3407,"src":"11003:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11013:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11003:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3437,"nodeType":"ExpressionStatement","src":"11003:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3440,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3401,"src":"11047:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11056:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11047:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11061:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11047:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3454,"nodeType":"IfStatement","src":"11043:96:21","trueBody":{"id":3453,"nodeType":"Block","src":"11064:75:21","statements":[{"expression":{"id":3447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3445,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3401,"src":"11082:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11092:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11082:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3448,"nodeType":"ExpressionStatement","src":"11082:12:21"},{"expression":{"id":3451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3449,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3407,"src":"11112:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11122:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11112:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3452,"nodeType":"ExpressionStatement","src":"11112:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3455,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3401,"src":"11156:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11165:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11156:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11170:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11156:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3469,"nodeType":"IfStatement","src":"11152:96:21","trueBody":{"id":3468,"nodeType":"Block","src":"11173:75:21","statements":[{"expression":{"id":3462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3460,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3401,"src":"11191:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11201:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11191:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3463,"nodeType":"ExpressionStatement","src":"11191:12:21"},{"expression":{"id":3466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3464,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3407,"src":"11221:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11231:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11221:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3467,"nodeType":"ExpressionStatement","src":"11221:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3470,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3401,"src":"11265:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11274:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11265:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11278:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11265:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3484,"nodeType":"IfStatement","src":"11261:93:21","trueBody":{"id":3483,"nodeType":"Block","src":"11281:73:21","statements":[{"expression":{"id":3477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3475,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3401,"src":"11299:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":3476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11309:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11299:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3478,"nodeType":"ExpressionStatement","src":"11299:11:21"},{"expression":{"id":3481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3479,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3407,"src":"11328:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11338:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11328:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3482,"nodeType":"ExpressionStatement","src":"11328:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3485,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3401,"src":"11371:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":3486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11380:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11371:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11384:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11371:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3499,"nodeType":"IfStatement","src":"11367:93:21","trueBody":{"id":3498,"nodeType":"Block","src":"11387:73:21","statements":[{"expression":{"id":3492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3490,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3401,"src":"11405:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11415:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11405:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3493,"nodeType":"ExpressionStatement","src":"11405:11:21"},{"expression":{"id":3496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3494,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3407,"src":"11434:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11444:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11434:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3497,"nodeType":"ExpressionStatement","src":"11434:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3500,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3401,"src":"11477:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":3501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11486:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11477:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11490:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11477:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3514,"nodeType":"IfStatement","src":"11473:93:21","trueBody":{"id":3513,"nodeType":"Block","src":"11493:73:21","statements":[{"expression":{"id":3507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3505,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3401,"src":"11511:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":3506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11521:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11511:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3508,"nodeType":"ExpressionStatement","src":"11511:11:21"},{"expression":{"id":3511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3509,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3407,"src":"11540:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11550:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11540:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3512,"nodeType":"ExpressionStatement","src":"11540:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3515,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3401,"src":"11583:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11592:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11583:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11596:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11583:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3525,"nodeType":"IfStatement","src":"11579:64:21","trueBody":{"id":3524,"nodeType":"Block","src":"11599:44:21","statements":[{"expression":{"id":3522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3520,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3407,"src":"11617:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11627:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11617:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3523,"nodeType":"ExpressionStatement","src":"11617:11:21"}]}}]},{"expression":{"id":3527,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3407,"src":"11669:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3405,"id":3528,"nodeType":"Return","src":"11662:13:21"}]},"documentation":{"id":3399,"nodeType":"StructuredDocumentation","src":"10575:119:21","text":" @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":3530,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"10708:4:21","nodeType":"FunctionDefinition","parameters":{"id":3402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3401,"mutability":"mutable","name":"value","nameLocation":"10721:5:21","nodeType":"VariableDeclaration","scope":3530,"src":"10713:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3400,"name":"uint256","nodeType":"ElementaryTypeName","src":"10713:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10712:15:21"},"returnParameters":{"id":3405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3404,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3530,"src":"10751:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3403,"name":"uint256","nodeType":"ElementaryTypeName","src":"10751:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10750:9:21"},"scope":3874,"src":"10699:983:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3564,"nodeType":"Block","src":"11915:168:21","statements":[{"id":3563,"nodeType":"UncheckedBlock","src":"11925:152:21","statements":[{"assignments":[3542],"declarations":[{"constant":false,"id":3542,"mutability":"mutable","name":"result","nameLocation":"11957:6:21","nodeType":"VariableDeclaration","scope":3563,"src":"11949:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3541,"name":"uint256","nodeType":"ElementaryTypeName","src":"11949:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3546,"initialValue":{"arguments":[{"id":3544,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3533,"src":"11971:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3543,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3530,3565],"referencedDeclaration":3530,"src":"11966:4:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11966:11:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11949:28:21"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3547,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"11998:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3549,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"12025:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2831","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2831","typeString":"enum Math.Rounding"}],"id":3548,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3873,"src":"12008:16:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2831_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12008:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":3552,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"12043:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3554,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3533,"src":"12052:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12008:49:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12064:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12008:57:21","trueExpression":{"hexValue":"31","id":3557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12060:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3560,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12007:59:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11998:68:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3540,"id":3562,"nodeType":"Return","src":"11991:75:21"}]}]},"documentation":{"id":3531,"nodeType":"StructuredDocumentation","src":"11688:142:21","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3565,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"11844:4:21","nodeType":"FunctionDefinition","parameters":{"id":3537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3533,"mutability":"mutable","name":"value","nameLocation":"11857:5:21","nodeType":"VariableDeclaration","scope":3565,"src":"11849:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3532,"name":"uint256","nodeType":"ElementaryTypeName","src":"11849:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3536,"mutability":"mutable","name":"rounding","nameLocation":"11873:8:21","nodeType":"VariableDeclaration","scope":3565,"src":"11864:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2831","typeString":"enum Math.Rounding"},"typeName":{"id":3535,"nodeType":"UserDefinedTypeName","pathNode":{"id":3534,"name":"Rounding","nameLocations":["11864:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":2831,"src":"11864:8:21"},"referencedDeclaration":2831,"src":"11864:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2831","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11848:34:21"},"returnParameters":{"id":3540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3539,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3565,"src":"11906:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3538,"name":"uint256","nodeType":"ElementaryTypeName","src":"11906:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11905:9:21"},"scope":3874,"src":"11835:248:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3693,"nodeType":"Block","src":"12276:854:21","statements":[{"assignments":[3574],"declarations":[{"constant":false,"id":3574,"mutability":"mutable","name":"result","nameLocation":"12294:6:21","nodeType":"VariableDeclaration","scope":3693,"src":"12286:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3573,"name":"uint256","nodeType":"ElementaryTypeName","src":"12286:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3576,"initialValue":{"hexValue":"30","id":3575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12303:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12286:18:21"},{"id":3690,"nodeType":"UncheckedBlock","src":"12314:787:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3577,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"12342:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3580,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12351:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12357:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12351:8:21","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12342:17:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3593,"nodeType":"IfStatement","src":"12338:103:21","trueBody":{"id":3592,"nodeType":"Block","src":"12361:80:21","statements":[{"expression":{"id":3586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3582,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"12379:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3585,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12388:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12394:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12388:8:21","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12379:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3587,"nodeType":"ExpressionStatement","src":"12379:17:21"},{"expression":{"id":3590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3588,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"12414:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12424:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12414:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3591,"nodeType":"ExpressionStatement","src":"12414:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3594,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"12458:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3597,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12467:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12473:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12467:8:21","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12458:17:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3610,"nodeType":"IfStatement","src":"12454:103:21","trueBody":{"id":3609,"nodeType":"Block","src":"12477:80:21","statements":[{"expression":{"id":3603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3599,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"12495:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3602,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12504:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12510:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12504:8:21","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12495:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3604,"nodeType":"ExpressionStatement","src":"12495:17:21"},{"expression":{"id":3607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3605,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"12530:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12540:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12530:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3608,"nodeType":"ExpressionStatement","src":"12530:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3611,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"12574:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3614,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12583:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12589:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12583:8:21","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12574:17:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3627,"nodeType":"IfStatement","src":"12570:103:21","trueBody":{"id":3626,"nodeType":"Block","src":"12593:80:21","statements":[{"expression":{"id":3620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3616,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"12611:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3619,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12620:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12626:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12620:8:21","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12611:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3621,"nodeType":"ExpressionStatement","src":"12611:17:21"},{"expression":{"id":3624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3622,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"12646:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12656:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12646:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3625,"nodeType":"ExpressionStatement","src":"12646:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3628,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"12690:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3631,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12699:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12705:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12699:7:21","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12690:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3644,"nodeType":"IfStatement","src":"12686:100:21","trueBody":{"id":3643,"nodeType":"Block","src":"12708:78:21","statements":[{"expression":{"id":3637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3633,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"12726:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3636,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12735:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12735:7:21","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12726:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3638,"nodeType":"ExpressionStatement","src":"12726:16:21"},{"expression":{"id":3641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3639,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"12760:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12760:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3642,"nodeType":"ExpressionStatement","src":"12760:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3645,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"12803:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3648,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12812:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12818:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12812:7:21","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12803:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3661,"nodeType":"IfStatement","src":"12799:100:21","trueBody":{"id":3660,"nodeType":"Block","src":"12821:78:21","statements":[{"expression":{"id":3654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3650,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"12839:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3653,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12848:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12854:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12848:7:21","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12839:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3655,"nodeType":"ExpressionStatement","src":"12839:16:21"},{"expression":{"id":3658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3656,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"12873:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12883:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12873:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3659,"nodeType":"ExpressionStatement","src":"12873:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3662,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"12916:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3665,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12925:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12931:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12925:7:21","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12916:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3678,"nodeType":"IfStatement","src":"12912:100:21","trueBody":{"id":3677,"nodeType":"Block","src":"12934:78:21","statements":[{"expression":{"id":3671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3667,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"12952:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3670,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12961:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12967:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12961:7:21","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12952:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3672,"nodeType":"ExpressionStatement","src":"12952:16:21"},{"expression":{"id":3675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3673,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"12986:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12996:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12986:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3676,"nodeType":"ExpressionStatement","src":"12986:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3679,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"13029:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":3682,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13038:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":3681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13044:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13038:7:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"13029:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3689,"nodeType":"IfStatement","src":"13025:66:21","trueBody":{"id":3688,"nodeType":"Block","src":"13047:44:21","statements":[{"expression":{"id":3686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3684,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"13065:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13075:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13065:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3687,"nodeType":"ExpressionStatement","src":"13065:11:21"}]}}]},{"expression":{"id":3691,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"13117:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3572,"id":3692,"nodeType":"Return","src":"13110:13:21"}]},"documentation":{"id":3566,"nodeType":"StructuredDocumentation","src":"12089:120:21","text":" @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":3694,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"12223:5:21","nodeType":"FunctionDefinition","parameters":{"id":3569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3568,"mutability":"mutable","name":"value","nameLocation":"12237:5:21","nodeType":"VariableDeclaration","scope":3694,"src":"12229:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3567,"name":"uint256","nodeType":"ElementaryTypeName","src":"12229:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12228:15:21"},"returnParameters":{"id":3572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3571,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3694,"src":"12267:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3570,"name":"uint256","nodeType":"ElementaryTypeName","src":"12267:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12266:9:21"},"scope":3874,"src":"12214:916:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3728,"nodeType":"Block","src":"13365:170:21","statements":[{"id":3727,"nodeType":"UncheckedBlock","src":"13375:154:21","statements":[{"assignments":[3706],"declarations":[{"constant":false,"id":3706,"mutability":"mutable","name":"result","nameLocation":"13407:6:21","nodeType":"VariableDeclaration","scope":3727,"src":"13399:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3705,"name":"uint256","nodeType":"ElementaryTypeName","src":"13399:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3710,"initialValue":{"arguments":[{"id":3708,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"13422:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3707,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[3694,3729],"referencedDeclaration":3694,"src":"13416:5:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13416:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13399:29:21"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3711,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"13449:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3713,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"13476:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2831","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2831","typeString":"enum Math.Rounding"}],"id":3712,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3873,"src":"13459:16:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2831_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13459:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13489:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":3716,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"13495:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3718,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"13504:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:20:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13459:50:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13516:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13459:58:21","trueExpression":{"hexValue":"31","id":3721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13512:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3724,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13458:60:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13449:69:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3704,"id":3726,"nodeType":"Return","src":"13442:76:21"}]}]},"documentation":{"id":3695,"nodeType":"StructuredDocumentation","src":"13136:143:21","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3729,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"13293:5:21","nodeType":"FunctionDefinition","parameters":{"id":3701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3697,"mutability":"mutable","name":"value","nameLocation":"13307:5:21","nodeType":"VariableDeclaration","scope":3729,"src":"13299:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3696,"name":"uint256","nodeType":"ElementaryTypeName","src":"13299:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3700,"mutability":"mutable","name":"rounding","nameLocation":"13323:8:21","nodeType":"VariableDeclaration","scope":3729,"src":"13314:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2831","typeString":"enum Math.Rounding"},"typeName":{"id":3699,"nodeType":"UserDefinedTypeName","pathNode":{"id":3698,"name":"Rounding","nameLocations":["13314:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":2831,"src":"13314:8:21"},"referencedDeclaration":2831,"src":"13314:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2831","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"13298:34:21"},"returnParameters":{"id":3704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3703,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3729,"src":"13356:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3702,"name":"uint256","nodeType":"ElementaryTypeName","src":"13356:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13355:9:21"},"scope":3874,"src":"13284:251:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3815,"nodeType":"Block","src":"13855:600:21","statements":[{"assignments":[3738],"declarations":[{"constant":false,"id":3738,"mutability":"mutable","name":"result","nameLocation":"13873:6:21","nodeType":"VariableDeclaration","scope":3815,"src":"13865:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3737,"name":"uint256","nodeType":"ElementaryTypeName","src":"13865:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3740,"initialValue":{"hexValue":"30","id":3739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13882:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13865:18:21"},{"id":3812,"nodeType":"UncheckedBlock","src":"13893:533:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3741,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3732,"src":"13921:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13930:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13921:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13936:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13921:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3755,"nodeType":"IfStatement","src":"13917:98:21","trueBody":{"id":3754,"nodeType":"Block","src":"13939:76:21","statements":[{"expression":{"id":3748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3746,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3732,"src":"13957:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13967:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13957:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3749,"nodeType":"ExpressionStatement","src":"13957:13:21"},{"expression":{"id":3752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3750,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"13988:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13998:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"13988:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3753,"nodeType":"ExpressionStatement","src":"13988:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3756,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3732,"src":"14032:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14041:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14032:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14046:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14032:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3770,"nodeType":"IfStatement","src":"14028:95:21","trueBody":{"id":3769,"nodeType":"Block","src":"14049:74:21","statements":[{"expression":{"id":3763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3761,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3732,"src":"14067:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14077:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14067:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3764,"nodeType":"ExpressionStatement","src":"14067:12:21"},{"expression":{"id":3767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3765,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"14097:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14107:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14097:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3768,"nodeType":"ExpressionStatement","src":"14097:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3771,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3732,"src":"14140:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14149:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14140:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14154:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14140:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3785,"nodeType":"IfStatement","src":"14136:95:21","trueBody":{"id":3784,"nodeType":"Block","src":"14157:74:21","statements":[{"expression":{"id":3778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3776,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3732,"src":"14175:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14185:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14175:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3779,"nodeType":"ExpressionStatement","src":"14175:12:21"},{"expression":{"id":3782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3780,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"14205:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14215:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"14205:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3783,"nodeType":"ExpressionStatement","src":"14205:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3786,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3732,"src":"14248:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14257:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14248:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14262:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14248:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3800,"nodeType":"IfStatement","src":"14244:95:21","trueBody":{"id":3799,"nodeType":"Block","src":"14265:74:21","statements":[{"expression":{"id":3793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3791,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3732,"src":"14283:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14293:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14283:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3794,"nodeType":"ExpressionStatement","src":"14283:12:21"},{"expression":{"id":3797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3795,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"14313:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14323:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"14313:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3798,"nodeType":"ExpressionStatement","src":"14313:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3801,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3732,"src":"14356:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14365:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14356:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14369:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14356:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3811,"nodeType":"IfStatement","src":"14352:64:21","trueBody":{"id":3810,"nodeType":"Block","src":"14372:44:21","statements":[{"expression":{"id":3808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3806,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"14390:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14400:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14390:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3809,"nodeType":"ExpressionStatement","src":"14390:11:21"}]}}]},{"expression":{"id":3813,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"14442:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3736,"id":3814,"nodeType":"Return","src":"14435:13:21"}]},"documentation":{"id":3730,"nodeType":"StructuredDocumentation","src":"13541:246:21","text":" @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":3816,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"13801:6:21","nodeType":"FunctionDefinition","parameters":{"id":3733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3732,"mutability":"mutable","name":"value","nameLocation":"13816:5:21","nodeType":"VariableDeclaration","scope":3816,"src":"13808:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3731,"name":"uint256","nodeType":"ElementaryTypeName","src":"13808:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13807:15:21"},"returnParameters":{"id":3736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3735,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3816,"src":"13846:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3734,"name":"uint256","nodeType":"ElementaryTypeName","src":"13846:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13845:9:21"},"scope":3874,"src":"13792:663:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3853,"nodeType":"Block","src":"14692:177:21","statements":[{"id":3852,"nodeType":"UncheckedBlock","src":"14702:161:21","statements":[{"assignments":[3828],"declarations":[{"constant":false,"id":3828,"mutability":"mutable","name":"result","nameLocation":"14734:6:21","nodeType":"VariableDeclaration","scope":3852,"src":"14726:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3827,"name":"uint256","nodeType":"ElementaryTypeName","src":"14726:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3832,"initialValue":{"arguments":[{"id":3830,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3819,"src":"14750:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3829,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[3816,3854],"referencedDeclaration":3816,"src":"14743:6:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14743:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14726:30:21"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3833,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"14777:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3835,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3822,"src":"14804:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2831","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2831","typeString":"enum Math.Rounding"}],"id":3834,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3873,"src":"14787:16:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2831_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14787:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14817:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3838,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"14823:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":3839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14833:1:21","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"14823:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3841,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14822:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:18:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3843,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3819,"src":"14838:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:26:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14787:56:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14850:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"14787:64:21","trueExpression":{"hexValue":"31","id":3846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14846:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3849,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14786:66:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"14777:75:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3826,"id":3851,"nodeType":"Return","src":"14770:82:21"}]}]},"documentation":{"id":3817,"nodeType":"StructuredDocumentation","src":"14461:144:21","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3854,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"14619:6:21","nodeType":"FunctionDefinition","parameters":{"id":3823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3819,"mutability":"mutable","name":"value","nameLocation":"14634:5:21","nodeType":"VariableDeclaration","scope":3854,"src":"14626:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3818,"name":"uint256","nodeType":"ElementaryTypeName","src":"14626:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3822,"mutability":"mutable","name":"rounding","nameLocation":"14650:8:21","nodeType":"VariableDeclaration","scope":3854,"src":"14641:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2831","typeString":"enum Math.Rounding"},"typeName":{"id":3821,"nodeType":"UserDefinedTypeName","pathNode":{"id":3820,"name":"Rounding","nameLocations":["14641:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":2831,"src":"14641:8:21"},"referencedDeclaration":2831,"src":"14641:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2831","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"14625:34:21"},"returnParameters":{"id":3826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3825,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3854,"src":"14683:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3824,"name":"uint256","nodeType":"ElementaryTypeName","src":"14683:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14682:9:21"},"scope":3874,"src":"14610:259:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3872,"nodeType":"Block","src":"15067:48:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3865,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3858,"src":"15090:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2831","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2831","typeString":"enum Math.Rounding"}],"id":3864,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15084:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3863,"name":"uint8","nodeType":"ElementaryTypeName","src":"15084:5:21","typeDescriptions":{}}},"id":3866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15084:15:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":3867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15102:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15084:19:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":3869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15107:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15084:24:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3862,"id":3871,"nodeType":"Return","src":"15077:31:21"}]},"documentation":{"id":3855,"nodeType":"StructuredDocumentation","src":"14875:113:21","text":" @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."},"id":3873,"implemented":true,"kind":"function","modifiers":[],"name":"unsignedRoundsUp","nameLocation":"15002:16:21","nodeType":"FunctionDefinition","parameters":{"id":3859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3858,"mutability":"mutable","name":"rounding","nameLocation":"15028:8:21","nodeType":"VariableDeclaration","scope":3873,"src":"15019:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2831","typeString":"enum Math.Rounding"},"typeName":{"id":3857,"nodeType":"UserDefinedTypeName","pathNode":{"id":3856,"name":"Rounding","nameLocations":["15019:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":2831,"src":"15019:8:21"},"referencedDeclaration":2831,"src":"15019:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2831","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"15018:19:21"},"returnParameters":{"id":3862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3861,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3873,"src":"15061:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3860,"name":"bool","nodeType":"ElementaryTypeName","src":"15061:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15060:6:21"},"scope":3874,"src":"14993:122:21","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3875,"src":"203:14914:21","usedErrors":[2826],"usedEvents":[]}],"src":"103:15015:21"},"id":21},"src/Scientify4.sol":{"ast":{"absolutePath":"src/Scientify4.sol","exportedSymbols":{"Arrays":[2527],"Attestation":[592],"Context":[2557],"DataLocation":[606],"ERC1155":[1966],"ERC1155Burnable":[2211],"ERC1155Pausable":[2250],"ERC165":[2808],"IERC1155":[2089],"IERC1155Errors":[915],"IERC1155MetadataURI":[2266],"IERC1155Receiver":[2131],"IERC165":[2820],"IERC20":[2344],"ISP":[495],"IVersionable":[564],"OffchainAttestation":[598],"Ownable":[778],"Pausable":[2674],"Schema":[630],"Scientify4":[4313]},"id":4314,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3876,"literals":["solidity","^","0.8",".25"],"nodeType":"PragmaDirective","src":"32:24:22"},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol","file":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol","id":3877,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4314,"sourceUnit":1967,"src":"58:59:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":3878,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4314,"sourceUnit":779,"src":"118:52:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol","file":"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol","id":3879,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4314,"sourceUnit":2251,"src":"171:78:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol","file":"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol","id":3880,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4314,"sourceUnit":2212,"src":"250:78:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"@ethsign/sign-protocol-evm/src/interfaces/ISP.sol","file":"@ethsign/sign-protocol-evm/src/interfaces/ISP.sol","id":3881,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4314,"sourceUnit":496,"src":"329:59:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"@ethsign/sign-protocol-evm/src/models/Attestation.sol","file":"@ethsign/sign-protocol-evm/src/models/Attestation.sol","id":3882,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4314,"sourceUnit":599,"src":"389:63:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"@ethsign/sign-protocol-evm/src/models/DataLocation.sol","file":"@ethsign/sign-protocol-evm/src/models/DataLocation.sol","id":3883,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4314,"sourceUnit":607,"src":"453:64:22","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3884,"name":"ERC1155","nameLocations":["582:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":1966,"src":"582:7:22"},"id":3885,"nodeType":"InheritanceSpecifier","src":"582:7:22"},{"baseName":{"id":3886,"name":"Ownable","nameLocations":["591:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":778,"src":"591:7:22"},"id":3887,"nodeType":"InheritanceSpecifier","src":"591:7:22"},{"baseName":{"id":3888,"name":"ERC1155Pausable","nameLocations":["600:15:22"],"nodeType":"IdentifierPath","referencedDeclaration":2250,"src":"600:15:22"},"id":3889,"nodeType":"InheritanceSpecifier","src":"600:15:22"},{"baseName":{"id":3890,"name":"ERC1155Burnable","nameLocations":["617:15:22"],"nodeType":"IdentifierPath","referencedDeclaration":2211,"src":"617:15:22"},"id":3891,"nodeType":"InheritanceSpecifier","src":"617:15:22"}],"canonicalName":"Scientify4","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4313,"linearizedBaseContracts":[4313,2211,2250,2674,778,1966,915,2266,2089,2808,2820,2557],"name":"Scientify4","nameLocation":"568:10:22","nodeType":"ContractDefinition","nodes":[{"errorSelector":"fea5885a","id":3893,"name":"NotAuthenticated","nameLocation":"645:16:22","nodeType":"ErrorDefinition","parameters":{"id":3892,"nodeType":"ParameterList","parameters":[],"src":"661:2:22"},"src":"639:25:22"},{"errorSelector":"b8a63b40","id":3895,"name":"ResearchCap","nameLocation":"675:11:22","nodeType":"ErrorDefinition","parameters":{"id":3894,"nodeType":"ParameterList","parameters":[],"src":"686:2:22"},"src":"669:20:22"},{"errorSelector":"e2f844a0","id":3897,"name":"NotEnoughValue","nameLocation":"700:14:22","nodeType":"ErrorDefinition","parameters":{"id":3896,"nodeType":"ParameterList","parameters":[],"src":"714:2:22"},"src":"694:23:22"},{"errorSelector":"f499da20","id":3899,"name":"PaymentFailed","nameLocation":"728:13:22","nodeType":"ErrorDefinition","parameters":{"id":3898,"nodeType":"ParameterList","parameters":[],"src":"741:2:22"},"src":"722:22:22"},{"errorSelector":"4eb60de7","id":3901,"name":"NotLiquidable","nameLocation":"755:13:22","nodeType":"ErrorDefinition","parameters":{"id":3900,"nodeType":"ParameterList","parameters":[],"src":"768:2:22"},"src":"749:22:22"},{"errorSelector":"7b7b36da","id":3903,"name":"NoTokenBalance","nameLocation":"782:14:22","nodeType":"ErrorDefinition","parameters":{"id":3902,"nodeType":"ParameterList","parameters":[],"src":"796:2:22"},"src":"776:23:22"},{"errorSelector":"bd8ba84d","id":3905,"name":"InvalidAttestation","nameLocation":"810:18:22","nodeType":"ErrorDefinition","parameters":{"id":3904,"nodeType":"ParameterList","parameters":[],"src":"828:2:22"},"src":"804:27:22"},{"constant":false,"id":3908,"mutability":"mutable","name":"researchNumber","nameLocation":"853:14:22","nodeType":"VariableDeclaration","scope":4313,"src":"837:34:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3906,"name":"uint256","nodeType":"ElementaryTypeName","src":"837:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":3907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"870:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"canonicalName":"Scientify4.ResearchState","id":3912,"members":[{"id":3909,"name":"developing","nameLocation":"907:10:22","nodeType":"EnumValue","src":"907:10:22"},{"id":3910,"name":"developed","nameLocation":"927:9:22","nodeType":"EnumValue","src":"927:9:22"},{"id":3911,"name":"paid","nameLocation":"946:4:22","nodeType":"EnumValue","src":"946:4:22"}],"name":"ResearchState","nameLocation":"883:13:22","nodeType":"EnumDefinition","src":"878:78:22"},{"canonicalName":"Scientify4.Research","id":3934,"members":[{"constant":false,"id":3914,"mutability":"mutable","name":"id","nameLocation":"996:2:22","nodeType":"VariableDeclaration","scope":3934,"src":"988:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3913,"name":"uint256","nodeType":"ElementaryTypeName","src":"988:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3917,"mutability":"mutable","name":"state","nameLocation":"1022:5:22","nodeType":"VariableDeclaration","scope":3934,"src":"1008:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ResearchState_$3912","typeString":"enum Scientify4.ResearchState"},"typeName":{"id":3916,"nodeType":"UserDefinedTypeName","pathNode":{"id":3915,"name":"ResearchState","nameLocations":["1008:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":3912,"src":"1008:13:22"},"referencedDeclaration":3912,"src":"1008:13:22","typeDescriptions":{"typeIdentifier":"t_enum$_ResearchState_$3912","typeString":"enum Scientify4.ResearchState"}},"visibility":"internal"},{"constant":false,"id":3919,"mutability":"mutable","name":"investment","nameLocation":"1045:10:22","nodeType":"VariableDeclaration","scope":3934,"src":"1037:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3918,"name":"uint256","nodeType":"ElementaryTypeName","src":"1037:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3921,"mutability":"mutable","name":"articlePrice","nameLocation":"1073:12:22","nodeType":"VariableDeclaration","scope":3934,"src":"1065:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3920,"name":"uint256","nodeType":"ElementaryTypeName","src":"1065:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3923,"mutability":"mutable","name":"sharePrice","nameLocation":"1103:10:22","nodeType":"VariableDeclaration","scope":3934,"src":"1095:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3922,"name":"uint256","nodeType":"ElementaryTypeName","src":"1095:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3925,"mutability":"mutable","name":"articlePriceIncreaseRate","nameLocation":"1131:24:22","nodeType":"VariableDeclaration","scope":3934,"src":"1123:32:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3924,"name":"uint256","nodeType":"ElementaryTypeName","src":"1123:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3927,"mutability":"mutable","name":"funding","nameLocation":"1173:7:22","nodeType":"VariableDeclaration","scope":3934,"src":"1165:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3926,"name":"uint256","nodeType":"ElementaryTypeName","src":"1165:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3929,"mutability":"mutable","name":"profit","nameLocation":"1198:6:22","nodeType":"VariableDeclaration","scope":3934,"src":"1190:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3928,"name":"uint256","nodeType":"ElementaryTypeName","src":"1190:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3931,"mutability":"mutable","name":"owner","nameLocation":"1222:5:22","nodeType":"VariableDeclaration","scope":3934,"src":"1214:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3930,"name":"address","nodeType":"ElementaryTypeName","src":"1214:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3933,"mutability":"mutable","name":"documentCID","nameLocation":"1244:11:22","nodeType":"VariableDeclaration","scope":3934,"src":"1237:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3932,"name":"string","nodeType":"ElementaryTypeName","src":"1237:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"Research","nameLocation":"969:8:22","nodeType":"StructDefinition","scope":4313,"src":"962:300:22","visibility":"public"},{"constant":false,"functionSelector":"36f58e5f","id":3938,"mutability":"mutable","name":"verifiedResearchers","nameLocation":"1300:19:22","nodeType":"VariableDeclaration","scope":4313,"src":"1268:51:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":3937,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3935,"name":"address","nodeType":"ElementaryTypeName","src":"1276:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1268:24:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3936,"name":"bool","nodeType":"ElementaryTypeName","src":"1287:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"functionSelector":"08f3e371","id":3944,"mutability":"mutable","name":"researchRequest","nameLocation":"1363:15:22","nodeType":"VariableDeclaration","scope":4313,"src":"1325:53:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_Research_$3934_storage_$dyn_storage_$","typeString":"mapping(address => struct Scientify4.Research[])"},"typeName":{"id":3943,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3939,"name":"address","nodeType":"ElementaryTypeName","src":"1333:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1325:30:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_Research_$3934_storage_$dyn_storage_$","typeString":"mapping(address => struct Scientify4.Research[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":3941,"nodeType":"UserDefinedTypeName","pathNode":{"id":3940,"name":"Research","nameLocations":["1344:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":3934,"src":"1344:8:22"},"referencedDeclaration":3934,"src":"1344:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Research_$3934_storage_ptr","typeString":"struct Scientify4.Research"}},"id":3942,"nodeType":"ArrayTypeName","src":"1344:10:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Research_$3934_storage_$dyn_storage_ptr","typeString":"struct Scientify4.Research[]"}}},"visibility":"public"},{"constant":false,"functionSelector":"c2a756ca","id":3949,"mutability":"mutable","name":"researchById","nameLocation":"1420:12:22","nodeType":"VariableDeclaration","scope":4313,"src":"1384:48:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Research_$3934_storage_$","typeString":"mapping(uint256 => struct Scientify4.Research)"},"typeName":{"id":3948,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3945,"name":"uint256","nodeType":"ElementaryTypeName","src":"1392:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1384:28:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Research_$3934_storage_$","typeString":"mapping(uint256 => struct Scientify4.Research)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3947,"nodeType":"UserDefinedTypeName","pathNode":{"id":3946,"name":"Research","nameLocations":["1403:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":3934,"src":"1403:8:22"},"referencedDeclaration":3934,"src":"1403:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Research_$3934_storage_ptr","typeString":"struct Scientify4.Research"}}},"visibility":"public"},{"constant":false,"id":3953,"mutability":"mutable","name":"repository","nameLocation":"1473:10:22","nodeType":"VariableDeclaration","scope":4313,"src":"1438:45:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"typeName":{"id":3952,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3950,"name":"uint256","nodeType":"ElementaryTypeName","src":"1446:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1438:26:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3951,"name":"string","nodeType":"ElementaryTypeName","src":"1457:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"visibility":"private"},{"constant":false,"functionSelector":"8f192180","id":3957,"mutability":"mutable","name":"researcherVerificationAttestations","nameLocation":"1523:34:22","nodeType":"VariableDeclaration","scope":4313,"src":"1489:68:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint64_$","typeString":"mapping(address => uint64)"},"typeName":{"id":3956,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3954,"name":"address","nodeType":"ElementaryTypeName","src":"1497:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1489:26:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint64_$","typeString":"mapping(address => uint64)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3955,"name":"uint64","nodeType":"ElementaryTypeName","src":"1508:6:22","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}},"visibility":"public"},{"constant":false,"functionSelector":"a8c5dc33","id":3963,"mutability":"mutable","name":"spInstance","nameLocation":"1707:10:22","nodeType":"VariableDeclaration","scope":4313,"src":"1696:71:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISP_$495","typeString":"contract ISP"},"typeName":{"id":3959,"nodeType":"UserDefinedTypeName","pathNode":{"id":3958,"name":"ISP","nameLocations":["1696:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":495,"src":"1696:3:22"},"referencedDeclaration":495,"src":"1696:3:22","typeDescriptions":{"typeIdentifier":"t_contract$_ISP_$495","typeString":"contract ISP"}},"value":{"arguments":[{"hexValue":"307834653461663261323165626636323835306644393945623632353345316546426235363039386344","id":3961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:42:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x4e4af2a21ebf62850fD99Eb6253E1eFBb56098cD"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3960,"name":"ISP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":495,"src":"1720:3:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISP_$495_$","typeString":"type(contract ISP)"}},"id":3962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1720:47:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISP_$495","typeString":"contract ISP"}},"visibility":"public"},{"body":{"id":3973,"nodeType":"Block","src":"1856:2:22","statements":[]},"id":3974,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"4555524b","id":3966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1828:6:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_8903eb94e56c08ae18af43b49d8588a122e0cc084768e8478993b11ef18cf12d","typeString":"literal_string \"EURK\""},"value":"EURK"}],"id":3967,"kind":"baseConstructorSpecifier","modifierName":{"id":3965,"name":"ERC1155","nameLocations":["1820:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":1966,"src":"1820:7:22"},"nodeType":"ModifierInvocation","src":"1820:15:22"},{"arguments":[{"expression":{"id":3969,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1844:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1848:6:22","memberName":"sender","nodeType":"MemberAccess","src":"1844:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3971,"kind":"baseConstructorSpecifier","modifierName":{"id":3968,"name":"Ownable","nameLocations":["1836:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":778,"src":"1836:7:22"},"nodeType":"ModifierInvocation","src":"1836:19:22"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3964,"nodeType":"ParameterList","parameters":[],"src":"1817:2:22"},"returnParameters":{"id":3972,"nodeType":"ParameterList","parameters":[],"src":"1856:0:22"},"scope":4313,"src":"1806:52:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"anonymous":false,"eventSelector":"22c9aa052d4e34c225d60366b28389ee92cc16a9675cf0c73566587db4aabcb8","id":3980,"name":"ResearcherVerificationAttested","nameLocation":"2233:30:22","nodeType":"EventDefinition","parameters":{"id":3979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3976,"indexed":true,"mutability":"mutable","name":"researcher","nameLocation":"2289:10:22","nodeType":"VariableDeclaration","scope":3980,"src":"2273:26:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3975,"name":"address","nodeType":"ElementaryTypeName","src":"2273:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3978,"indexed":false,"mutability":"mutable","name":"attestationId","nameLocation":"2316:13:22","nodeType":"VariableDeclaration","scope":3980,"src":"2309:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3977,"name":"uint64","nodeType":"ElementaryTypeName","src":"2309:6:22","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2263:72:22"},"src":"2227:109:22"},{"anonymous":false,"eventSelector":"9c671a1530af5d07ef953afa0bde839d600abe110ed1178bbbecf03ad8dc611a","id":3986,"name":"VerificationAttested","nameLocation":"2348:20:22","nodeType":"EventDefinition","parameters":{"id":3985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3982,"indexed":true,"mutability":"mutable","name":"researcher","nameLocation":"2394:10:22","nodeType":"VariableDeclaration","scope":3986,"src":"2378:26:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3981,"name":"address","nodeType":"ElementaryTypeName","src":"2378:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3984,"indexed":false,"mutability":"mutable","name":"attestationId","nameLocation":"2421:13:22","nodeType":"VariableDeclaration","scope":3986,"src":"2414:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3983,"name":"uint64","nodeType":"ElementaryTypeName","src":"2414:6:22","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2368:72:22"},"src":"2342:99:22"},{"anonymous":false,"eventSelector":"f89ef2d5d537a2764cdc3d2319c0320feb008480d7b24c76e4ac853c8bac67e8","id":3990,"name":"ResearcherVerified","nameLocation":"2453:18:22","nodeType":"EventDefinition","parameters":{"id":3989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3988,"indexed":true,"mutability":"mutable","name":"researcher","nameLocation":"2488:10:22","nodeType":"VariableDeclaration","scope":3990,"src":"2472:26:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3987,"name":"address","nodeType":"ElementaryTypeName","src":"2472:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2471:28:22"},"src":"2447:53:22"},{"anonymous":false,"eventSelector":"a0f5ee5b57f0c2f7ac409633c1c78b5d7473845e4fa9f659b98b4392ffbcdeba","id":3996,"name":"ResearchCreated","nameLocation":"2561:15:22","nodeType":"EventDefinition","parameters":{"id":3995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3992,"indexed":false,"mutability":"mutable","name":"researchId","nameLocation":"2585:10:22","nodeType":"VariableDeclaration","scope":3996,"src":"2577:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3991,"name":"uint256","nodeType":"ElementaryTypeName","src":"2577:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3994,"indexed":false,"mutability":"mutable","name":"researcher","nameLocation":"2605:10:22","nodeType":"VariableDeclaration","scope":3996,"src":"2597:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3993,"name":"address","nodeType":"ElementaryTypeName","src":"2597:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2576:40:22"},"src":"2555:62:22"},{"body":{"id":4065,"nodeType":"Block","src":"2784:1990:22","statements":[{"assignments":[4008],"declarations":[{"constant":false,"id":4008,"mutability":"mutable","name":"minInvest","nameLocation":"3341:9:22","nodeType":"VariableDeclaration","scope":4065,"src":"3333:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4007,"name":"uint256","nodeType":"ElementaryTypeName","src":"3333:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4010,"initialValue":{"hexValue":"316538","id":4009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3353:3:22","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"value":"1e8"},"nodeType":"VariableDeclarationStatement","src":"3333:23:22"},{"assignments":[4012],"declarations":[{"constant":false,"id":4012,"mutability":"mutable","name":"sharePrice","nameLocation":"3563:10:22","nodeType":"VariableDeclaration","scope":4065,"src":"3555:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4011,"name":"uint256","nodeType":"ElementaryTypeName","src":"3555:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4016,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4013,"name":"invest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"3576:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4014,"name":"minInvest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4008,"src":"3585:9:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3576:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3555:39:22"},{"assignments":[4019],"declarations":[{"constant":false,"id":4019,"mutability":"mutable","name":"newResearch","nameLocation":"3663:11:22","nodeType":"VariableDeclaration","scope":4065,"src":"3647:27:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Research_$3934_memory_ptr","typeString":"struct Scientify4.Research"},"typeName":{"id":4018,"nodeType":"UserDefinedTypeName","pathNode":{"id":4017,"name":"Research","nameLocations":["3647:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":3934,"src":"3647:8:22"},"referencedDeclaration":3934,"src":"3647:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Research_$3934_storage_ptr","typeString":"struct Scientify4.Research"}},"visibility":"internal"}],"id":4034,"initialValue":{"arguments":[{"id":4021,"name":"researchNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3908,"src":"3704:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4022,"name":"ResearchState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3912,"src":"3739:13:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ResearchState_$3912_$","typeString":"type(enum Scientify4.ResearchState)"}},"id":4023,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3753:10:22","memberName":"developing","nodeType":"MemberAccess","referencedDeclaration":3909,"src":"3739:24:22","typeDescriptions":{"typeIdentifier":"t_enum$_ResearchState_$3912","typeString":"enum Scientify4.ResearchState"}},{"id":4024,"name":"invest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"3789:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4025,"name":"articlePrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4002,"src":"3823:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4026,"name":"sharePrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4012,"src":"3861:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4027,"name":"articlePriceIncreaseRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4004,"src":"3911:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":4028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3958:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3981:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"id":4030,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4003:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4007:6:22","memberName":"sender","nodeType":"MemberAccess","src":"4003:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4032,"name":"repo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3998,"src":"4040:4:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_ResearchState_$3912","typeString":"enum Scientify4.ResearchState"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4020,"name":"Research","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3934,"src":"3677:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Research_$3934_storage_ptr_$","typeString":"type(struct Scientify4.Research storage pointer)"}},"id":4033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["3700:2:22","3732:5:22","3777:10:22","3809:12:22","3849:10:22","3885:24:22","3949:7:22","3973:6:22","3996:5:22","4027:11:22"],"names":["id","state","investment","articlePrice","sharePrice","articlePriceIncreaseRate","funding","profit","owner","documentCID"],"nodeType":"FunctionCall","src":"3677:378:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Research_$3934_memory_ptr","typeString":"struct Scientify4.Research memory"}},"nodeType":"VariableDeclarationStatement","src":"3647:408:22"},{"expression":{"arguments":[{"id":4040,"name":"newResearch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4019,"src":"4199:11:22","typeDescriptions":{"typeIdentifier":"t_struct$_Research_$3934_memory_ptr","typeString":"struct Scientify4.Research memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Research_$3934_memory_ptr","typeString":"struct Scientify4.Research memory"}],"expression":{"baseExpression":{"id":4035,"name":"researchRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3944,"src":"4166:15:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_Research_$3934_storage_$dyn_storage_$","typeString":"mapping(address => struct Scientify4.Research storage ref[] storage ref)"}},"id":4038,"indexExpression":{"expression":{"id":4036,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4182:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4186:6:22","memberName":"sender","nodeType":"MemberAccess","src":"4182:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4166:27:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Research_$3934_storage_$dyn_storage","typeString":"struct Scientify4.Research storage ref[] storage ref"}},"id":4039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4194:4:22","memberName":"push","nodeType":"MemberAccess","src":"4166:32:22","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Research_$3934_storage_$dyn_storage_ptr_$_t_struct$_Research_$3934_storage_$returns$__$attached_to$_t_array$_t_struct$_Research_$3934_storage_$dyn_storage_ptr_$","typeString":"function (struct Scientify4.Research storage ref[] storage pointer,struct Scientify4.Research storage ref)"}},"id":4041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4166:45:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4042,"nodeType":"ExpressionStatement","src":"4166:45:22"},{"expression":{"id":4047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4043,"name":"researchById","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3949,"src":"4221:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Research_$3934_storage_$","typeString":"mapping(uint256 => struct Scientify4.Research storage ref)"}},"id":4045,"indexExpression":{"id":4044,"name":"researchNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3908,"src":"4234:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4221:28:22","typeDescriptions":{"typeIdentifier":"t_struct$_Research_$3934_storage","typeString":"struct Scientify4.Research storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4046,"name":"newResearch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4019,"src":"4252:11:22","typeDescriptions":{"typeIdentifier":"t_struct$_Research_$3934_memory_ptr","typeString":"struct Scientify4.Research memory"}},"src":"4221:42:22","typeDescriptions":{"typeIdentifier":"t_struct$_Research_$3934_storage","typeString":"struct Scientify4.Research storage ref"}},"id":4048,"nodeType":"ExpressionStatement","src":"4221:42:22"},{"eventCall":{"arguments":[{"id":4050,"name":"researchNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3908,"src":"4469:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4051,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4485:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4489:6:22","memberName":"sender","nodeType":"MemberAccess","src":"4485:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4049,"name":"ResearchCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3996,"src":"4453:15:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address)"}},"id":4053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4453:43:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4054,"nodeType":"EmitStatement","src":"4448:48:22"},{"expression":{"id":4056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4559:16:22","subExpression":{"id":4055,"name":"researchNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3908,"src":"4559:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4057,"nodeType":"ExpressionStatement","src":"4559:16:22"},{"expression":{"id":4063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4058,"name":"repository","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3953,"src":"4734:10:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":4061,"indexExpression":{"expression":{"id":4059,"name":"newResearch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4019,"src":"4745:11:22","typeDescriptions":{"typeIdentifier":"t_struct$_Research_$3934_memory_ptr","typeString":"struct Scientify4.Research memory"}},"id":4060,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4757:2:22","memberName":"id","nodeType":"MemberAccess","referencedDeclaration":3914,"src":"4745:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4734:26:22","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4062,"name":"repo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3998,"src":"4763:4:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"4734:33:22","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":4064,"nodeType":"ExpressionStatement","src":"4734:33:22"}]},"functionSelector":"68e2cea8","id":4066,"implemented":true,"kind":"function","modifiers":[],"name":"createResearch","nameLocation":"2632:14:22","nodeType":"FunctionDefinition","parameters":{"id":4005,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3998,"mutability":"mutable","name":"repo","nameLocation":"2670:4:22","nodeType":"VariableDeclaration","scope":4066,"src":"2656:18:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3997,"name":"string","nodeType":"ElementaryTypeName","src":"2656:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4000,"mutability":"mutable","name":"invest","nameLocation":"2692:6:22","nodeType":"VariableDeclaration","scope":4066,"src":"2684:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3999,"name":"uint256","nodeType":"ElementaryTypeName","src":"2684:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4002,"mutability":"mutable","name":"articlePrice","nameLocation":"2716:12:22","nodeType":"VariableDeclaration","scope":4066,"src":"2708:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4001,"name":"uint256","nodeType":"ElementaryTypeName","src":"2708:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4004,"mutability":"mutable","name":"articlePriceIncreaseRate","nameLocation":"2746:24:22","nodeType":"VariableDeclaration","scope":4066,"src":"2738:32:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4003,"name":"uint256","nodeType":"ElementaryTypeName","src":"2738:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2646:130:22"},"returnParameters":{"id":4006,"nodeType":"ParameterList","parameters":[],"src":"2784:0:22"},"scope":4313,"src":"2623:2151:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4077,"nodeType":"Block","src":"4871:55:22","statements":[{"expression":{"baseExpression":{"id":4073,"name":"verifiedResearchers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"4888:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4075,"indexExpression":{"id":4074,"name":"researcher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4068,"src":"4908:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4888:31:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4072,"id":4076,"nodeType":"Return","src":"4881:38:22"}]},"functionSelector":"508f3a37","id":4078,"implemented":true,"kind":"function","modifiers":[],"name":"isVerifiedResearcher","nameLocation":"4789:20:22","nodeType":"FunctionDefinition","parameters":{"id":4069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4068,"mutability":"mutable","name":"researcher","nameLocation":"4827:10:22","nodeType":"VariableDeclaration","scope":4078,"src":"4819:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4067,"name":"address","nodeType":"ElementaryTypeName","src":"4819:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4809:34:22"},"returnParameters":{"id":4072,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4071,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4078,"src":"4865:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4070,"name":"bool","nodeType":"ElementaryTypeName","src":"4865:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4864:6:22"},"scope":4313,"src":"4780:146:22","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4095,"nodeType":"Block","src":"4995:100:22","statements":[{"expression":{"id":4089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4085,"name":"verifiedResearchers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"5005:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4087,"indexExpression":{"id":4086,"name":"researcher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4080,"src":"5025:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5005:31:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5039:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5005:38:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4090,"nodeType":"ExpressionStatement","src":"5005:38:22"},{"eventCall":{"arguments":[{"id":4092,"name":"researcher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4080,"src":"5077:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4091,"name":"ResearcherVerified","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3990,"src":"5058:18:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5058:30:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4094,"nodeType":"EmitStatement","src":"5053:35:22"}]},"functionSelector":"73fd653d","id":4096,"implemented":true,"kind":"function","modifiers":[{"id":4083,"kind":"modifierInvocation","modifierName":{"id":4082,"name":"onlyOwner","nameLocations":["4985:9:22"],"nodeType":"IdentifierPath","referencedDeclaration":689,"src":"4985:9:22"},"nodeType":"ModifierInvocation","src":"4985:9:22"}],"name":"verifyResearcher","nameLocation":"4941:16:22","nodeType":"FunctionDefinition","parameters":{"id":4081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4080,"mutability":"mutable","name":"researcher","nameLocation":"4966:10:22","nodeType":"VariableDeclaration","scope":4096,"src":"4958:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4079,"name":"address","nodeType":"ElementaryTypeName","src":"4958:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4957:20:22"},"returnParameters":{"id":4084,"nodeType":"ParameterList","parameters":[],"src":"4995:0:22"},"scope":4313,"src":"4932:163:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4176,"nodeType":"Block","src":"5176:1193:22","statements":[{"assignments":[4104],"declarations":[{"constant":false,"id":4104,"mutability":"mutable","name":"schemaId","nameLocation":"5296:8:22","nodeType":"VariableDeclaration","scope":4176,"src":"5289:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4103,"name":"uint64","nodeType":"ElementaryTypeName","src":"5289:6:22","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":4106,"initialValue":{"hexValue":"3330","id":4105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5307:2:22","typeDescriptions":{"typeIdentifier":"t_rational_30_by_1","typeString":"int_const 30"},"value":"30"},"nodeType":"VariableDeclarationStatement","src":"5289:20:22"},{"assignments":[4111],"declarations":[{"constant":false,"id":4111,"mutability":"mutable","name":"recipients","nameLocation":"5335:10:22","nodeType":"VariableDeclaration","scope":4176,"src":"5320:25:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":4109,"name":"bytes","nodeType":"ElementaryTypeName","src":"5320:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":4110,"nodeType":"ArrayTypeName","src":"5320:7:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"id":4117,"initialValue":{"arguments":[{"hexValue":"31","id":4115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5360:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":4114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5348:11:22","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory[] memory)"},"typeName":{"baseType":{"id":4112,"name":"bytes","nodeType":"ElementaryTypeName","src":"5352:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":4113,"nodeType":"ArrayTypeName","src":"5352:7:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}}},"id":4116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5348:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5320:42:22"},{"expression":{"id":4125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4118,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"5372:10:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":4120,"indexExpression":{"hexValue":"30","id":4119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5383:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5372:13:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4123,"name":"researcher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4098,"src":"5399:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4121,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5388:3:22","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5392:6:22","memberName":"encode","nodeType":"MemberAccess","src":"5388:10:22","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5388:22:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"5372:38:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4126,"nodeType":"ExpressionStatement","src":"5372:38:22"},{"assignments":[4128],"declarations":[{"constant":false,"id":4128,"mutability":"mutable","name":"encodedData","nameLocation":"5434:11:22","nodeType":"VariableDeclaration","scope":4176,"src":"5421:24:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4127,"name":"bytes","nodeType":"ElementaryTypeName","src":"5421:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4134,"initialValue":{"arguments":[{"id":4131,"name":"researcher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4098,"src":"5459:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"74727565","id":4132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5471:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4129,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5448:3:22","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4130,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5452:6:22","memberName":"encode","nodeType":"MemberAccess","src":"5448:10:22","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5448:28:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5421:55:22"},{"assignments":[4137],"declarations":[{"constant":false,"id":4137,"mutability":"mutable","name":"verificationAttestation","nameLocation":"5506:23:22","nodeType":"VariableDeclaration","scope":4176,"src":"5487:42:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$592_memory_ptr","typeString":"struct Attestation"},"typeName":{"id":4136,"nodeType":"UserDefinedTypeName","pathNode":{"id":4135,"name":"Attestation","nameLocations":["5487:11:22"],"nodeType":"IdentifierPath","referencedDeclaration":592,"src":"5487:11:22"},"referencedDeclaration":592,"src":"5487:11:22","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$592_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"id":4154,"initialValue":{"arguments":[{"id":4139,"name":"schemaId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4104,"src":"5568:8:22","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"30","id":4140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5611:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5643:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5675:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"arguments":[{"id":4145,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5708:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_Scientify4_$4313","typeString":"contract Scientify4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Scientify4_$4313","typeString":"contract Scientify4"}],"id":4144,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5700:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4143,"name":"address","nodeType":"ElementaryTypeName","src":"5700:7:22","typeDescriptions":{}}},"id":4146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5700:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":4147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5739:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"id":4148,"name":"DataLocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"5768:12:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_DataLocation_$606_$","typeString":"type(enum DataLocation)"}},"id":4149,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5781:7:22","memberName":"ONCHAIN","nodeType":"MemberAccess","referencedDeclaration":602,"src":"5768:20:22","typeDescriptions":{"typeIdentifier":"t_enum$_DataLocation_$606","typeString":"enum DataLocation"}},{"hexValue":"66616c7365","id":4150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5811:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"id":4151,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"5842:10:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},{"id":4152,"name":"encodedData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4128,"src":"5872:11:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_enum$_DataLocation_$606","typeString":"enum DataLocation"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4138,"name":"Attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"5532:11:22","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Attestation_$592_storage_ptr_$","typeString":"type(struct Attestation storage pointer)"}},"id":4153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["5558:8:22","5590:19:22","5626:15:22","5658:15:22","5690:8:22","5727:10:22","5754:12:22","5802:7:22","5830:10:22","5866:4:22"],"names":["schemaId","linkedAttestationId","attestTimestamp","revokeTimestamp","attester","validUntil","dataLocation","revoked","recipients","data"],"nodeType":"FunctionCall","src":"5532:362:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$592_memory_ptr","typeString":"struct Attestation memory"}},"nodeType":"VariableDeclarationStatement","src":"5487:407:22"},{"assignments":[4156],"declarations":[{"constant":false,"id":4156,"mutability":"mutable","name":"attestationId","nameLocation":"5985:13:22","nodeType":"VariableDeclaration","scope":4176,"src":"5978:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4155,"name":"uint64","nodeType":"ElementaryTypeName","src":"5978:6:22","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":4164,"initialValue":{"arguments":[{"id":4159,"name":"verificationAttestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4137,"src":"6032:23:22","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$592_memory_ptr","typeString":"struct Attestation memory"}},{"hexValue":"","id":4160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6069:2:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},{"hexValue":"","id":4161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6085:2:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},{"hexValue":"","id":4162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6101:2:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Attestation_$592_memory_ptr","typeString":"struct Attestation memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":4157,"name":"spInstance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3963,"src":"6001:10:22","typeDescriptions":{"typeIdentifier":"t_contract$_ISP_$495","typeString":"contract ISP"}},"id":4158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6012:6:22","memberName":"attest","nodeType":"MemberAccess","referencedDeclaration":104,"src":"6001:17:22","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_struct$_Attestation_$592_memory_ptr_$_t_string_memory_ptr_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_uint64_$","typeString":"function (struct Attestation memory,string memory,bytes memory,bytes memory) external returns (uint64)"}},"id":4163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6001:112:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"VariableDeclarationStatement","src":"5978:135:22"},{"expression":{"id":4169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4165,"name":"researcherVerificationAttestations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3957,"src":"6182:34:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint64_$","typeString":"mapping(address => uint64)"}},"id":4167,"indexExpression":{"id":4166,"name":"researcher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4098,"src":"6217:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6182:46:22","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4168,"name":"attestationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"6231:13:22","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"6182:62:22","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":4170,"nodeType":"ExpressionStatement","src":"6182:62:22"},{"eventCall":{"arguments":[{"id":4172,"name":"researcher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4098,"src":"6336:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4173,"name":"attestationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"6348:13:22","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":4171,"name":"ResearcherVerificationAttested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3980,"src":"6305:30:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint64_$returns$__$","typeString":"function (address,uint64)"}},"id":4174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6305:57:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4175,"nodeType":"EmitStatement","src":"6300:62:22"}]},"functionSelector":"85235d3d","id":4177,"implemented":true,"kind":"function","modifiers":[{"id":4101,"kind":"modifierInvocation","modifierName":{"id":4100,"name":"onlyOwner","nameLocations":["5166:9:22"],"nodeType":"IdentifierPath","referencedDeclaration":689,"src":"5166:9:22"},"nodeType":"ModifierInvocation","src":"5166:9:22"}],"name":"attestResearcherVerification","nameLocation":"5110:28:22","nodeType":"FunctionDefinition","parameters":{"id":4099,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4098,"mutability":"mutable","name":"researcher","nameLocation":"5147:10:22","nodeType":"VariableDeclaration","scope":4177,"src":"5139:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4097,"name":"address","nodeType":"ElementaryTypeName","src":"5139:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5138:20:22"},"returnParameters":{"id":4102,"nodeType":"ParameterList","parameters":[],"src":"5176:0:22"},"scope":4313,"src":"5101:1268:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4285,"nodeType":"Block","src":"6658:1910:22","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4187,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6763:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6767:6:22","memberName":"sender","nodeType":"MemberAccess","src":"6763:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4189,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"6777:5:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6777:7:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6763:21:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"baseExpression":{"id":4192,"name":"verifiedResearchers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"6788:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4195,"indexExpression":{"expression":{"id":4193,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6808:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6812:6:22","memberName":"sender","nodeType":"MemberAccess","src":"6808:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6788:31:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6763:56:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616c6c6572206d757374206265206f776e6572206f722076657269666965642072657365617263686572","id":4197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6833:45:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_bfa583a8d2598f5edd72edfde6db9a2b6010ae7161d27686b20babdb1d529b4f","typeString":"literal_string \"Caller must be owner or verified researcher\""},"value":"Caller must be owner or verified researcher"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bfa583a8d2598f5edd72edfde6db9a2b6010ae7161d27686b20babdb1d529b4f","typeString":"literal_string \"Caller must be owner or verified researcher\""}],"id":4186,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6742:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6742:146:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4199,"nodeType":"ExpressionStatement","src":"6742:146:22"},{"assignments":[4202],"declarations":[{"constant":false,"id":4202,"mutability":"mutable","name":"research","nameLocation":"6953:8:22","nodeType":"VariableDeclaration","scope":4285,"src":"6936:25:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Research_$3934_storage_ptr","typeString":"struct Scientify4.Research"},"typeName":{"id":4201,"nodeType":"UserDefinedTypeName","pathNode":{"id":4200,"name":"Research","nameLocations":["6936:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":3934,"src":"6936:8:22"},"referencedDeclaration":3934,"src":"6936:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Research_$3934_storage_ptr","typeString":"struct Scientify4.Research"}},"visibility":"internal"}],"id":4206,"initialValue":{"baseExpression":{"id":4203,"name":"researchById","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3949,"src":"6964:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Research_$3934_storage_$","typeString":"mapping(uint256 => struct Scientify4.Research storage ref)"}},"id":4205,"indexExpression":{"id":4204,"name":"researchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4179,"src":"6977:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6964:24:22","typeDescriptions":{"typeIdentifier":"t_struct$_Research_$3934_storage","typeString":"struct Scientify4.Research storage ref"}},"nodeType":"VariableDeclarationStatement","src":"6936:52:22"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4208,"name":"research","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4202,"src":"7015:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Research_$3934_storage_ptr","typeString":"struct Scientify4.Research storage pointer"}},"id":4209,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7024:2:22","memberName":"id","nodeType":"MemberAccess","referencedDeclaration":3914,"src":"7015:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7030:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7015:16:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"526573656172636820646f6573206e6f74206578697374","id":4212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7033:25:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_48567b562a28c744dba76ce6943cf1c17ec4b60da09661342613b80a5b797077","typeString":"literal_string \"Research does not exist\""},"value":"Research does not exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_48567b562a28c744dba76ce6943cf1c17ec4b60da09661342613b80a5b797077","typeString":"literal_string \"Research does not exist\""}],"id":4207,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7007:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7007:52:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4214,"nodeType":"ExpressionStatement","src":"7007:52:22"},{"assignments":[4216],"declarations":[{"constant":false,"id":4216,"mutability":"mutable","name":"schemaId","nameLocation":"7165:8:22","nodeType":"VariableDeclaration","scope":4285,"src":"7158:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4215,"name":"uint64","nodeType":"ElementaryTypeName","src":"7158:6:22","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":4218,"initialValue":{"hexValue":"3331","id":4217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7176:2:22","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"nodeType":"VariableDeclarationStatement","src":"7158:20:22"},{"assignments":[4220],"declarations":[{"constant":false,"id":4220,"mutability":"mutable","name":"encodedData","nameLocation":"7371:11:22","nodeType":"VariableDeclaration","scope":4285,"src":"7358:24:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4219,"name":"bytes","nodeType":"ElementaryTypeName","src":"7358:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4227,"initialValue":{"arguments":[{"id":4223,"name":"cid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4181,"src":"7396:3:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"expression":{"id":4224,"name":"research","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4202,"src":"7401:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Research_$3934_storage_ptr","typeString":"struct Scientify4.Research storage pointer"}},"id":4225,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7410:5:22","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":3931,"src":"7401:14:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4221,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7385:3:22","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7389:6:22","memberName":"encode","nodeType":"MemberAccess","src":"7385:10:22","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7385:31:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"7358:58:22"},{"assignments":[4232],"declarations":[{"constant":false,"id":4232,"mutability":"mutable","name":"recipients","nameLocation":"7482:10:22","nodeType":"VariableDeclaration","scope":4285,"src":"7467:25:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":4230,"name":"bytes","nodeType":"ElementaryTypeName","src":"7467:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":4231,"nodeType":"ArrayTypeName","src":"7467:7:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"id":4238,"initialValue":{"arguments":[{"hexValue":"31","id":4236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7507:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":4235,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"7495:11:22","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory[] memory)"},"typeName":{"baseType":{"id":4233,"name":"bytes","nodeType":"ElementaryTypeName","src":"7499:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":4234,"nodeType":"ArrayTypeName","src":"7499:7:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}}},"id":4237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7495:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7467:42:22"},{"expression":{"id":4247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4239,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4232,"src":"7582:10:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":4241,"indexExpression":{"hexValue":"30","id":4240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7593:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7582:13:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":4244,"name":"research","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4202,"src":"7609:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Research_$3934_storage_ptr","typeString":"struct Scientify4.Research storage pointer"}},"id":4245,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7618:5:22","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":3931,"src":"7609:14:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4242,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7598:3:22","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4243,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7602:6:22","memberName":"encode","nodeType":"MemberAccess","src":"7598:10:22","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7598:26:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"7582:42:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4248,"nodeType":"ExpressionStatement","src":"7582:42:22"},{"assignments":[4251],"declarations":[{"constant":false,"id":4251,"mutability":"mutable","name":"researchAttestation","nameLocation":"7703:19:22","nodeType":"VariableDeclaration","scope":4285,"src":"7684:38:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$592_memory_ptr","typeString":"struct Attestation"},"typeName":{"id":4250,"nodeType":"UserDefinedTypeName","pathNode":{"id":4249,"name":"Attestation","nameLocations":["7684:11:22"],"nodeType":"IdentifierPath","referencedDeclaration":592,"src":"7684:11:22"},"referencedDeclaration":592,"src":"7684:11:22","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$592_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"id":4268,"initialValue":{"arguments":[{"id":4253,"name":"schemaId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4216,"src":"7761:8:22","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":4254,"name":"linkedAttestationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4183,"src":"7804:19:22","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"30","id":4255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7917:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7949:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"arguments":[{"id":4259,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"8001:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_Scientify4_$4313","typeString":"contract Scientify4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Scientify4_$4313","typeString":"contract Scientify4"}],"id":4258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7993:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4257,"name":"address","nodeType":"ElementaryTypeName","src":"7993:7:22","typeDescriptions":{}}},"id":4260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7993:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":4261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8032:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"id":4262,"name":"DataLocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"8104:12:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_DataLocation_$606_$","typeString":"type(enum DataLocation)"}},"id":4263,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8117:7:22","memberName":"ONCHAIN","nodeType":"MemberAccess","referencedDeclaration":602,"src":"8104:20:22","typeDescriptions":{"typeIdentifier":"t_enum$_DataLocation_$606","typeString":"enum DataLocation"}},{"hexValue":"66616c7365","id":4264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8147:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"id":4265,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4232,"src":"8178:10:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},{"id":4266,"name":"encodedData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4220,"src":"8208:11:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_enum$_DataLocation_$606","typeString":"enum DataLocation"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4252,"name":"Attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"7725:11:22","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Attestation_$592_storage_ptr_$","typeString":"type(struct Attestation storage pointer)"}},"id":4267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["7751:8:22","7783:19:22","7900:15:22","7932:15:22","7983:8:22","8020:10:22","8090:12:22","8138:7:22","8166:10:22","8202:4:22"],"names":["schemaId","linkedAttestationId","attestTimestamp","revokeTimestamp","attester","validUntil","dataLocation","revoked","recipients","data"],"nodeType":"FunctionCall","src":"7725:505:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$592_memory_ptr","typeString":"struct Attestation memory"}},"nodeType":"VariableDeclarationStatement","src":"7684:546:22"},{"assignments":[4270],"declarations":[{"constant":false,"id":4270,"mutability":"mutable","name":"attestationId","nameLocation":"8314:13:22","nodeType":"VariableDeclaration","scope":4285,"src":"8307:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4269,"name":"uint64","nodeType":"ElementaryTypeName","src":"8307:6:22","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":4278,"initialValue":{"arguments":[{"id":4273,"name":"researchAttestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4251,"src":"8361:19:22","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$592_memory_ptr","typeString":"struct Attestation memory"}},{"hexValue":"","id":4274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8394:2:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},{"hexValue":"","id":4275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8410:2:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},{"hexValue":"","id":4276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8426:2:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Attestation_$592_memory_ptr","typeString":"struct Attestation memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":4271,"name":"spInstance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3963,"src":"8330:10:22","typeDescriptions":{"typeIdentifier":"t_contract$_ISP_$495","typeString":"contract ISP"}},"id":4272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8341:6:22","memberName":"attest","nodeType":"MemberAccess","referencedDeclaration":104,"src":"8330:17:22","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_struct$_Attestation_$592_memory_ptr_$_t_string_memory_ptr_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_uint64_$","typeString":"function (struct Attestation memory,string memory,bytes memory,bytes memory) external returns (uint64)"}},"id":4277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8330:108:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"VariableDeclarationStatement","src":"8307:131:22"},{"eventCall":{"arguments":[{"expression":{"id":4280,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8535:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8539:6:22","memberName":"sender","nodeType":"MemberAccess","src":"8535:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4282,"name":"attestationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4270,"src":"8547:13:22","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":4279,"name":"VerificationAttested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3986,"src":"8514:20:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint64_$returns$__$","typeString":"function (address,uint64)"}},"id":4283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8514:47:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4284,"nodeType":"EmitStatement","src":"8509:52:22"}]},"functionSelector":"4dd2febe","id":4286,"implemented":true,"kind":"function","modifiers":[],"name":"attestResearchAuthor","nameLocation":"6493:20:22","nodeType":"FunctionDefinition","parameters":{"id":4184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4179,"mutability":"mutable","name":"researchId","nameLocation":"6531:10:22","nodeType":"VariableDeclaration","scope":4286,"src":"6523:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4178,"name":"uint256","nodeType":"ElementaryTypeName","src":"6523:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4181,"mutability":"mutable","name":"cid","nameLocation":"6565:3:22","nodeType":"VariableDeclaration","scope":4286,"src":"6551:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4180,"name":"string","nodeType":"ElementaryTypeName","src":"6551:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4183,"mutability":"mutable","name":"linkedAttestationId","nameLocation":"6585:19:22","nodeType":"VariableDeclaration","scope":4286,"src":"6578:26:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4182,"name":"uint64","nodeType":"ElementaryTypeName","src":"6578:6:22","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"6513:137:22"},"returnParameters":{"id":4185,"nodeType":"ParameterList","parameters":[],"src":"6658:0:22"},"scope":4313,"src":"6484:2084:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1381,2249],"body":{"id":4311,"nodeType":"Block","src":"8746:500:22","statements":[{"expression":{"arguments":[{"id":4305,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4288,"src":"8977:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4306,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4290,"src":"8983:2:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4307,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4293,"src":"8987:3:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4308,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4296,"src":"8992:6:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"expression":{"id":4302,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"8963:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_Scientify4_$4313_$","typeString":"type(contract super Scientify4)"}},"id":4304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8969:7:22","memberName":"_update","nodeType":"MemberAccess","referencedDeclaration":2249,"src":"8963:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory)"}},"id":4309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8963:36:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4310,"nodeType":"ExpressionStatement","src":"8963:36:22"}]},"id":4312,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"8583:7:22","nodeType":"FunctionDefinition","overrides":{"id":4300,"nodeType":"OverrideSpecifier","overrides":[{"id":4298,"name":"ERC1155","nameLocations":["8720:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":1966,"src":"8720:7:22"},{"id":4299,"name":"ERC1155Pausable","nameLocations":["8729:15:22"],"nodeType":"IdentifierPath","referencedDeclaration":2250,"src":"8729:15:22"}],"src":"8711:34:22"},"parameters":{"id":4297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4288,"mutability":"mutable","name":"from","nameLocation":"8608:4:22","nodeType":"VariableDeclaration","scope":4312,"src":"8600:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4287,"name":"address","nodeType":"ElementaryTypeName","src":"8600:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4290,"mutability":"mutable","name":"to","nameLocation":"8630:2:22","nodeType":"VariableDeclaration","scope":4312,"src":"8622:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4289,"name":"address","nodeType":"ElementaryTypeName","src":"8622:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4293,"mutability":"mutable","name":"ids","nameLocation":"8659:3:22","nodeType":"VariableDeclaration","scope":4312,"src":"8642:20:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4291,"name":"uint256","nodeType":"ElementaryTypeName","src":"8642:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4292,"nodeType":"ArrayTypeName","src":"8642:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4296,"mutability":"mutable","name":"values","nameLocation":"8689:6:22","nodeType":"VariableDeclaration","scope":4312,"src":"8672:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4294,"name":"uint256","nodeType":"ElementaryTypeName","src":"8672:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4295,"nodeType":"ArrayTypeName","src":"8672:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"8590:111:22"},"returnParameters":{"id":4301,"nodeType":"ParameterList","parameters":[],"src":"8746:0:22"},"scope":4313,"src":"8574:672:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":4314,"src":"559:8689:22","usedErrors":[644,649,880,885,890,897,902,907,914,2579,2582,3893,3895,3897,3899,3901,3903,3905],"usedEvents":[655,1986,2001,2010,2017,2571,2576,3980,3986,3990,3996]}],"src":"32:9217:22"},"id":22}},"contracts":{"@ethsign/sign-protocol-evm/src/interfaces/ISP.sol":{"ISP":{"abi":[{"inputs":[],"name":"AttestationAlreadyRevoked","type":"error"},{"inputs":[],"name":"AttestationInvalidDuration","type":"error"},{"inputs":[],"name":"AttestationIrrevocable","type":"error"},{"inputs":[],"name":"AttestationNonexistent","type":"error"},{"inputs":[],"name":"AttestationWrongAttester","type":"error"},{"inputs":[],"name":"InvalidDelegateSignature","type":"error"},{"inputs":[],"name":"LegacySPRequired","type":"error"},{"inputs":[],"name":"OffchainAttestationAlreadyRevoked","type":"error"},{"inputs":[],"name":"OffchainAttestationExists","type":"error"},{"inputs":[],"name":"OffchainAttestationNonexistent","type":"error"},{"inputs":[],"name":"Paused","type":"error"},{"inputs":[],"name":"SchemaNonexistent","type":"error"},{"inputs":[],"name":"SchemaWrongRegistrant","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"attestationId","type":"uint64"},{"indexed":false,"internalType":"string","name":"indexingKey","type":"string"}],"name":"AttestationMade","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"attestationId","type":"uint64"},{"indexed":false,"internalType":"string","name":"reason","type":"string"}],"name":"AttestationRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"attestationId","type":"string"}],"name":"OffchainAttestationMade","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"attestationId","type":"string"},{"indexed":false,"internalType":"string","name":"reason","type":"string"}],"name":"OffchainAttestationRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"schemaId","type":"uint64"}],"name":"SchemaRegistered","type":"event"},{"inputs":[{"components":[{"internalType":"uint64","name":"schemaId","type":"uint64"},{"internalType":"uint64","name":"linkedAttestationId","type":"uint64"},{"internalType":"uint64","name":"attestTimestamp","type":"uint64"},{"internalType":"uint64","name":"revokeTimestamp","type":"uint64"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint64","name":"validUntil","type":"uint64"},{"internalType":"enum DataLocation","name":"dataLocation","type":"uint8"},{"internalType":"bool","name":"revoked","type":"bool"},{"internalType":"bytes[]","name":"recipients","type":"bytes[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"},{"internalType":"contract IERC20","name":"resolverFeesERC20Token","type":"address"},{"internalType":"uint256","name":"resolverFeesERC20Amount","type":"uint256"},{"internalType":"string","name":"indexingKey","type":"string"},{"internalType":"bytes","name":"delegateSignature","type":"bytes"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"attest","outputs":[{"internalType":"uint64","name":"attestationId","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint64","name":"schemaId","type":"uint64"},{"internalType":"uint64","name":"linkedAttestationId","type":"uint64"},{"internalType":"uint64","name":"attestTimestamp","type":"uint64"},{"internalType":"uint64","name":"revokeTimestamp","type":"uint64"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint64","name":"validUntil","type":"uint64"},{"internalType":"enum DataLocation","name":"dataLocation","type":"uint8"},{"internalType":"bool","name":"revoked","type":"bool"},{"internalType":"bytes[]","name":"recipients","type":"bytes[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"},{"internalType":"string","name":"indexingKey","type":"string"},{"internalType":"bytes","name":"delegateSignature","type":"bytes"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"attest","outputs":[{"internalType":"uint64","name":"attestationId","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint64","name":"schemaId","type":"uint64"},{"internalType":"uint64","name":"linkedAttestationId","type":"uint64"},{"internalType":"uint64","name":"attestTimestamp","type":"uint64"},{"internalType":"uint64","name":"revokeTimestamp","type":"uint64"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint64","name":"validUntil","type":"uint64"},{"internalType":"enum DataLocation","name":"dataLocation","type":"uint8"},{"internalType":"bool","name":"revoked","type":"bool"},{"internalType":"bytes[]","name":"recipients","type":"bytes[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"},{"internalType":"uint256","name":"resolverFeesETH","type":"uint256"},{"internalType":"string","name":"indexingKey","type":"string"},{"internalType":"bytes","name":"delegateSignature","type":"bytes"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"attest","outputs":[{"internalType":"uint64","name":"attestationId","type":"uint64"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"uint64","name":"schemaId","type":"uint64"},{"internalType":"uint64","name":"linkedAttestationId","type":"uint64"},{"internalType":"uint64","name":"attestTimestamp","type":"uint64"},{"internalType":"uint64","name":"revokeTimestamp","type":"uint64"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint64","name":"validUntil","type":"uint64"},{"internalType":"enum DataLocation","name":"dataLocation","type":"uint8"},{"internalType":"bool","name":"revoked","type":"bool"},{"internalType":"bytes[]","name":"recipients","type":"bytes[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"resolverFeesETH","type":"uint256[]"},{"internalType":"string[]","name":"indexingKeys","type":"string[]"},{"internalType":"bytes","name":"delegateSignature","type":"bytes"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"attestBatch","outputs":[{"internalType":"uint64[]","name":"attestationIds","type":"uint64[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"uint64","name":"schemaId","type":"uint64"},{"internalType":"uint64","name":"linkedAttestationId","type":"uint64"},{"internalType":"uint64","name":"attestTimestamp","type":"uint64"},{"internalType":"uint64","name":"revokeTimestamp","type":"uint64"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint64","name":"validUntil","type":"uint64"},{"internalType":"enum DataLocation","name":"dataLocation","type":"uint8"},{"internalType":"bool","name":"revoked","type":"bool"},{"internalType":"bytes[]","name":"recipients","type":"bytes[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"contract IERC20[]","name":"resolverFeesERC20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"resolverFeesERC20Amount","type":"uint256[]"},{"internalType":"string[]","name":"indexingKeys","type":"string[]"},{"internalType":"bytes","name":"delegateSignature","type":"bytes"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"attestBatch","outputs":[{"internalType":"uint64[]","name":"attestationIds","type":"uint64[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint64","name":"schemaId","type":"uint64"},{"internalType":"uint64","name":"linkedAttestationId","type":"uint64"},{"internalType":"uint64","name":"attestTimestamp","type":"uint64"},{"internalType":"uint64","name":"revokeTimestamp","type":"uint64"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint64","name":"validUntil","type":"uint64"},{"internalType":"enum DataLocation","name":"dataLocation","type":"uint8"},{"internalType":"bool","name":"revoked","type":"bool"},{"internalType":"bytes[]","name":"recipients","type":"bytes[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"string[]","name":"indexingKeys","type":"string[]"},{"internalType":"bytes","name":"delegateSignature","type":"bytes"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"attestBatch","outputs":[{"internalType":"uint64[]","name":"attestationIds","type":"uint64[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"offchainAttestationId","type":"string"},{"internalType":"address","name":"delegateAttester","type":"address"},{"internalType":"bytes","name":"delegateSignature","type":"bytes"}],"name":"attestOffchain","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string[]","name":"offchainAttestationIds","type":"string[]"},{"internalType":"address","name":"delegateAttester","type":"address"},{"internalType":"bytes","name":"delegateSignature","type":"bytes"}],"name":"attestOffchainBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"attestationCounter","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"attestationId","type":"uint64"}],"name":"getAttestation","outputs":[{"components":[{"internalType":"uint64","name":"schemaId","type":"uint64"},{"internalType":"uint64","name":"linkedAttestationId","type":"uint64"},{"internalType":"uint64","name":"attestTimestamp","type":"uint64"},{"internalType":"uint64","name":"revokeTimestamp","type":"uint64"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint64","name":"validUntil","type":"uint64"},{"internalType":"enum DataLocation","name":"dataLocation","type":"uint8"},{"internalType":"bool","name":"revoked","type":"bool"},{"internalType":"bytes[]","name":"recipients","type":"bytes[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint64","name":"schemaId","type":"uint64"},{"internalType":"uint64","name":"linkedAttestationId","type":"uint64"},{"internalType":"uint64","name":"attestTimestamp","type":"uint64"},{"internalType":"uint64","name":"revokeTimestamp","type":"uint64"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint64","name":"validUntil","type":"uint64"},{"internalType":"enum DataLocation","name":"dataLocation","type":"uint8"},{"internalType":"bool","name":"revoked","type":"bool"},{"internalType":"bytes[]","name":"recipients","type":"bytes[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"}],"name":"getDelegatedAttestBatchHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"uint64","name":"schemaId","type":"uint64"},{"internalType":"uint64","name":"linkedAttestationId","type":"uint64"},{"internalType":"uint64","name":"attestTimestamp","type":"uint64"},{"internalType":"uint64","name":"revokeTimestamp","type":"uint64"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint64","name":"validUntil","type":"uint64"},{"internalType":"enum DataLocation","name":"dataLocation","type":"uint8"},{"internalType":"bool","name":"revoked","type":"bool"},{"internalType":"bytes[]","name":"recipients","type":"bytes[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"getDelegatedAttestHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"string[]","name":"offchainAttestationIds","type":"string[]"}],"name":"getDelegatedOffchainAttestBatchHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"string","name":"offchainAttestationId","type":"string"}],"name":"getDelegatedOffchainAttestHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"string[]","name":"offchainAttestationIds","type":"string[]"},{"internalType":"string[]","name":"reasons","type":"string[]"}],"name":"getDelegatedOffchainRevokeBatchHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"string","name":"offchainAttestationId","type":"string"},{"internalType":"string","name":"reason","type":"string"}],"name":"getDelegatedOffchainRevokeHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"registrant","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"enum DataLocation","name":"dataLocation","type":"uint8"},{"internalType":"uint64","name":"maxValidFor","type":"uint64"},{"internalType":"contract ISPHook","name":"hook","type":"address"},{"internalType":"uint64","name":"timestamp","type":"uint64"},{"internalType":"string","name":"data","type":"string"}],"internalType":"struct Schema[]","name":"schemas","type":"tuple[]"}],"name":"getDelegatedRegisterBatchHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"registrant","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"enum DataLocation","name":"dataLocation","type":"uint8"},{"internalType":"uint64","name":"maxValidFor","type":"uint64"},{"internalType":"contract ISPHook","name":"hook","type":"address"},{"internalType":"uint64","name":"timestamp","type":"uint64"},{"internalType":"string","name":"data","type":"string"}],"internalType":"struct Schema","name":"schema","type":"tuple"}],"name":"getDelegatedRegisterHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint64[]","name":"attestationIds","type":"uint64[]"},{"internalType":"string[]","name":"reasons","type":"string[]"}],"name":"getDelegatedRevokeBatchHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint64","name":"attestationId","type":"uint64"},{"internalType":"string","name":"reason","type":"string"}],"name":"getDelegatedRevokeHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"string","name":"offchainAttestationId","type":"string"}],"name":"getOffchainAttestation","outputs":[{"components":[{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint64","name":"timestamp","type":"uint64"}],"internalType":"struct OffchainAttestation","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"schemaId","type":"uint64"}],"name":"getSchema","outputs":[{"components":[{"internalType":"address","name":"registrant","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"enum DataLocation","name":"dataLocation","type":"uint8"},{"internalType":"uint64","name":"maxValidFor","type":"uint64"},{"internalType":"contract ISPHook","name":"hook","type":"address"},{"internalType":"uint64","name":"timestamp","type":"uint64"},{"internalType":"string","name":"data","type":"string"}],"internalType":"struct Schema","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"registrant","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"enum DataLocation","name":"dataLocation","type":"uint8"},{"internalType":"uint64","name":"maxValidFor","type":"uint64"},{"internalType":"contract ISPHook","name":"hook","type":"address"},{"internalType":"uint64","name":"timestamp","type":"uint64"},{"internalType":"string","name":"data","type":"string"}],"internalType":"struct Schema","name":"schema","type":"tuple"},{"internalType":"bytes","name":"delegateSignature","type":"bytes"}],"name":"register","outputs":[{"internalType":"uint64","name":"schemaId","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"registrant","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"enum DataLocation","name":"dataLocation","type":"uint8"},{"internalType":"uint64","name":"maxValidFor","type":"uint64"},{"internalType":"contract ISPHook","name":"hook","type":"address"},{"internalType":"uint64","name":"timestamp","type":"uint64"},{"internalType":"string","name":"data","type":"string"}],"internalType":"struct Schema[]","name":"schemas","type":"tuple[]"},{"internalType":"bytes","name":"delegateSignature","type":"bytes"}],"name":"registerBatch","outputs":[{"internalType":"uint64[]","name":"schemaIds","type":"uint64[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"attestationId","type":"uint64"},{"internalType":"string","name":"reason","type":"string"},{"internalType":"bytes","name":"delegateSignature","type":"bytes"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"revoke","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"attestationId","type":"uint64"},{"internalType":"string","name":"reason","type":"string"},{"internalType":"contract IERC20","name":"resolverFeesERC20Token","type":"address"},{"internalType":"uint256","name":"resolverFeesERC20Amount","type":"uint256"},{"internalType":"bytes","name":"delegateSignature","type":"bytes"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"revoke","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"attestationId","type":"uint64"},{"internalType":"string","name":"reason","type":"string"},{"internalType":"uint256","name":"resolverFeesETH","type":"uint256"},{"internalType":"bytes","name":"delegateSignature","type":"bytes"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"revoke","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint64[]","name":"attestationIds","type":"uint64[]"},{"internalType":"string[]","name":"reasons","type":"string[]"},{"internalType":"bytes","name":"delegateSignature","type":"bytes"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"revokeBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64[]","name":"attestationIds","type":"uint64[]"},{"internalType":"string[]","name":"reasons","type":"string[]"},{"internalType":"uint256[]","name":"resolverFeesETH","type":"uint256[]"},{"internalType":"bytes","name":"delegateSignature","type":"bytes"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"revokeBatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint64[]","name":"attestationIds","type":"uint64[]"},{"internalType":"string[]","name":"reasons","type":"string[]"},{"internalType":"contract IERC20[]","name":"resolverFeesERC20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"resolverFeesERC20Amount","type":"uint256[]"},{"internalType":"bytes","name":"delegateSignature","type":"bytes"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"revokeBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"offchainAttestationId","type":"string"},{"internalType":"string","name":"reason","type":"string"},{"internalType":"bytes","name":"delegateSignature","type":"bytes"}],"name":"revokeOffchain","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string[]","name":"offchainAttestationIds","type":"string[]"},{"internalType":"string[]","name":"reasons","type":"string[]"},{"internalType":"bytes","name":"delegateSignature","type":"bytes"}],"name":"revokeOffchainBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"schemaCounter","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"}],"devdoc":{"author":"Jack Xu @ EthSign","errors":{"AttestationAlreadyRevoked()":[{"details":"0xd8c3da86"}],"AttestationInvalidDuration()":[{"details":"0xa65e02ed"}],"AttestationIrrevocable()":[{"details":"0x8ac42f49"}],"AttestationNonexistent()":[{"details":"0x54681a13"}],"AttestationWrongAttester()":[{"details":"0xa9ad2007"}],"InvalidDelegateSignature()":[{"details":"0xfdf4e6f9"}],"LegacySPRequired()":[{"details":"0x5c34b9cc"}],"OffchainAttestationAlreadyRevoked()":[{"details":"0xa0671d20"}],"OffchainAttestationExists()":[{"details":"0xc83e3cdf"}],"OffchainAttestationNonexistent()":[{"details":"0xa006519a"}],"Paused()":[{"details":"0x9e87fac8"}],"SchemaNonexistent()":[{"details":"0x38f8c6c4"}],"SchemaWrongRegistrant()":[{"details":"0x71984561"}]},"kind":"dev","methods":{"attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),address,uint256,string,bytes,bytes)":{"details":"Emits `AttestationMade`.","params":{"attestation":"See `Attestation`.","delegateSignature":"An optional ECDSA delegateSignature if this is a delegated attestation. Use `\"\"` or `0x` otherwise.","extraData":"This is forwarded to the resolver directly.","indexingKey":"Used by the frontend to aid indexing.","resolverFeesERC20Amount":"Amount of funds to send to the hook.","resolverFeesERC20Token":"ERC20 token address used for payment."},"returns":{"attestationId":"The assigned ID of the attestation."}},"attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),string,bytes,bytes)":{"details":"Emits `AttestationMade`.","params":{"attestation":"See `Attestation`.","delegateSignature":"An optional ECDSA delegateSignature if this is a delegated attestation. Use `\"\"` or `0x` otherwise.","extraData":"This is forwarded to the resolver directly.","indexingKey":"Used by the frontend to aid indexing."},"returns":{"attestationId":"The assigned ID of the attestation."}},"attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),uint256,string,bytes,bytes)":{"details":"Emits `AttestationMade`.","params":{"attestation":"See `Attestation`.","delegateSignature":"An optional ECDSA delegateSignature if this is a delegated attestation. Use `\"\"` or `0x` otherwise.","extraData":"This is forwarded to the resolver directly.","indexingKey":"Used by the frontend to aid indexing.","resolverFeesETH":"Amount of funds to send to the hook."},"returns":{"attestationId":"The assigned ID of the attestation."}},"attestOffchain(string,address,bytes)":{"details":"Emits `OffchainAttestationMade`.","params":{"delegateAttester":"An optional delegated attester that authorized the caller to attest on their behalf if this is a delegated attestation. Use `address(0)` otherwise.","delegateSignature":"An optional ECDSA delegateSignature if this is a delegated attestation. Use `\"\"` or `0x` otherwise. Use `\"\"` or `0x` otherwise.","offchainAttestationId":"The off-chain data ID."}},"register((address,bool,uint8,uint64,address,uint64,string),bytes)":{"details":"Emits `SchemaRegistered`.","params":{"delegateSignature":"An optional ECDSA delegateSignature if this is a delegated attestation. Use `\"\"` or `0x` otherwise.","schema":"See `Schema`."},"returns":{"schemaId":"The assigned ID of the registered schema."}},"revoke(uint64,string,address,uint256,bytes,bytes)":{"details":"Emits `AttestationRevoked`. Must be called by the attester.","params":{"attestationId":"An existing attestation ID.","delegateSignature":"An optional ECDSA delegateSignature if this is a delegated revocation.","extraData":"This is forwarded to the resolver directly.","reason":"The revocation reason. This is only emitted as an event to save gas.","resolverFeesERC20Amount":"Amount of funds to send to the hook.","resolverFeesERC20Token":"ERC20 token address used for payment."}},"revoke(uint64,string,bytes,bytes)":{"details":"Emits `AttestationRevoked`. Must be called by the attester.","params":{"attestationId":"An existing attestation ID.","delegateSignature":"An optional ECDSA delegateSignature if this is a delegated revocation.","extraData":"This is forwarded to the resolver directly.","reason":"The revocation reason. This is only emitted as an event to save gas."}},"revoke(uint64,string,uint256,bytes,bytes)":{"details":"Emits `AttestationRevoked`. Must be called by the attester.","params":{"attestationId":"An existing attestation ID.","delegateSignature":"An optional ECDSA delegateSignature if this is a delegated revocation.","extraData":"This is forwarded to the resolver directly.","reason":"The revocation reason. This is only emitted as an event to save gas.","resolverFeesETH":"Amount of funds to send to the hook."}},"revokeOffchain(string,string,bytes)":{"details":"Emits `OffchainAttestationRevoked`. Must be called by the attester.","params":{"delegateSignature":"An optional ECDSA delegateSignature if this is a delegated revocation.","offchainAttestationId":"An existing attestation ID.","reason":"The revocation reason. This is only emitted as an event to save gas."}}},"title":"Sign Protocol Interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),address,uint256,string,bytes,bytes)":"812c255f","attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),string,bytes,bytes)":"b82916cb","attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),uint256,string,bytes,bytes)":"e09f1b7a","attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],address[],uint256[],string[],bytes,bytes)":"59d9a12f","attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],string[],bytes,bytes)":"d98934ff","attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],uint256[],string[],bytes,bytes)":"4e6ac1d5","attestOffchain(string,address,bytes)":"a01fb774","attestOffchainBatch(string[],address,bytes)":"1916749d","attestationCounter()":"2c996e03","getAttestation(uint64)":"62252880","getDelegatedAttestBatchHash((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[])":"3f50fb76","getDelegatedAttestHash((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes))":"8ef1fbc1","getDelegatedOffchainAttestBatchHash(string[])":"263bc92d","getDelegatedOffchainAttestHash(string)":"be919fb1","getDelegatedOffchainRevokeBatchHash(string[],string[])":"d3dc7b23","getDelegatedOffchainRevokeHash(string,string)":"985292eb","getDelegatedRegisterBatchHash((address,bool,uint8,uint64,address,uint64,string)[])":"00f0f855","getDelegatedRegisterHash((address,bool,uint8,uint64,address,uint64,string))":"570b7434","getDelegatedRevokeBatchHash(uint64[],string[])":"40f356fa","getDelegatedRevokeHash(uint64,string)":"dc50eada","getOffchainAttestation(string)":"6a67651c","getSchema(uint64)":"8d1be875","register((address,bool,uint8,uint64,address,uint64,string),bytes)":"e117a861","registerBatch((address,bool,uint8,uint64,address,uint64,string)[],bytes)":"5e7689b7","revoke(uint64,string,address,uint256,bytes,bytes)":"9b7f8318","revoke(uint64,string,bytes,bytes)":"24855e60","revoke(uint64,string,uint256,bytes,bytes)":"f83b92b7","revokeBatch(uint64[],string[],address[],uint256[],bytes,bytes)":"fd397913","revokeBatch(uint64[],string[],bytes,bytes)":"65ae13b3","revokeBatch(uint64[],string[],uint256[],bytes,bytes)":"d7681235","revokeOffchain(string,string,bytes)":"574a3066","revokeOffchainBatch(string[],string[],bytes)":"ba97637d","schemaCounter()":"cb6a3237","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AttestationAlreadyRevoked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AttestationInvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AttestationIrrevocable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AttestationNonexistent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AttestationWrongAttester\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDelegateSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LegacySPRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OffchainAttestationAlreadyRevoked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OffchainAttestationExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OffchainAttestationNonexistent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SchemaNonexistent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SchemaWrongRegistrant\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"attestationId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"indexingKey\",\"type\":\"string\"}],\"name\":\"AttestationMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"attestationId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"AttestationRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"attestationId\",\"type\":\"string\"}],\"name\":\"OffchainAttestationMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"attestationId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"OffchainAttestationRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"schemaId\",\"type\":\"uint64\"}],\"name\":\"SchemaRegistered\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"schemaId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"linkedAttestationId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"attestTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revokeTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"validUntil\",\"type\":\"uint64\"},{\"internalType\":\"enum DataLocation\",\"name\":\"dataLocation\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"recipients\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20\",\"name\":\"resolverFeesERC20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"resolverFeesERC20Amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"indexingKey\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"delegateSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"attestationId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"schemaId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"linkedAttestationId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"attestTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revokeTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"validUntil\",\"type\":\"uint64\"},{\"internalType\":\"enum DataLocation\",\"name\":\"dataLocation\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"recipients\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"indexingKey\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"delegateSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"attestationId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"schemaId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"linkedAttestationId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"attestTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revokeTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"validUntil\",\"type\":\"uint64\"},{\"internalType\":\"enum DataLocation\",\"name\":\"dataLocation\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"recipients\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"resolverFeesETH\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"indexingKey\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"delegateSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"attestationId\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"schemaId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"linkedAttestationId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"attestTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revokeTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"validUntil\",\"type\":\"uint64\"},{\"internalType\":\"enum DataLocation\",\"name\":\"dataLocation\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"recipients\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"resolverFeesETH\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"indexingKeys\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"delegateSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"attestBatch\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"attestationIds\",\"type\":\"uint64[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"schemaId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"linkedAttestationId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"attestTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revokeTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"validUntil\",\"type\":\"uint64\"},{\"internalType\":\"enum DataLocation\",\"name\":\"dataLocation\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"recipients\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"resolverFeesERC20Tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"resolverFeesERC20Amount\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"indexingKeys\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"delegateSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"attestBatch\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"attestationIds\",\"type\":\"uint64[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"schemaId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"linkedAttestationId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"attestTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revokeTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"validUntil\",\"type\":\"uint64\"},{\"internalType\":\"enum DataLocation\",\"name\":\"dataLocation\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"recipients\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"string[]\",\"name\":\"indexingKeys\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"delegateSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"attestBatch\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"attestationIds\",\"type\":\"uint64[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"offchainAttestationId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"delegateAttester\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"delegateSignature\",\"type\":\"bytes\"}],\"name\":\"attestOffchain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"offchainAttestationIds\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"delegateAttester\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"delegateSignature\",\"type\":\"bytes\"}],\"name\":\"attestOffchainBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attestationCounter\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"attestationId\",\"type\":\"uint64\"}],\"name\":\"getAttestation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"schemaId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"linkedAttestationId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"attestTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revokeTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"validUntil\",\"type\":\"uint64\"},{\"internalType\":\"enum DataLocation\",\"name\":\"dataLocation\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"recipients\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"schemaId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"linkedAttestationId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"attestTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revokeTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"validUntil\",\"type\":\"uint64\"},{\"internalType\":\"enum DataLocation\",\"name\":\"dataLocation\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"recipients\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"}],\"name\":\"getDelegatedAttestBatchHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"schemaId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"linkedAttestationId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"attestTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revokeTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"validUntil\",\"type\":\"uint64\"},{\"internalType\":\"enum DataLocation\",\"name\":\"dataLocation\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"recipients\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"getDelegatedAttestHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"offchainAttestationIds\",\"type\":\"string[]\"}],\"name\":\"getDelegatedOffchainAttestBatchHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"offchainAttestationId\",\"type\":\"string\"}],\"name\":\"getDelegatedOffchainAttestHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"offchainAttestationIds\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"reasons\",\"type\":\"string[]\"}],\"name\":\"getDelegatedOffchainRevokeBatchHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"offchainAttestationId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"getDelegatedOffchainRevokeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"enum DataLocation\",\"name\":\"dataLocation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"maxValidFor\",\"type\":\"uint64\"},{\"internalType\":\"contract ISPHook\",\"name\":\"hook\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"internalType\":\"struct Schema[]\",\"name\":\"schemas\",\"type\":\"tuple[]\"}],\"name\":\"getDelegatedRegisterBatchHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"enum DataLocation\",\"name\":\"dataLocation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"maxValidFor\",\"type\":\"uint64\"},{\"internalType\":\"contract ISPHook\",\"name\":\"hook\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"internalType\":\"struct Schema\",\"name\":\"schema\",\"type\":\"tuple\"}],\"name\":\"getDelegatedRegisterHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"attestationIds\",\"type\":\"uint64[]\"},{\"internalType\":\"string[]\",\"name\":\"reasons\",\"type\":\"string[]\"}],\"name\":\"getDelegatedRevokeBatchHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"attestationId\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"getDelegatedRevokeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"offchainAttestationId\",\"type\":\"string\"}],\"name\":\"getOffchainAttestation\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"internalType\":\"struct OffchainAttestation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"schemaId\",\"type\":\"uint64\"}],\"name\":\"getSchema\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"enum DataLocation\",\"name\":\"dataLocation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"maxValidFor\",\"type\":\"uint64\"},{\"internalType\":\"contract ISPHook\",\"name\":\"hook\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"internalType\":\"struct Schema\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"enum DataLocation\",\"name\":\"dataLocation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"maxValidFor\",\"type\":\"uint64\"},{\"internalType\":\"contract ISPHook\",\"name\":\"hook\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"internalType\":\"struct Schema\",\"name\":\"schema\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"delegateSignature\",\"type\":\"bytes\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"schemaId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"enum DataLocation\",\"name\":\"dataLocation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"maxValidFor\",\"type\":\"uint64\"},{\"internalType\":\"contract ISPHook\",\"name\":\"hook\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"internalType\":\"struct Schema[]\",\"name\":\"schemas\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"delegateSignature\",\"type\":\"bytes\"}],\"name\":\"registerBatch\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"schemaIds\",\"type\":\"uint64[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"attestationId\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"delegateSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"attestationId\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"resolverFeesERC20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"resolverFeesERC20Amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"delegateSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"attestationId\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"resolverFeesETH\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"delegateSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"attestationIds\",\"type\":\"uint64[]\"},{\"internalType\":\"string[]\",\"name\":\"reasons\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"delegateSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"revokeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"attestationIds\",\"type\":\"uint64[]\"},{\"internalType\":\"string[]\",\"name\":\"reasons\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"resolverFeesETH\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"delegateSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"revokeBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"attestationIds\",\"type\":\"uint64[]\"},{\"internalType\":\"string[]\",\"name\":\"reasons\",\"type\":\"string[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"resolverFeesERC20Tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"resolverFeesERC20Amount\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"delegateSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"revokeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"offchainAttestationId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"delegateSignature\",\"type\":\"bytes\"}],\"name\":\"revokeOffchain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"offchainAttestationIds\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"reasons\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"delegateSignature\",\"type\":\"bytes\"}],\"name\":\"revokeOffchainBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schemaCounter\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Jack Xu @ EthSign\",\"errors\":{\"AttestationAlreadyRevoked()\":[{\"details\":\"0xd8c3da86\"}],\"AttestationInvalidDuration()\":[{\"details\":\"0xa65e02ed\"}],\"AttestationIrrevocable()\":[{\"details\":\"0x8ac42f49\"}],\"AttestationNonexistent()\":[{\"details\":\"0x54681a13\"}],\"AttestationWrongAttester()\":[{\"details\":\"0xa9ad2007\"}],\"InvalidDelegateSignature()\":[{\"details\":\"0xfdf4e6f9\"}],\"LegacySPRequired()\":[{\"details\":\"0x5c34b9cc\"}],\"OffchainAttestationAlreadyRevoked()\":[{\"details\":\"0xa0671d20\"}],\"OffchainAttestationExists()\":[{\"details\":\"0xc83e3cdf\"}],\"OffchainAttestationNonexistent()\":[{\"details\":\"0xa006519a\"}],\"Paused()\":[{\"details\":\"0x9e87fac8\"}],\"SchemaNonexistent()\":[{\"details\":\"0x38f8c6c4\"}],\"SchemaWrongRegistrant()\":[{\"details\":\"0x71984561\"}]},\"kind\":\"dev\",\"methods\":{\"attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),address,uint256,string,bytes,bytes)\":{\"details\":\"Emits `AttestationMade`.\",\"params\":{\"attestation\":\"See `Attestation`.\",\"delegateSignature\":\"An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x` otherwise.\",\"extraData\":\"This is forwarded to the resolver directly.\",\"indexingKey\":\"Used by the frontend to aid indexing.\",\"resolverFeesERC20Amount\":\"Amount of funds to send to the hook.\",\"resolverFeesERC20Token\":\"ERC20 token address used for payment.\"},\"returns\":{\"attestationId\":\"The assigned ID of the attestation.\"}},\"attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),string,bytes,bytes)\":{\"details\":\"Emits `AttestationMade`.\",\"params\":{\"attestation\":\"See `Attestation`.\",\"delegateSignature\":\"An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x` otherwise.\",\"extraData\":\"This is forwarded to the resolver directly.\",\"indexingKey\":\"Used by the frontend to aid indexing.\"},\"returns\":{\"attestationId\":\"The assigned ID of the attestation.\"}},\"attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),uint256,string,bytes,bytes)\":{\"details\":\"Emits `AttestationMade`.\",\"params\":{\"attestation\":\"See `Attestation`.\",\"delegateSignature\":\"An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x` otherwise.\",\"extraData\":\"This is forwarded to the resolver directly.\",\"indexingKey\":\"Used by the frontend to aid indexing.\",\"resolverFeesETH\":\"Amount of funds to send to the hook.\"},\"returns\":{\"attestationId\":\"The assigned ID of the attestation.\"}},\"attestOffchain(string,address,bytes)\":{\"details\":\"Emits `OffchainAttestationMade`.\",\"params\":{\"delegateAttester\":\"An optional delegated attester that authorized the caller to attest on their behalf if this is a delegated attestation. Use `address(0)` otherwise.\",\"delegateSignature\":\"An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x` otherwise. Use `\\\"\\\"` or `0x` otherwise.\",\"offchainAttestationId\":\"The off-chain data ID.\"}},\"register((address,bool,uint8,uint64,address,uint64,string),bytes)\":{\"details\":\"Emits `SchemaRegistered`.\",\"params\":{\"delegateSignature\":\"An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x` otherwise.\",\"schema\":\"See `Schema`.\"},\"returns\":{\"schemaId\":\"The assigned ID of the registered schema.\"}},\"revoke(uint64,string,address,uint256,bytes,bytes)\":{\"details\":\"Emits `AttestationRevoked`. Must be called by the attester.\",\"params\":{\"attestationId\":\"An existing attestation ID.\",\"delegateSignature\":\"An optional ECDSA delegateSignature if this is a delegated revocation.\",\"extraData\":\"This is forwarded to the resolver directly.\",\"reason\":\"The revocation reason. This is only emitted as an event to save gas.\",\"resolverFeesERC20Amount\":\"Amount of funds to send to the hook.\",\"resolverFeesERC20Token\":\"ERC20 token address used for payment.\"}},\"revoke(uint64,string,bytes,bytes)\":{\"details\":\"Emits `AttestationRevoked`. Must be called by the attester.\",\"params\":{\"attestationId\":\"An existing attestation ID.\",\"delegateSignature\":\"An optional ECDSA delegateSignature if this is a delegated revocation.\",\"extraData\":\"This is forwarded to the resolver directly.\",\"reason\":\"The revocation reason. This is only emitted as an event to save gas.\"}},\"revoke(uint64,string,uint256,bytes,bytes)\":{\"details\":\"Emits `AttestationRevoked`. Must be called by the attester.\",\"params\":{\"attestationId\":\"An existing attestation ID.\",\"delegateSignature\":\"An optional ECDSA delegateSignature if this is a delegated revocation.\",\"extraData\":\"This is forwarded to the resolver directly.\",\"reason\":\"The revocation reason. This is only emitted as an event to save gas.\",\"resolverFeesETH\":\"Amount of funds to send to the hook.\"}},\"revokeOffchain(string,string,bytes)\":{\"details\":\"Emits `OffchainAttestationRevoked`. Must be called by the attester.\",\"params\":{\"delegateSignature\":\"An optional ECDSA delegateSignature if this is a delegated revocation.\",\"offchainAttestationId\":\"An existing attestation ID.\",\"reason\":\"The revocation reason. This is only emitted as an event to save gas.\"}}},\"title\":\"Sign Protocol Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),address,uint256,string,bytes,bytes)\":{\"notice\":\"Makes an attestation where the schema hook expects ERC20 payment.\"},\"attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),string,bytes,bytes)\":{\"notice\":\"Makes an attestation.\"},\"attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),uint256,string,bytes,bytes)\":{\"notice\":\"Makes an attestation where the schema hook expects ETH payment.\"},\"attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],address[],uint256[],string[],bytes,bytes)\":{\"notice\":\"Batch attests where the schema hook expects ERC20 payment.\"},\"attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],string[],bytes,bytes)\":{\"notice\":\"Batch attests.\"},\"attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],uint256[],string[],bytes,bytes)\":{\"notice\":\"Batch attests where the schema hook expects ETH payment.\"},\"attestOffchain(string,address,bytes)\":{\"notice\":\"Timestamps an off-chain data ID.\"},\"attestOffchainBatch(string[],address,bytes)\":{\"notice\":\"Batch timestamps off-chain data IDs.\"},\"attestationCounter()\":{\"notice\":\"Returns the current on-chain attestation counter. This is incremented for each `Attestation` made.\"},\"getAttestation(uint64)\":{\"notice\":\"Returns the specified `Attestation`.\"},\"getDelegatedAttestBatchHash((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[])\":{\"notice\":\"Returns the hash that will be used to authorize a delegated batch attestation.\"},\"getDelegatedAttestHash((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes))\":{\"notice\":\"Returns the hash that will be used to authorize a delegated attestation.\"},\"getDelegatedOffchainAttestBatchHash(string[])\":{\"notice\":\"Returns the hash that will be used to authorize a delegated batch offchain attestation.\"},\"getDelegatedOffchainAttestHash(string)\":{\"notice\":\"Returns the hash that will be used to authorize a delegated offchain attestation.\"},\"getDelegatedOffchainRevokeBatchHash(string[],string[])\":{\"notice\":\"Returns the hash that will be used to authorize a delegated batch offchain revocation.\"},\"getDelegatedOffchainRevokeHash(string,string)\":{\"notice\":\"Returns the hash that will be used to authorize a delegated offchain revocation.\"},\"getDelegatedRegisterBatchHash((address,bool,uint8,uint64,address,uint64,string)[])\":{\"notice\":\"Returns the hash that will be used to authorize a delegated batch registration.\"},\"getDelegatedRegisterHash((address,bool,uint8,uint64,address,uint64,string))\":{\"notice\":\"Returns the hash that will be used to authorize a delegated registration.\"},\"getDelegatedRevokeBatchHash(uint64[],string[])\":{\"notice\":\"Returns the hash that will be used to authorize a delegated batch revocation.\"},\"getDelegatedRevokeHash(uint64,string)\":{\"notice\":\"Returns the hash that will be used to authorize a delegated revocation.\"},\"getOffchainAttestation(string)\":{\"notice\":\"Returns the specified `OffchainAttestation`.\"},\"getSchema(uint64)\":{\"notice\":\"Returns the specified `Schema`.\"},\"register((address,bool,uint8,uint64,address,uint64,string),bytes)\":{\"notice\":\"Registers a Schema.\"},\"registerBatch((address,bool,uint8,uint64,address,uint64,string)[],bytes)\":{\"notice\":\"Batch registers a Schema.\"},\"revoke(uint64,string,address,uint256,bytes,bytes)\":{\"notice\":\"Revokes an existing revocable attestation where the schema hook expects ERC20 payment.\"},\"revoke(uint64,string,bytes,bytes)\":{\"notice\":\"Revokes an existing revocable attestation.\"},\"revoke(uint64,string,uint256,bytes,bytes)\":{\"notice\":\"Revokes an existing revocable attestation where the schema hook expects ERC20 payment.\"},\"revokeBatch(uint64[],string[],address[],uint256[],bytes,bytes)\":{\"notice\":\"Batch revokes revocable on-chain attestations where the schema hook expects ERC20 payment.\"},\"revokeBatch(uint64[],string[],bytes,bytes)\":{\"notice\":\"Batch revokes revocable on-chain attestations.\"},\"revokeBatch(uint64[],string[],uint256[],bytes,bytes)\":{\"notice\":\"Batch revokes revocable on-chain attestations where the schema hook expects ETH payment.\"},\"revokeOffchain(string,string,bytes)\":{\"notice\":\"Revokes an existing offchain attestation.\"},\"revokeOffchainBatch(string[],string[],bytes)\":{\"notice\":\"Batch revokes off-chain attestations.\"},\"schemaCounter()\":{\"notice\":\"Returns the current schema counter. This is incremented for each `Schema` registered.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ethsign/sign-protocol-evm/src/interfaces/ISP.sol\":\"ISP\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ethsign/sign-protocol-evm/src/interfaces/ISP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IVersionable } from \\\"./IVersionable.sol\\\";\\nimport { Schema } from \\\"../models/Schema.sol\\\";\\nimport { Attestation, OffchainAttestation } from \\\"../models/Attestation.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Sign Protocol Interface\\n * @author Jack Xu @ EthSign\\n */\\ninterface ISP is IVersionable {\\n    event SchemaRegistered(uint64 schemaId);\\n    event AttestationMade(uint64 attestationId, string indexingKey);\\n    event AttestationRevoked(uint64 attestationId, string reason);\\n    event OffchainAttestationMade(string attestationId);\\n    event OffchainAttestationRevoked(string attestationId, string reason);\\n\\n    /**\\n     * @dev 0x9e87fac8\\n     */\\n    error Paused();\\n    /**\\n     * @dev 0x38f8c6c4\\n     */\\n    error SchemaNonexistent();\\n    /**\\n     * @dev 0x71984561\\n     */\\n    error SchemaWrongRegistrant();\\n    /**\\n     * @dev 0x8ac42f49\\n     */\\n    error AttestationIrrevocable();\\n    /**\\n     * @dev 0x54681a13\\n     */\\n    error AttestationNonexistent();\\n    /**\\n     * @dev 0xa65e02ed\\n     */\\n    error AttestationInvalidDuration();\\n    /**\\n     * @dev 0xd8c3da86\\n     */\\n    error AttestationAlreadyRevoked();\\n    /**\\n     * @dev 0xa9ad2007\\n     */\\n    error AttestationWrongAttester();\\n    /**\\n     * @dev 0xc83e3cdf\\n     */\\n    error OffchainAttestationExists();\\n    /**\\n     * @dev 0xa006519a\\n     */\\n    error OffchainAttestationNonexistent();\\n    /**\\n     * @dev 0xa0671d20\\n     */\\n    error OffchainAttestationAlreadyRevoked();\\n    /**\\n     * @dev 0xfdf4e6f9\\n     */\\n    error InvalidDelegateSignature();\\n    /**\\n     * @dev 0x5c34b9cc\\n     */\\n    error LegacySPRequired();\\n\\n    /**\\n     * @notice Registers a Schema.\\n     * @dev Emits `SchemaRegistered`.\\n     * @param schema See `Schema`.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @return schemaId The assigned ID of the registered schema.\\n     */\\n    function register(Schema memory schema, bytes calldata delegateSignature) external returns (uint64 schemaId);\\n\\n    /**\\n     * @notice Makes an attestation.\\n     * @dev Emits `AttestationMade`.\\n     * @param attestation See `Attestation`.\\n     * @param indexingKey Used by the frontend to aid indexing.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @param extraData This is forwarded to the resolver directly.\\n     * @return attestationId The assigned ID of the attestation.\\n     */\\n    function attest(\\n        Attestation calldata attestation,\\n        string calldata indexingKey,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64 attestationId);\\n\\n    /**\\n     * @notice Makes an attestation where the schema hook expects ETH payment.\\n     * @dev Emits `AttestationMade`.\\n     * @param attestation See `Attestation`.\\n     * @param resolverFeesETH Amount of funds to send to the hook.\\n     * @param indexingKey Used by the frontend to aid indexing.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @param extraData This is forwarded to the resolver directly.\\n     * @return attestationId The assigned ID of the attestation.\\n     */\\n    function attest(\\n        Attestation calldata attestation,\\n        uint256 resolverFeesETH,\\n        string calldata indexingKey,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable\\n        returns (uint64 attestationId);\\n\\n    /**\\n     * @notice Makes an attestation where the schema hook expects ERC20 payment.\\n     * @dev Emits `AttestationMade`.\\n     * @param attestation See `Attestation`.\\n     * @param resolverFeesERC20Token ERC20 token address used for payment.\\n     * @param resolverFeesERC20Amount Amount of funds to send to the hook.\\n     * @param indexingKey Used by the frontend to aid indexing.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @param extraData This is forwarded to the resolver directly.\\n     * @return attestationId The assigned ID of the attestation.\\n     */\\n    function attest(\\n        Attestation calldata attestation,\\n        IERC20 resolverFeesERC20Token,\\n        uint256 resolverFeesERC20Amount,\\n        string calldata indexingKey,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64 attestationId);\\n\\n    /**\\n     * @notice Timestamps an off-chain data ID.\\n     * @dev Emits `OffchainAttestationMade`.\\n     * @param offchainAttestationId The off-chain data ID.\\n     * @param delegateAttester An optional delegated attester that authorized the caller to attest on their behalf if\\n     * this is a delegated attestation. Use `address(0)` otherwise.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise. Use `\\\"\\\"` or `0x` otherwise.\\n     */\\n    function attestOffchain(\\n        string calldata offchainAttestationId,\\n        address delegateAttester,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Revokes an existing revocable attestation.\\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\\n     * @param attestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     * @param extraData This is forwarded to the resolver directly.\\n     */\\n    function revoke(\\n        uint64 attestationId,\\n        string calldata reason,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Revokes an existing revocable attestation where the schema hook expects ERC20 payment.\\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\\n     * @param attestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param resolverFeesETH Amount of funds to send to the hook.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     * @param extraData This is forwarded to the resolver directly.\\n     */\\n    function revoke(\\n        uint64 attestationId,\\n        string calldata reason,\\n        uint256 resolverFeesETH,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    /**\\n     * @notice Revokes an existing revocable attestation where the schema hook expects ERC20 payment.\\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\\n     * @param attestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param resolverFeesERC20Token ERC20 token address used for payment.\\n     * @param resolverFeesERC20Amount Amount of funds to send to the hook.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     * @param extraData This is forwarded to the resolver directly.\\n     */\\n    function revoke(\\n        uint64 attestationId,\\n        string calldata reason,\\n        IERC20 resolverFeesERC20Token,\\n        uint256 resolverFeesERC20Amount,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Revokes an existing offchain attestation.\\n     * @dev Emits `OffchainAttestationRevoked`. Must be called by the attester.\\n     * @param offchainAttestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     */\\n    function revokeOffchain(\\n        string calldata offchainAttestationId,\\n        string calldata reason,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch registers a Schema.\\n     */\\n    function registerBatch(\\n        Schema[] calldata schemas,\\n        bytes calldata delegateSignature\\n    )\\n        external\\n        returns (uint64[] calldata schemaIds);\\n\\n    /**\\n     * @notice Batch attests.\\n     */\\n    function attestBatch(\\n        Attestation[] calldata attestations,\\n        string[] calldata indexingKeys,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64[] calldata attestationIds);\\n\\n    /**\\n     * @notice Batch attests where the schema hook expects ETH payment.\\n     */\\n    function attestBatch(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata resolverFeesETH,\\n        string[] calldata indexingKeys,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable\\n        returns (uint64[] calldata attestationIds);\\n\\n    /**\\n     * @notice Batch attests where the schema hook expects ERC20 payment.\\n     */\\n    function attestBatch(\\n        Attestation[] calldata attestations,\\n        IERC20[] calldata resolverFeesERC20Tokens,\\n        uint256[] calldata resolverFeesERC20Amount,\\n        string[] calldata indexingKeys,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64[] calldata attestationIds);\\n\\n    /**\\n     * @notice Batch timestamps off-chain data IDs.\\n     */\\n    function attestOffchainBatch(\\n        string[] calldata offchainAttestationIds,\\n        address delegateAttester,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch revokes revocable on-chain attestations.\\n     */\\n    function revokeBatch(\\n        uint64[] calldata attestationIds,\\n        string[] calldata reasons,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch revokes revocable on-chain attestations where the schema hook expects ETH payment.\\n     */\\n    function revokeBatch(\\n        uint64[] calldata attestationIds,\\n        string[] calldata reasons,\\n        uint256[] calldata resolverFeesETH,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    /**\\n     * @notice Batch revokes revocable on-chain attestations where the schema hook expects ERC20 payment.\\n     */\\n    function revokeBatch(\\n        uint64[] calldata attestationIds,\\n        string[] calldata reasons,\\n        IERC20[] calldata resolverFeesERC20Tokens,\\n        uint256[] calldata resolverFeesERC20Amount,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch revokes off-chain attestations.\\n     */\\n    function revokeOffchainBatch(\\n        string[] calldata offchainAttestationIds,\\n        string[] calldata reasons,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Returns the specified `Schema`.\\n     */\\n    function getSchema(uint64 schemaId) external view returns (Schema calldata);\\n\\n    /**\\n     * @notice Returns the specified `Attestation`.\\n     */\\n    function getAttestation(uint64 attestationId) external view returns (Attestation calldata);\\n\\n    /**\\n     * @notice Returns the specified `OffchainAttestation`.\\n     */\\n    function getOffchainAttestation(string calldata offchainAttestationId)\\n        external\\n        view\\n        returns (OffchainAttestation calldata);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated registration.\\n     */\\n    function getDelegatedRegisterHash(Schema memory schema) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch registration.\\n     */\\n    function getDelegatedRegisterBatchHash(Schema[] memory schemas) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated attestation.\\n     */\\n    function getDelegatedAttestHash(Attestation calldata attestation) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch attestation.\\n     */\\n    function getDelegatedAttestBatchHash(Attestation[] calldata attestations) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated offchain attestation.\\n     */\\n    function getDelegatedOffchainAttestHash(string calldata offchainAttestationId) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch offchain attestation.\\n     */\\n    function getDelegatedOffchainAttestBatchHash(string[] calldata offchainAttestationIds)\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated revocation.\\n     */\\n    function getDelegatedRevokeHash(uint64 attestationId, string memory reason) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch revocation.\\n     */\\n    function getDelegatedRevokeBatchHash(\\n        uint64[] memory attestationIds,\\n        string[] memory reasons\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated offchain revocation.\\n     */\\n    function getDelegatedOffchainRevokeHash(\\n        string memory offchainAttestationId,\\n        string memory reason\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch offchain revocation.\\n     */\\n    function getDelegatedOffchainRevokeBatchHash(\\n        string[] memory offchainAttestationIds,\\n        string[] memory reasons\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the current schema counter. This is incremented for each `Schema` registered.\\n     */\\n    function schemaCounter() external view returns (uint64);\\n\\n    /**\\n     * @notice Returns the current on-chain attestation counter. This is incremented for each `Attestation` made.\\n     */\\n    function attestationCounter() external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd5ddbb7cc6af2ee4c11d6c5dac739fc6254d84e13167bc054eb4477244490756\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/interfaces/ISPHook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SIGN Attestation Protocol Resolver Interface\\n * @author Jack Xu @ EthSign\\n */\\ninterface ISPHook {\\n    function didReceiveAttestation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    function didReceiveAttestation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        IERC20 resolverFeeERC20Token,\\n        uint256 resolverFeeERC20Amount,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    function didReceiveRevocation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    function didReceiveRevocation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        IERC20 resolverFeeERC20Token,\\n        uint256 resolverFeeERC20Amount,\\n        bytes calldata extraData\\n    )\\n        external;\\n}\\n\",\"keccak256\":\"0xa42159d34c4b8fa91507efacad81c14106f466efdc63b81a7d566dc0d2e736f4\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/interfaces/IVersionable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IVersionable\\n * @author Jack Xu @ EthSign\\n * @dev This interface helps contracts to keep track of their versioning for upgrade compatibility checks.\\n */\\ninterface IVersionable {\\n    function version() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0xbcf1955aa8423f4f77a46a988a7cd41a46ae92af42aa4546cfebdc2a92916129\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/models/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { DataLocation } from \\\"./DataLocation.sol\\\";\\n\\n/**\\n * @title Attestation\\n * @author Jack Xu @ EthSign\\n * @notice This struct represents an on-chain attestation record. This record is not deleted after revocation.\\n *\\n * `schemaId`: The `Schema` that this Attestation is based on. It must exist.\\n * `linkedAttestationId`: Useful if the current Attestation references a previous Attestation. It can either be 0 or an\\n * existing attestation ID.\\n * `attestTimestamp`: When the attestation was made. This is automatically populated by `_attest(...)`.\\n * `revokeTimestamp`: When the attestation was revoked. This is automatically populated by `_revoke(...)`.\\n * `attester`: The attester. At this time, the attester must be the caller of `attest()`.\\n * `validUntil`: The expiration timestamp of the Attestation. Must respect `Schema.maxValidFor`. 0 indicates no\\n * expiration date.\\n * `dataLocation`: Where `Attestation.data` is stored. See `DataLocation.DataLocation`.\\n * `revoked`: If the Attestation has been revoked. It is possible to make a revoked Attestation.\\n * `recipients`: The intended ABI-encoded recipients of this Attestation. This is of type `bytes` to support non-EVM\\n * repicients.\\n * `data`: The raw data of the Attestation based on `Schema.schema`. There is no enforcement here, however. Recommended\\n * to use `abi.encode`.\\n */\\nstruct Attestation {\\n    uint64 schemaId;\\n    uint64 linkedAttestationId;\\n    uint64 attestTimestamp;\\n    uint64 revokeTimestamp;\\n    address attester;\\n    uint64 validUntil;\\n    DataLocation dataLocation;\\n    bool revoked;\\n    bytes[] recipients;\\n    bytes data;\\n}\\n\\n/**\\n * @title OffchainAttestation\\n * @author Jack Xu @ EthSign\\n * @notice This struct represents an off-chain attestation record. This record is not deleted after revocation.\\n *\\n * `attester`: The attester. At this time, the attester must be the caller of `attestOffchain()`.\\n * `timestamp`: The `block.timestamp` of the function call.\\n */\\nstruct OffchainAttestation {\\n    address attester;\\n    uint64 timestamp;\\n}\\n\",\"keccak256\":\"0x8e2a182141d06bfdcce1325d70e8dd307f7d6b3d7b6fafcedc2dbabeb99fa30f\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/models/DataLocation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title DataLocation\\n * @author Jack Xu @ EthSign\\n * @notice This enum indicates where `Schema.data` and `Attestation.data` are stored.\\n */\\nenum DataLocation {\\n    ONCHAIN,\\n    ARWEAVE,\\n    IPFS,\\n    CUSTOM\\n}\\n\",\"keccak256\":\"0x14f64929317cae8ae822a0dd2c20315ac141f10fa255cd2b13a0a4962385ec10\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/models/Schema.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ISPHook } from \\\"../interfaces/ISPHook.sol\\\";\\nimport { DataLocation } from \\\"./DataLocation.sol\\\";\\n\\n/**\\n * @title Schema\\n * @author Jack Xu @ EthSign\\n * @notice This struct represents an on-chain Schema that Attestations can conform to.\\n *\\n * `registrant`: The address that registered this schema.\\n * `revocable`: Whether Attestations that adopt this Schema can be revoked.\\n * `dataLocation`: Where `Schema.data` is stored. See `DataLocation.DataLocation`.\\n * `maxValidFor`: The maximum number of seconds that an Attestation can remain valid. 0 means Attestations can be valid\\n * forever. This is enforced through `Attestation.validUntil`.\\n * `hook`: The `ISPHook` that is called at the end of every function. 0 means there is no hook set. See\\n * `ISPHook`.\\n * `timestamp`: When the schema was registered. This is automatically populated by `_register(...)`.\\n * `data`: The raw schema that `Attestation.data` should follow. Since there is no way to enforce this, it is a `string`\\n * for easy readability.\\n */\\nstruct Schema {\\n    address registrant;\\n    bool revocable;\\n    DataLocation dataLocation;\\n    uint64 maxValidFor;\\n    ISPHook hook;\\n    uint64 timestamp;\\n    string data;\\n}\\n\",\"keccak256\":\"0xcf3bd964790fdc7f72bacc86380b307e58bf15fa5f7332852d4969fe0db58216\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),address,uint256,string,bytes,bytes)":{"notice":"Makes an attestation where the schema hook expects ERC20 payment."},"attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),string,bytes,bytes)":{"notice":"Makes an attestation."},"attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),uint256,string,bytes,bytes)":{"notice":"Makes an attestation where the schema hook expects ETH payment."},"attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],address[],uint256[],string[],bytes,bytes)":{"notice":"Batch attests where the schema hook expects ERC20 payment."},"attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],string[],bytes,bytes)":{"notice":"Batch attests."},"attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],uint256[],string[],bytes,bytes)":{"notice":"Batch attests where the schema hook expects ETH payment."},"attestOffchain(string,address,bytes)":{"notice":"Timestamps an off-chain data ID."},"attestOffchainBatch(string[],address,bytes)":{"notice":"Batch timestamps off-chain data IDs."},"attestationCounter()":{"notice":"Returns the current on-chain attestation counter. This is incremented for each `Attestation` made."},"getAttestation(uint64)":{"notice":"Returns the specified `Attestation`."},"getDelegatedAttestBatchHash((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[])":{"notice":"Returns the hash that will be used to authorize a delegated batch attestation."},"getDelegatedAttestHash((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes))":{"notice":"Returns the hash that will be used to authorize a delegated attestation."},"getDelegatedOffchainAttestBatchHash(string[])":{"notice":"Returns the hash that will be used to authorize a delegated batch offchain attestation."},"getDelegatedOffchainAttestHash(string)":{"notice":"Returns the hash that will be used to authorize a delegated offchain attestation."},"getDelegatedOffchainRevokeBatchHash(string[],string[])":{"notice":"Returns the hash that will be used to authorize a delegated batch offchain revocation."},"getDelegatedOffchainRevokeHash(string,string)":{"notice":"Returns the hash that will be used to authorize a delegated offchain revocation."},"getDelegatedRegisterBatchHash((address,bool,uint8,uint64,address,uint64,string)[])":{"notice":"Returns the hash that will be used to authorize a delegated batch registration."},"getDelegatedRegisterHash((address,bool,uint8,uint64,address,uint64,string))":{"notice":"Returns the hash that will be used to authorize a delegated registration."},"getDelegatedRevokeBatchHash(uint64[],string[])":{"notice":"Returns the hash that will be used to authorize a delegated batch revocation."},"getDelegatedRevokeHash(uint64,string)":{"notice":"Returns the hash that will be used to authorize a delegated revocation."},"getOffchainAttestation(string)":{"notice":"Returns the specified `OffchainAttestation`."},"getSchema(uint64)":{"notice":"Returns the specified `Schema`."},"register((address,bool,uint8,uint64,address,uint64,string),bytes)":{"notice":"Registers a Schema."},"registerBatch((address,bool,uint8,uint64,address,uint64,string)[],bytes)":{"notice":"Batch registers a Schema."},"revoke(uint64,string,address,uint256,bytes,bytes)":{"notice":"Revokes an existing revocable attestation where the schema hook expects ERC20 payment."},"revoke(uint64,string,bytes,bytes)":{"notice":"Revokes an existing revocable attestation."},"revoke(uint64,string,uint256,bytes,bytes)":{"notice":"Revokes an existing revocable attestation where the schema hook expects ERC20 payment."},"revokeBatch(uint64[],string[],address[],uint256[],bytes,bytes)":{"notice":"Batch revokes revocable on-chain attestations where the schema hook expects ERC20 payment."},"revokeBatch(uint64[],string[],bytes,bytes)":{"notice":"Batch revokes revocable on-chain attestations."},"revokeBatch(uint64[],string[],uint256[],bytes,bytes)":{"notice":"Batch revokes revocable on-chain attestations where the schema hook expects ETH payment."},"revokeOffchain(string,string,bytes)":{"notice":"Revokes an existing offchain attestation."},"revokeOffchainBatch(string[],string[],bytes)":{"notice":"Batch revokes off-chain attestations."},"schemaCounter()":{"notice":"Returns the current schema counter. This is incremented for each `Schema` registered."}},"version":1}}},"@ethsign/sign-protocol-evm/src/interfaces/ISPHook.sol":{"ISPHook":{"abi":[{"inputs":[{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint64","name":"schemaId","type":"uint64"},{"internalType":"uint64","name":"attestationId","type":"uint64"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"didReceiveAttestation","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint64","name":"schemaId","type":"uint64"},{"internalType":"uint64","name":"attestationId","type":"uint64"},{"internalType":"contract IERC20","name":"resolverFeeERC20Token","type":"address"},{"internalType":"uint256","name":"resolverFeeERC20Amount","type":"uint256"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"didReceiveAttestation","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint64","name":"schemaId","type":"uint64"},{"internalType":"uint64","name":"attestationId","type":"uint64"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"didReceiveRevocation","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint64","name":"schemaId","type":"uint64"},{"internalType":"uint64","name":"attestationId","type":"uint64"},{"internalType":"contract IERC20","name":"resolverFeeERC20Token","type":"address"},{"internalType":"uint256","name":"resolverFeeERC20Amount","type":"uint256"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"didReceiveRevocation","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Jack Xu @ EthSign","kind":"dev","methods":{},"title":"SIGN Attestation Protocol Resolver Interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"didReceiveAttestation(address,uint64,uint64,address,uint256,bytes)":"4466507a","didReceiveAttestation(address,uint64,uint64,bytes)":"3398b4ed","didReceiveRevocation(address,uint64,uint64,address,uint256,bytes)":"e830b5c7","didReceiveRevocation(address,uint64,uint64,bytes)":"e33361f4"}},"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"schemaId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"attestationId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"didReceiveAttestation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"schemaId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"attestationId\",\"type\":\"uint64\"},{\"internalType\":\"contract IERC20\",\"name\":\"resolverFeeERC20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"resolverFeeERC20Amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"didReceiveAttestation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"schemaId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"attestationId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"didReceiveRevocation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"schemaId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"attestationId\",\"type\":\"uint64\"},{\"internalType\":\"contract IERC20\",\"name\":\"resolverFeeERC20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"resolverFeeERC20Amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"didReceiveRevocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Jack Xu @ EthSign\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SIGN Attestation Protocol Resolver Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ethsign/sign-protocol-evm/src/interfaces/ISPHook.sol\":\"ISPHook\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ethsign/sign-protocol-evm/src/interfaces/ISPHook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SIGN Attestation Protocol Resolver Interface\\n * @author Jack Xu @ EthSign\\n */\\ninterface ISPHook {\\n    function didReceiveAttestation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    function didReceiveAttestation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        IERC20 resolverFeeERC20Token,\\n        uint256 resolverFeeERC20Amount,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    function didReceiveRevocation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    function didReceiveRevocation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        IERC20 resolverFeeERC20Token,\\n        uint256 resolverFeeERC20Amount,\\n        bytes calldata extraData\\n    )\\n        external;\\n}\\n\",\"keccak256\":\"0xa42159d34c4b8fa91507efacad81c14106f466efdc63b81a7d566dc0d2e736f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@ethsign/sign-protocol-evm/src/interfaces/IVersionable.sol":{"IVersionable":{"abi":[{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"}],"devdoc":{"author":"Jack Xu @ EthSign","details":"This interface helps contracts to keep track of their versioning for upgrade compatibility checks.","kind":"dev","methods":{},"title":"IVersionable","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Jack Xu @ EthSign\",\"details\":\"This interface helps contracts to keep track of their versioning for upgrade compatibility checks.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"IVersionable\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ethsign/sign-protocol-evm/src/interfaces/IVersionable.sol\":\"IVersionable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ethsign/sign-protocol-evm/src/interfaces/IVersionable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IVersionable\\n * @author Jack Xu @ EthSign\\n * @dev This interface helps contracts to keep track of their versioning for upgrade compatibility checks.\\n */\\ninterface IVersionable {\\n    function version() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0xbcf1955aa8423f4f77a46a988a7cd41a46ae92af42aa4546cfebdc2a92916129\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the address provided by the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":639,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"IERC1155Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"}],"devdoc":{"details":"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.","errors":{"ERC1155InsufficientBalance(address,uint256,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC1155InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC1155InvalidArrayLength(uint256,uint256)":[{"details":"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.","params":{"idsLength":"Length of the array of token identifiers","valuesLength":"Length of the array of token amounts"}}],"ERC1155InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC1155InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC1155InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC1155MissingApprovalForAll(address,address)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","owner":"Address of the current owner of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC20Errors":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"}],"devdoc":{"details":"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.","errors":{"ERC20InsufficientAllowance(address,uint256,uint256)":[{"details":"Indicates a failure with the `spender`’s `allowance`. Used in transfers.","params":{"allowance":"Amount of tokens a `spender` is allowed to operate with.","needed":"Minimum amount required to perform a transfer.","spender":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC20InsufficientBalance(address,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred."}}],"ERC20InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC20InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC20InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC20InvalidSpender(address)":[{"details":"Indicates a failure with the `spender` to be approved. Used in approvals.","params":{"spender":"Address that may be allowed to operate on tokens without being their owner."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC721Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"}],"devdoc":{"details":"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/ERC1155.sol":{"ERC1155":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the basic standard multi-token. See https://eips.ethereum.org/EIPS/eip-1155 Originally based on code by Enjin: https://github.com/enjin/erc-1155","errors":{"ERC1155InsufficientBalance(address,uint256,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC1155InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC1155InvalidArrayLength(uint256,uint256)":[{"details":"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.","params":{"idsLength":"Length of the array of token identifiers","valuesLength":"Length of the array of token amounts"}}],"ERC1155InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC1155InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC1155InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC1155MissingApprovalForAll(address,address)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","owner":"Address of the current owner of a token."}}]},"events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"constructor":{"details":"See {_setURI}."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"See {IERC1155-safeBatchTransferFrom}."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"See {IERC1155-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the basic standard multi-token. See https://eips.ethereum.org/EIPS/eip-1155 Originally based on code by Enjin: https://github.com/enjin/erc-1155\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"constructor\":{\"details\":\"See {_setURI}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":\"ERC1155\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"./IERC1155.sol\\\";\\nimport {IERC1155Receiver} from \\\"./IERC1155Receiver.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {Arrays} from \\\"../../utils/Arrays.sol\\\";\\nimport {IERC1155Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n */\\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n    using Arrays for uint256[];\\n    using Arrays for address[];\\n\\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\\n\\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\n        }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\n     * (or `to`) is the zero address.\\n     *\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     *\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\n     */\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\n        if (ids.length != values.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids.unsafeMemoryAccess(i);\\n            uint256 value = values.unsafeMemoryAccess(i);\\n\\n            if (from != address(0)) {\\n                uint256 fromBalance = _balances[id][from];\\n                if (fromBalance < value) {\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n                }\\n                unchecked {\\n                    // Overflow not possible: value <= fromBalance\\n                    _balances[id][from] = fromBalance - value;\\n                }\\n            }\\n\\n            if (to != address(0)) {\\n                _balances[id][to] += value;\\n            }\\n        }\\n\\n        if (ids.length == 1) {\\n            uint256 id = ids.unsafeMemoryAccess(0);\\n            uint256 value = values.unsafeMemoryAccess(0);\\n            emit TransferSingle(operator, from, to, id, value);\\n        } else {\\n            emit TransferBatch(operator, from, to, ids, values);\\n        }\\n    }\\n\\n    /**\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\n     * contains code (eg. is a smart contract at the moment of execution).\\n     *\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\n     * overriding {_update} instead.\\n     */\\n    function _updateWithAcceptanceCheck(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal virtual {\\n        _update(from, to, ids, values);\\n        if (to != address(0)) {\\n            address operator = _msgSender();\\n            if (ids.length == 1) {\\n                uint256 id = ids.unsafeMemoryAccess(0);\\n                uint256 value = values.unsafeMemoryAccess(0);\\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\\n            } else {\\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC1155InvalidOperator(address(0));\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\n     */\\n    function _asSingletonArrays(\\n        uint256 element1,\\n        uint256 element2\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Load the free memory pointer\\n            array1 := mload(0x40)\\n            // Set array length to 1\\n            mstore(array1, 1)\\n            // Store the single element at the next word after the length (where content starts)\\n            mstore(add(array1, 0x20), element1)\\n\\n            // Repeat for next array locating it right after the first array\\n            array2 := add(array1, 0x40)\\n            mstore(array2, 1)\\n            mstore(add(array2, 0x20), element2)\\n\\n            // Update the free memory pointer by pointing after the second array\\n            mstore(0x40, add(array2, 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd9b0b8ee1ac6dfee14eb1ad4383a4739dbaa0f2036594bb3a16f0408085dadde\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8806d620b6571932b662cfd48fbd518d4f70df1f88a23b5724cacde64a77bda1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":957,"contract":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":963,"contract":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155","label":"_operatorApprovals","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":965,"contract":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155","label":"_uri","offset":0,"slot":"2","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"IERC1155":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP].","events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the value of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments. Requirements: - `ids` and `values` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers a `value` amount of tokens of type `id` from `from` to `to`. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155Received} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `value` amount. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP].\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the value of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments. Requirements: - `ids` and `values` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers a `value` amount of tokens of type `id` from `from` to `to`. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155Received} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `value` amount. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":\"IERC1155\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol":{"IERC1155Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface that must be implemented by smart contracts in order to receive ERC-1155 token transfers.","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match ids array)"},"returns":{"_0":"`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"_0":"`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface that must be implemented by smart contracts in order to receive ERC-1155 token transfers.\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":\"IERC1155Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol":{"ERC1155Burnable":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"burnBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Extension of {ERC1155} that allows token holders to destroy both their own tokens and those that they have been approved to use.","errors":{"ERC1155InsufficientBalance(address,uint256,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC1155InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC1155InvalidArrayLength(uint256,uint256)":[{"details":"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.","params":{"idsLength":"Length of the array of token identifiers","valuesLength":"Length of the array of token amounts"}}],"ERC1155InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC1155InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC1155InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC1155MissingApprovalForAll(address,address)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","owner":"Address of the current owner of a token."}}]},"events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"See {IERC1155-safeBatchTransferFrom}."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"See {IERC1155-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","burn(address,uint256,uint256)":"f5298aca","burnBatch(address,uint256[],uint256[])":"6b20c454","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {ERC1155} that allows token holders to destroy both their own tokens and those that they have been approved to use.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\":\"ERC1155Burnable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"./IERC1155.sol\\\";\\nimport {IERC1155Receiver} from \\\"./IERC1155Receiver.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {Arrays} from \\\"../../utils/Arrays.sol\\\";\\nimport {IERC1155Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n */\\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n    using Arrays for uint256[];\\n    using Arrays for address[];\\n\\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\\n\\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\n        }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\n     * (or `to`) is the zero address.\\n     *\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     *\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\n     */\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\n        if (ids.length != values.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids.unsafeMemoryAccess(i);\\n            uint256 value = values.unsafeMemoryAccess(i);\\n\\n            if (from != address(0)) {\\n                uint256 fromBalance = _balances[id][from];\\n                if (fromBalance < value) {\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n                }\\n                unchecked {\\n                    // Overflow not possible: value <= fromBalance\\n                    _balances[id][from] = fromBalance - value;\\n                }\\n            }\\n\\n            if (to != address(0)) {\\n                _balances[id][to] += value;\\n            }\\n        }\\n\\n        if (ids.length == 1) {\\n            uint256 id = ids.unsafeMemoryAccess(0);\\n            uint256 value = values.unsafeMemoryAccess(0);\\n            emit TransferSingle(operator, from, to, id, value);\\n        } else {\\n            emit TransferBatch(operator, from, to, ids, values);\\n        }\\n    }\\n\\n    /**\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\n     * contains code (eg. is a smart contract at the moment of execution).\\n     *\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\n     * overriding {_update} instead.\\n     */\\n    function _updateWithAcceptanceCheck(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal virtual {\\n        _update(from, to, ids, values);\\n        if (to != address(0)) {\\n            address operator = _msgSender();\\n            if (ids.length == 1) {\\n                uint256 id = ids.unsafeMemoryAccess(0);\\n                uint256 value = values.unsafeMemoryAccess(0);\\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\\n            } else {\\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC1155InvalidOperator(address(0));\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\n     */\\n    function _asSingletonArrays(\\n        uint256 element1,\\n        uint256 element2\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Load the free memory pointer\\n            array1 := mload(0x40)\\n            // Set array length to 1\\n            mstore(array1, 1)\\n            // Store the single element at the next word after the length (where content starts)\\n            mstore(add(array1, 0x20), element1)\\n\\n            // Repeat for next array locating it right after the first array\\n            array2 := add(array1, 0x40)\\n            mstore(array2, 1)\\n            mstore(add(array2, 0x20), element2)\\n\\n            // Update the free memory pointer by pointing after the second array\\n            mstore(0x40, add(array2, 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd9b0b8ee1ac6dfee14eb1ad4383a4739dbaa0f2036594bb3a16f0408085dadde\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC1155} from \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(address account, uint256 id, uint256 value) public virtual {\\n        if (account != _msgSender() && !isApprovedForAll(account, _msgSender())) {\\n            revert ERC1155MissingApprovalForAll(_msgSender(), account);\\n        }\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\\n        if (account != _msgSender() && !isApprovedForAll(account, _msgSender())) {\\n            revert ERC1155MissingApprovalForAll(_msgSender(), account);\\n        }\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0xdfab949ba677f4b122d0c14225e6db7ca8a65524e2f00049e57b04f68eceeb87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8806d620b6571932b662cfd48fbd518d4f70df1f88a23b5724cacde64a77bda1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":957,"contract":"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol:ERC1155Burnable","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":963,"contract":"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol:ERC1155Burnable","label":"_operatorApprovals","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":965,"contract":"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol:ERC1155Burnable","label":"_uri","offset":0,"slot":"2","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol":{"ERC1155Pausable":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"},{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"ERC1155 token with pausable token transfers, minting and burning. Useful for scenarios such as preventing trades until the end of an evaluation period, or having an emergency switch for freezing all token transfers in the event of a large bug. IMPORTANT: This contract does not include public pause and unpause functions. In addition to inheriting this contract, you must define both functions, invoking the {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate access control, e.g. using {AccessControl} or {Ownable}. Not doing so will make the contract pause mechanism of the contract unreachable, and thus unusable.","errors":{"ERC1155InsufficientBalance(address,uint256,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC1155InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC1155InvalidArrayLength(uint256,uint256)":[{"details":"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.","params":{"idsLength":"Length of the array of token identifiers","valuesLength":"Length of the array of token amounts"}}],"ERC1155InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC1155InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC1155InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC1155MissingApprovalForAll(address,address)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","owner":"Address of the current owner of a token."}}],"EnforcedPause()":[{"details":"The operation failed because the contract is paused."}],"ExpectedPause()":[{"details":"The operation failed because the contract is not paused."}]},"events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"See {IERC1155-safeBatchTransferFrom}."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"See {IERC1155-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","paused()":"5c975abb","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1155 token with pausable token transfers, minting and burning. Useful for scenarios such as preventing trades until the end of an evaluation period, or having an emergency switch for freezing all token transfers in the event of a large bug. IMPORTANT: This contract does not include public pause and unpause functions. In addition to inheriting this contract, you must define both functions, invoking the {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate access control, e.g. using {AccessControl} or {Ownable}. Not doing so will make the contract pause mechanism of the contract unreachable, and thus unusable.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}]},\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\":\"ERC1155Pausable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"./IERC1155.sol\\\";\\nimport {IERC1155Receiver} from \\\"./IERC1155Receiver.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {Arrays} from \\\"../../utils/Arrays.sol\\\";\\nimport {IERC1155Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n */\\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n    using Arrays for uint256[];\\n    using Arrays for address[];\\n\\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\\n\\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\n        }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\n     * (or `to`) is the zero address.\\n     *\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     *\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\n     */\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\n        if (ids.length != values.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids.unsafeMemoryAccess(i);\\n            uint256 value = values.unsafeMemoryAccess(i);\\n\\n            if (from != address(0)) {\\n                uint256 fromBalance = _balances[id][from];\\n                if (fromBalance < value) {\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n                }\\n                unchecked {\\n                    // Overflow not possible: value <= fromBalance\\n                    _balances[id][from] = fromBalance - value;\\n                }\\n            }\\n\\n            if (to != address(0)) {\\n                _balances[id][to] += value;\\n            }\\n        }\\n\\n        if (ids.length == 1) {\\n            uint256 id = ids.unsafeMemoryAccess(0);\\n            uint256 value = values.unsafeMemoryAccess(0);\\n            emit TransferSingle(operator, from, to, id, value);\\n        } else {\\n            emit TransferBatch(operator, from, to, ids, values);\\n        }\\n    }\\n\\n    /**\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\n     * contains code (eg. is a smart contract at the moment of execution).\\n     *\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\n     * overriding {_update} instead.\\n     */\\n    function _updateWithAcceptanceCheck(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal virtual {\\n        _update(from, to, ids, values);\\n        if (to != address(0)) {\\n            address operator = _msgSender();\\n            if (ids.length == 1) {\\n                uint256 id = ids.unsafeMemoryAccess(0);\\n                uint256 value = values.unsafeMemoryAccess(0);\\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\\n            } else {\\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC1155InvalidOperator(address(0));\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\n     */\\n    function _asSingletonArrays(\\n        uint256 element1,\\n        uint256 element2\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Load the free memory pointer\\n            array1 := mload(0x40)\\n            // Set array length to 1\\n            mstore(array1, 1)\\n            // Store the single element at the next word after the length (where content starts)\\n            mstore(add(array1, 0x20), element1)\\n\\n            // Repeat for next array locating it right after the first array\\n            array2 := add(array1, 0x40)\\n            mstore(array2, 1)\\n            mstore(add(array2, 0x20), element2)\\n\\n            // Update the free memory pointer by pointing after the second array\\n            mstore(0x40, add(array2, 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd9b0b8ee1ac6dfee14eb1ad4383a4739dbaa0f2036594bb3a16f0408085dadde\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/ERC1155Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC1155} from \\\"../ERC1155.sol\\\";\\nimport {Pausable} from \\\"../../../utils/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * IMPORTANT: This contract does not include public pause and unpause functions. In\\n * addition to inheriting this contract, you must define both functions, invoking the\\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\\n * make the contract pause mechanism of the contract unreachable, and thus unusable.\\n */\\nabstract contract ERC1155Pausable is ERC1155, Pausable {\\n    /**\\n     * @dev See {ERC1155-_update}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _update(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) internal virtual override whenNotPaused {\\n        super._update(from, to, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0x866feab1d0ba71404ed131a1bcea272ce84f6215da28ff91d6dc2bebb7614b66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8806d620b6571932b662cfd48fbd518d4f70df1f88a23b5724cacde64a77bda1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":957,"contract":"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol:ERC1155Pausable","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":963,"contract":"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol:ERC1155Pausable","label":"_operatorApprovals","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":965,"contract":"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol:ERC1155Pausable","label":"_uri","offset":0,"slot":"2","type":"t_string_storage"},{"astId":2566,"contract":"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol:ERC1155Pausable","label":"_paused","offset":0,"slot":"3","type":"t_bool"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol":{"IERC1155MetadataURI":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the optional ERC1155MetadataExtension interface, as defined in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].","events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the value of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments. Requirements: - `ids` and `values` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers a `value` amount of tokens of type `id` from `from` to `to`. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155Received} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `value` amount. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"uri(uint256)":{"details":"Returns the URI for token type `id`. If the `\\{id\\}` substring is present in the URI, it must be replaced by clients with the actual token type ID."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the optional ERC1155MetadataExtension interface, as defined in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the value of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments. Requirements: - `ids` and `values` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers a `value` amount of tokens of type `id` from `from` to `to`. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155Received} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `value` amount. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"uri(uint256)\":{\"details\":\"Returns the URI for token type `id`. If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by clients with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":\"IERC1155MetadataURI\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the value of tokens owned by `account`."},"totalSupply()":{"details":"Returns the value of tokens in existence."},"transfer(address,uint256)":{"details":"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Arrays.sol":{"Arrays":{"abi":[],"devdoc":{"details":"Collection of functions related to array types.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122059ecb8ada59a43ffeb772e88096f9c240bbf10547513635037489284d0885e8a64736f6c63430008190033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSIZE 0xEC 0xB8 0xAD 0xA5 SWAP11 NUMBER SELFDESTRUCT 0xEB PUSH24 0x2E88096F9C240BBF10547513635037489284D0885E8A6473 PUSH16 0x6C634300081900330000000000000000 ","sourceMap":"276:4526:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;276:4526:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122059ecb8ada59a43ffeb772e88096f9c240bbf10547513635037489284d0885e8a64736f6c63430008190033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSIZE 0xEC 0xB8 0xAD 0xA5 SWAP11 NUMBER SELFDESTRUCT 0xEB PUSH24 0x2E88096F9C240BBF10547513635037489284D0885E8A6473 PUSH16 0x6C634300081900330000000000000000 ","sourceMap":"276:4526:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"findUpperBound(uint256[] storage pointer,uint256)":"infinite","unsafeAccess(address[] storage pointer,uint256)":"infinite","unsafeAccess(bytes32[] storage pointer,uint256)":"infinite","unsafeAccess(uint256[] storage pointer,uint256)":"infinite","unsafeMemoryAccess(address[] memory,uint256)":"infinite","unsafeMemoryAccess(uint256[] memory,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to array types.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Arrays.sol\":\"Arrays\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8806d620b6571932b662cfd48fbd518d4f70df1f88a23b5724cacde64a77bda1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Pausable.sol":{"Pausable":{"abi":[{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.","errors":{"EnforcedPause()":[{"details":"The operation failed because the contract is paused."}],"ExpectedPause()":[{"details":"The operation failed because the contract is not paused."}]},"events":{"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract in unpaused state."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract in unpaused state.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Pausable.sol\":\"Pausable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2566,"contract":"@openzeppelin/contracts/utils/Pausable.sol:Pausable","label":"_paused","offset":0,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ```","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220357d605880b1a3d26108bfb4ebc2277c7f7e3e6d5ac922583279b77b9549b8cb64736f6c63430008190033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATALOAD PUSH30 0x605880B1A3D26108BFB4EBC2277C7F7E3E6D5AC922583279B77B9549B8CB PUSH5 0x736F6C6343 STOP ADDMOD NOT STOP CALLER ","sourceMap":"1245:2685:18:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1245:2685:18;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220357d605880b1a3d26108bfb4ebc2277c7f7e3e6d5ac922583279b77b9549b8cb64736f6c63430008190033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATALOAD PUSH30 0x605880B1A3D26108BFB4EBC2277C7F7E3E6D5AC922583279B77B9549B8CB PUSH5 0x736F6C6343 STOP ADDMOD NOT STOP CALLER ","sourceMap":"1245:2685:18:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[{"inputs":[],"name":"MathOverflowedMulDiv","type":"error"}],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","errors":{"MathOverflowedMulDiv()":[{"details":"Muldiv operation overflow."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220028c2e157c4cfd30f386f6267835fd08e622bb0f3e758f996beb75df9556844964736f6c63430008190033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MUL DUP13 0x2E ISZERO PUSH29 0x4CFD30F386F6267835FD08E622BB0F3E758F996BEB75DF955684496473 PUSH16 0x6C634300081900330000000000000000 ","sourceMap":"203:14914:21:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;203:14914:21;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220028c2e157c4cfd30f386f6267835fd08e622bb0f3e758f996beb75df9556844964736f6c63430008190033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MUL DUP13 0x2E ISZERO PUSH29 0x4CFD30F386F6267835FD08E622BB0F3E758F996BEB75DF955684496473 PUSH16 0x6C634300081900330000000000000000 ","sourceMap":"203:14914:21:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite","unsignedRoundsUp(enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"src/Scientify4.sol":{"Scientify4":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"},{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"inputs":[],"name":"InvalidAttestation","type":"error"},{"inputs":[],"name":"NoTokenBalance","type":"error"},{"inputs":[],"name":"NotAuthenticated","type":"error"},{"inputs":[],"name":"NotEnoughValue","type":"error"},{"inputs":[],"name":"NotLiquidable","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[],"name":"PaymentFailed","type":"error"},{"inputs":[],"name":"ResearchCap","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"researchId","type":"uint256"},{"indexed":false,"internalType":"address","name":"researcher","type":"address"}],"name":"ResearchCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"researcher","type":"address"},{"indexed":false,"internalType":"uint64","name":"attestationId","type":"uint64"}],"name":"ResearcherVerificationAttested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"researcher","type":"address"}],"name":"ResearcherVerified","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"researcher","type":"address"},{"indexed":false,"internalType":"uint64","name":"attestationId","type":"uint64"}],"name":"VerificationAttested","type":"event"},{"inputs":[{"internalType":"uint256","name":"researchId","type":"uint256"},{"internalType":"string","name":"cid","type":"string"},{"internalType":"uint64","name":"linkedAttestationId","type":"uint64"}],"name":"attestResearchAuthor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"researcher","type":"address"}],"name":"attestResearcherVerification","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"burnBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"repo","type":"string"},{"internalType":"uint256","name":"invest","type":"uint256"},{"internalType":"uint256","name":"articlePrice","type":"uint256"},{"internalType":"uint256","name":"articlePriceIncreaseRate","type":"uint256"}],"name":"createResearch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"researcher","type":"address"}],"name":"isVerifiedResearcher","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"researchById","outputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"enum Scientify4.ResearchState","name":"state","type":"uint8"},{"internalType":"uint256","name":"investment","type":"uint256"},{"internalType":"uint256","name":"articlePrice","type":"uint256"},{"internalType":"uint256","name":"sharePrice","type":"uint256"},{"internalType":"uint256","name":"articlePriceIncreaseRate","type":"uint256"},{"internalType":"uint256","name":"funding","type":"uint256"},{"internalType":"uint256","name":"profit","type":"uint256"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"string","name":"documentCID","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"researchRequest","outputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"enum Scientify4.ResearchState","name":"state","type":"uint8"},{"internalType":"uint256","name":"investment","type":"uint256"},{"internalType":"uint256","name":"articlePrice","type":"uint256"},{"internalType":"uint256","name":"sharePrice","type":"uint256"},{"internalType":"uint256","name":"articlePriceIncreaseRate","type":"uint256"},{"internalType":"uint256","name":"funding","type":"uint256"},{"internalType":"uint256","name":"profit","type":"uint256"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"string","name":"documentCID","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"researcherVerificationAttestations","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"spInstance","outputs":[{"internalType":"contract ISP","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"verifiedResearchers","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"researcher","type":"address"}],"name":"verifyResearcher","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"ERC1155InsufficientBalance(address,uint256,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC1155InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC1155InvalidArrayLength(uint256,uint256)":[{"details":"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.","params":{"idsLength":"Length of the array of token identifiers","valuesLength":"Length of the array of token amounts"}}],"ERC1155InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC1155InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC1155InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC1155MissingApprovalForAll(address,address)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","owner":"Address of the current owner of a token."}}],"EnforcedPause()":[{"details":"The operation failed because the contract is paused."}],"ExpectedPause()":[{"details":"The operation failed because the contract is not paused."}],"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"owner()":{"details":"Returns the address of the current owner."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"See {IERC1155-safeBatchTransferFrom}."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"See {IERC1155-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2591":{"entryPoint":null,"id":2591,"parameterSlots":0,"returnSlots":0},"@_3974":{"entryPoint":null,"id":3974,"parameterSlots":0,"returnSlots":0},"@_681":{"entryPoint":null,"id":681,"parameterSlots":1,"returnSlots":0},"@_976":{"entryPoint":null,"id":976,"parameterSlots":1,"returnSlots":0},"@_setURI_1589":{"entryPoint":173,"id":1589,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_777":{"entryPoint":189,"id":777,"parameterSlots":1,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":351,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":432,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":293,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":271,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:2931:23","nodeType":"YulBlock","src":"0:2931:23","statements":[{"nativeSrc":"6:3:23","nodeType":"YulBlock","src":"6:3:23","statements":[]},{"body":{"nativeSrc":"115:102:23","nodeType":"YulBlock","src":"115:102:23","statements":[{"nativeSrc":"125:26:23","nodeType":"YulAssignment","src":"125:26:23","value":{"arguments":[{"name":"headStart","nativeSrc":"137:9:23","nodeType":"YulIdentifier","src":"137:9:23"},{"kind":"number","nativeSrc":"148:2:23","nodeType":"YulLiteral","src":"148:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"133:3:23","nodeType":"YulIdentifier","src":"133:3:23"},"nativeSrc":"133:18:23","nodeType":"YulFunctionCall","src":"133:18:23"},"variableNames":[{"name":"tail","nativeSrc":"125:4:23","nodeType":"YulIdentifier","src":"125:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"167:9:23","nodeType":"YulIdentifier","src":"167:9:23"},{"arguments":[{"name":"value0","nativeSrc":"182:6:23","nodeType":"YulIdentifier","src":"182:6:23"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"198:3:23","nodeType":"YulLiteral","src":"198:3:23","type":"","value":"160"},{"kind":"number","nativeSrc":"203:1:23","nodeType":"YulLiteral","src":"203:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"194:3:23","nodeType":"YulIdentifier","src":"194:3:23"},"nativeSrc":"194:11:23","nodeType":"YulFunctionCall","src":"194:11:23"},{"kind":"number","nativeSrc":"207:1:23","nodeType":"YulLiteral","src":"207:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"190:3:23","nodeType":"YulIdentifier","src":"190:3:23"},"nativeSrc":"190:19:23","nodeType":"YulFunctionCall","src":"190:19:23"}],"functionName":{"name":"and","nativeSrc":"178:3:23","nodeType":"YulIdentifier","src":"178:3:23"},"nativeSrc":"178:32:23","nodeType":"YulFunctionCall","src":"178:32:23"}],"functionName":{"name":"mstore","nativeSrc":"160:6:23","nodeType":"YulIdentifier","src":"160:6:23"},"nativeSrc":"160:51:23","nodeType":"YulFunctionCall","src":"160:51:23"},"nativeSrc":"160:51:23","nodeType":"YulExpressionStatement","src":"160:51:23"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"14:203:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"84:9:23","nodeType":"YulTypedName","src":"84:9:23","type":""},{"name":"value0","nativeSrc":"95:6:23","nodeType":"YulTypedName","src":"95:6:23","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"106:4:23","nodeType":"YulTypedName","src":"106:4:23","type":""}],"src":"14:203:23"},{"body":{"nativeSrc":"254:95:23","nodeType":"YulBlock","src":"254:95:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"271:1:23","nodeType":"YulLiteral","src":"271:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"278:3:23","nodeType":"YulLiteral","src":"278:3:23","type":"","value":"224"},{"kind":"number","nativeSrc":"283:10:23","nodeType":"YulLiteral","src":"283:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"274:3:23","nodeType":"YulIdentifier","src":"274:3:23"},"nativeSrc":"274:20:23","nodeType":"YulFunctionCall","src":"274:20:23"}],"functionName":{"name":"mstore","nativeSrc":"264:6:23","nodeType":"YulIdentifier","src":"264:6:23"},"nativeSrc":"264:31:23","nodeType":"YulFunctionCall","src":"264:31:23"},"nativeSrc":"264:31:23","nodeType":"YulExpressionStatement","src":"264:31:23"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"311:1:23","nodeType":"YulLiteral","src":"311:1:23","type":"","value":"4"},{"kind":"number","nativeSrc":"314:4:23","nodeType":"YulLiteral","src":"314:4:23","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"304:6:23","nodeType":"YulIdentifier","src":"304:6:23"},"nativeSrc":"304:15:23","nodeType":"YulFunctionCall","src":"304:15:23"},"nativeSrc":"304:15:23","nodeType":"YulExpressionStatement","src":"304:15:23"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"335:1:23","nodeType":"YulLiteral","src":"335:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"338:4:23","nodeType":"YulLiteral","src":"338:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"328:6:23","nodeType":"YulIdentifier","src":"328:6:23"},"nativeSrc":"328:15:23","nodeType":"YulFunctionCall","src":"328:15:23"},"nativeSrc":"328:15:23","nodeType":"YulExpressionStatement","src":"328:15:23"}]},"name":"panic_error_0x41","nativeSrc":"222:127:23","nodeType":"YulFunctionDefinition","src":"222:127:23"},{"body":{"nativeSrc":"409:325:23","nodeType":"YulBlock","src":"409:325:23","statements":[{"nativeSrc":"419:22:23","nodeType":"YulAssignment","src":"419:22:23","value":{"arguments":[{"kind":"number","nativeSrc":"433:1:23","nodeType":"YulLiteral","src":"433:1:23","type":"","value":"1"},{"name":"data","nativeSrc":"436:4:23","nodeType":"YulIdentifier","src":"436:4:23"}],"functionName":{"name":"shr","nativeSrc":"429:3:23","nodeType":"YulIdentifier","src":"429:3:23"},"nativeSrc":"429:12:23","nodeType":"YulFunctionCall","src":"429:12:23"},"variableNames":[{"name":"length","nativeSrc":"419:6:23","nodeType":"YulIdentifier","src":"419:6:23"}]},{"nativeSrc":"450:38:23","nodeType":"YulVariableDeclaration","src":"450:38:23","value":{"arguments":[{"name":"data","nativeSrc":"480:4:23","nodeType":"YulIdentifier","src":"480:4:23"},{"kind":"number","nativeSrc":"486:1:23","nodeType":"YulLiteral","src":"486:1:23","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"476:3:23","nodeType":"YulIdentifier","src":"476:3:23"},"nativeSrc":"476:12:23","nodeType":"YulFunctionCall","src":"476:12:23"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"454:18:23","nodeType":"YulTypedName","src":"454:18:23","type":""}]},{"body":{"nativeSrc":"527:31:23","nodeType":"YulBlock","src":"527:31:23","statements":[{"nativeSrc":"529:27:23","nodeType":"YulAssignment","src":"529:27:23","value":{"arguments":[{"name":"length","nativeSrc":"543:6:23","nodeType":"YulIdentifier","src":"543:6:23"},{"kind":"number","nativeSrc":"551:4:23","nodeType":"YulLiteral","src":"551:4:23","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"539:3:23","nodeType":"YulIdentifier","src":"539:3:23"},"nativeSrc":"539:17:23","nodeType":"YulFunctionCall","src":"539:17:23"},"variableNames":[{"name":"length","nativeSrc":"529:6:23","nodeType":"YulIdentifier","src":"529:6:23"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"507:18:23","nodeType":"YulIdentifier","src":"507:18:23"}],"functionName":{"name":"iszero","nativeSrc":"500:6:23","nodeType":"YulIdentifier","src":"500:6:23"},"nativeSrc":"500:26:23","nodeType":"YulFunctionCall","src":"500:26:23"},"nativeSrc":"497:61:23","nodeType":"YulIf","src":"497:61:23"},{"body":{"nativeSrc":"617:111:23","nodeType":"YulBlock","src":"617:111:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"638:1:23","nodeType":"YulLiteral","src":"638:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"645:3:23","nodeType":"YulLiteral","src":"645:3:23","type":"","value":"224"},{"kind":"number","nativeSrc":"650:10:23","nodeType":"YulLiteral","src":"650:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"641:3:23","nodeType":"YulIdentifier","src":"641:3:23"},"nativeSrc":"641:20:23","nodeType":"YulFunctionCall","src":"641:20:23"}],"functionName":{"name":"mstore","nativeSrc":"631:6:23","nodeType":"YulIdentifier","src":"631:6:23"},"nativeSrc":"631:31:23","nodeType":"YulFunctionCall","src":"631:31:23"},"nativeSrc":"631:31:23","nodeType":"YulExpressionStatement","src":"631:31:23"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"682:1:23","nodeType":"YulLiteral","src":"682:1:23","type":"","value":"4"},{"kind":"number","nativeSrc":"685:4:23","nodeType":"YulLiteral","src":"685:4:23","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"675:6:23","nodeType":"YulIdentifier","src":"675:6:23"},"nativeSrc":"675:15:23","nodeType":"YulFunctionCall","src":"675:15:23"},"nativeSrc":"675:15:23","nodeType":"YulExpressionStatement","src":"675:15:23"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"710:1:23","nodeType":"YulLiteral","src":"710:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"713:4:23","nodeType":"YulLiteral","src":"713:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"703:6:23","nodeType":"YulIdentifier","src":"703:6:23"},"nativeSrc":"703:15:23","nodeType":"YulFunctionCall","src":"703:15:23"},"nativeSrc":"703:15:23","nodeType":"YulExpressionStatement","src":"703:15:23"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"573:18:23","nodeType":"YulIdentifier","src":"573:18:23"},{"arguments":[{"name":"length","nativeSrc":"596:6:23","nodeType":"YulIdentifier","src":"596:6:23"},{"kind":"number","nativeSrc":"604:2:23","nodeType":"YulLiteral","src":"604:2:23","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"593:2:23","nodeType":"YulIdentifier","src":"593:2:23"},"nativeSrc":"593:14:23","nodeType":"YulFunctionCall","src":"593:14:23"}],"functionName":{"name":"eq","nativeSrc":"570:2:23","nodeType":"YulIdentifier","src":"570:2:23"},"nativeSrc":"570:38:23","nodeType":"YulFunctionCall","src":"570:38:23"},"nativeSrc":"567:161:23","nodeType":"YulIf","src":"567:161:23"}]},"name":"extract_byte_array_length","nativeSrc":"354:380:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"389:4:23","nodeType":"YulTypedName","src":"389:4:23","type":""}],"returnVariables":[{"name":"length","nativeSrc":"398:6:23","nodeType":"YulTypedName","src":"398:6:23","type":""}],"src":"354:380:23"},{"body":{"nativeSrc":"795:65:23","nodeType":"YulBlock","src":"795:65:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"812:1:23","nodeType":"YulLiteral","src":"812:1:23","type":"","value":"0"},{"name":"ptr","nativeSrc":"815:3:23","nodeType":"YulIdentifier","src":"815:3:23"}],"functionName":{"name":"mstore","nativeSrc":"805:6:23","nodeType":"YulIdentifier","src":"805:6:23"},"nativeSrc":"805:14:23","nodeType":"YulFunctionCall","src":"805:14:23"},"nativeSrc":"805:14:23","nodeType":"YulExpressionStatement","src":"805:14:23"},{"nativeSrc":"828:26:23","nodeType":"YulAssignment","src":"828:26:23","value":{"arguments":[{"kind":"number","nativeSrc":"846:1:23","nodeType":"YulLiteral","src":"846:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"849:4:23","nodeType":"YulLiteral","src":"849:4:23","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"836:9:23","nodeType":"YulIdentifier","src":"836:9:23"},"nativeSrc":"836:18:23","nodeType":"YulFunctionCall","src":"836:18:23"},"variableNames":[{"name":"data","nativeSrc":"828:4:23","nodeType":"YulIdentifier","src":"828:4:23"}]}]},"name":"array_dataslot_string_storage","nativeSrc":"739:121:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"778:3:23","nodeType":"YulTypedName","src":"778:3:23","type":""}],"returnVariables":[{"name":"data","nativeSrc":"786:4:23","nodeType":"YulTypedName","src":"786:4:23","type":""}],"src":"739:121:23"},{"body":{"nativeSrc":"946:462:23","nodeType":"YulBlock","src":"946:462:23","statements":[{"body":{"nativeSrc":"979:423:23","nodeType":"YulBlock","src":"979:423:23","statements":[{"nativeSrc":"993:11:23","nodeType":"YulVariableDeclaration","src":"993:11:23","value":{"kind":"number","nativeSrc":"1003:1:23","nodeType":"YulLiteral","src":"1003:1:23","type":"","value":"0"},"variables":[{"name":"_1","nativeSrc":"997:2:23","nodeType":"YulTypedName","src":"997:2:23","type":""}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1024:1:23","nodeType":"YulLiteral","src":"1024:1:23","type":"","value":"0"},{"name":"array","nativeSrc":"1027:5:23","nodeType":"YulIdentifier","src":"1027:5:23"}],"functionName":{"name":"mstore","nativeSrc":"1017:6:23","nodeType":"YulIdentifier","src":"1017:6:23"},"nativeSrc":"1017:16:23","nodeType":"YulFunctionCall","src":"1017:16:23"},"nativeSrc":"1017:16:23","nodeType":"YulExpressionStatement","src":"1017:16:23"},{"nativeSrc":"1046:30:23","nodeType":"YulVariableDeclaration","src":"1046:30:23","value":{"arguments":[{"kind":"number","nativeSrc":"1068:1:23","nodeType":"YulLiteral","src":"1068:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"1071:4:23","nodeType":"YulLiteral","src":"1071:4:23","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"1058:9:23","nodeType":"YulIdentifier","src":"1058:9:23"},"nativeSrc":"1058:18:23","nodeType":"YulFunctionCall","src":"1058:18:23"},"variables":[{"name":"data","nativeSrc":"1050:4:23","nodeType":"YulTypedName","src":"1050:4:23","type":""}]},{"nativeSrc":"1089:57:23","nodeType":"YulVariableDeclaration","src":"1089:57:23","value":{"arguments":[{"name":"data","nativeSrc":"1112:4:23","nodeType":"YulIdentifier","src":"1112:4:23"},{"arguments":[{"kind":"number","nativeSrc":"1122:1:23","nodeType":"YulLiteral","src":"1122:1:23","type":"","value":"5"},{"arguments":[{"name":"startIndex","nativeSrc":"1129:10:23","nodeType":"YulIdentifier","src":"1129:10:23"},{"kind":"number","nativeSrc":"1141:2:23","nodeType":"YulLiteral","src":"1141:2:23","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1125:3:23","nodeType":"YulIdentifier","src":"1125:3:23"},"nativeSrc":"1125:19:23","nodeType":"YulFunctionCall","src":"1125:19:23"}],"functionName":{"name":"shr","nativeSrc":"1118:3:23","nodeType":"YulIdentifier","src":"1118:3:23"},"nativeSrc":"1118:27:23","nodeType":"YulFunctionCall","src":"1118:27:23"}],"functionName":{"name":"add","nativeSrc":"1108:3:23","nodeType":"YulIdentifier","src":"1108:3:23"},"nativeSrc":"1108:38:23","nodeType":"YulFunctionCall","src":"1108:38:23"},"variables":[{"name":"deleteStart","nativeSrc":"1093:11:23","nodeType":"YulTypedName","src":"1093:11:23","type":""}]},{"body":{"nativeSrc":"1183:23:23","nodeType":"YulBlock","src":"1183:23:23","statements":[{"nativeSrc":"1185:19:23","nodeType":"YulAssignment","src":"1185:19:23","value":{"name":"data","nativeSrc":"1200:4:23","nodeType":"YulIdentifier","src":"1200:4:23"},"variableNames":[{"name":"deleteStart","nativeSrc":"1185:11:23","nodeType":"YulIdentifier","src":"1185:11:23"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"1165:10:23","nodeType":"YulIdentifier","src":"1165:10:23"},{"kind":"number","nativeSrc":"1177:4:23","nodeType":"YulLiteral","src":"1177:4:23","type":"","value":"0x20"}],"functionName":{"name":"lt","nativeSrc":"1162:2:23","nodeType":"YulIdentifier","src":"1162:2:23"},"nativeSrc":"1162:20:23","nodeType":"YulFunctionCall","src":"1162:20:23"},"nativeSrc":"1159:47:23","nodeType":"YulIf","src":"1159:47:23"},{"nativeSrc":"1219:41:23","nodeType":"YulVariableDeclaration","src":"1219:41:23","value":{"arguments":[{"name":"data","nativeSrc":"1233:4:23","nodeType":"YulIdentifier","src":"1233:4:23"},{"arguments":[{"kind":"number","nativeSrc":"1243:1:23","nodeType":"YulLiteral","src":"1243:1:23","type":"","value":"5"},{"arguments":[{"name":"len","nativeSrc":"1250:3:23","nodeType":"YulIdentifier","src":"1250:3:23"},{"kind":"number","nativeSrc":"1255:2:23","nodeType":"YulLiteral","src":"1255:2:23","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1246:3:23","nodeType":"YulIdentifier","src":"1246:3:23"},"nativeSrc":"1246:12:23","nodeType":"YulFunctionCall","src":"1246:12:23"}],"functionName":{"name":"shr","nativeSrc":"1239:3:23","nodeType":"YulIdentifier","src":"1239:3:23"},"nativeSrc":"1239:20:23","nodeType":"YulFunctionCall","src":"1239:20:23"}],"functionName":{"name":"add","nativeSrc":"1229:3:23","nodeType":"YulIdentifier","src":"1229:3:23"},"nativeSrc":"1229:31:23","nodeType":"YulFunctionCall","src":"1229:31:23"},"variables":[{"name":"_2","nativeSrc":"1223:2:23","nodeType":"YulTypedName","src":"1223:2:23","type":""}]},{"nativeSrc":"1273:24:23","nodeType":"YulVariableDeclaration","src":"1273:24:23","value":{"name":"deleteStart","nativeSrc":"1286:11:23","nodeType":"YulIdentifier","src":"1286:11:23"},"variables":[{"name":"start","nativeSrc":"1277:5:23","nodeType":"YulTypedName","src":"1277:5:23","type":""}]},{"body":{"nativeSrc":"1371:21:23","nodeType":"YulBlock","src":"1371:21:23","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"1380:5:23","nodeType":"YulIdentifier","src":"1380:5:23"},{"name":"_1","nativeSrc":"1387:2:23","nodeType":"YulIdentifier","src":"1387:2:23"}],"functionName":{"name":"sstore","nativeSrc":"1373:6:23","nodeType":"YulIdentifier","src":"1373:6:23"},"nativeSrc":"1373:17:23","nodeType":"YulFunctionCall","src":"1373:17:23"},"nativeSrc":"1373:17:23","nodeType":"YulExpressionStatement","src":"1373:17:23"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"1321:5:23","nodeType":"YulIdentifier","src":"1321:5:23"},{"name":"_2","nativeSrc":"1328:2:23","nodeType":"YulIdentifier","src":"1328:2:23"}],"functionName":{"name":"lt","nativeSrc":"1318:2:23","nodeType":"YulIdentifier","src":"1318:2:23"},"nativeSrc":"1318:13:23","nodeType":"YulFunctionCall","src":"1318:13:23"},"nativeSrc":"1310:82:23","nodeType":"YulForLoop","post":{"nativeSrc":"1332:26:23","nodeType":"YulBlock","src":"1332:26:23","statements":[{"nativeSrc":"1334:22:23","nodeType":"YulAssignment","src":"1334:22:23","value":{"arguments":[{"name":"start","nativeSrc":"1347:5:23","nodeType":"YulIdentifier","src":"1347:5:23"},{"kind":"number","nativeSrc":"1354:1:23","nodeType":"YulLiteral","src":"1354:1:23","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"1343:3:23","nodeType":"YulIdentifier","src":"1343:3:23"},"nativeSrc":"1343:13:23","nodeType":"YulFunctionCall","src":"1343:13:23"},"variableNames":[{"name":"start","nativeSrc":"1334:5:23","nodeType":"YulIdentifier","src":"1334:5:23"}]}]},"pre":{"nativeSrc":"1314:3:23","nodeType":"YulBlock","src":"1314:3:23","statements":[]},"src":"1310:82:23"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"962:3:23","nodeType":"YulIdentifier","src":"962:3:23"},{"kind":"number","nativeSrc":"967:2:23","nodeType":"YulLiteral","src":"967:2:23","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"959:2:23","nodeType":"YulIdentifier","src":"959:2:23"},"nativeSrc":"959:11:23","nodeType":"YulFunctionCall","src":"959:11:23"},"nativeSrc":"956:446:23","nodeType":"YulIf","src":"956:446:23"}]},"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"865:543:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"918:5:23","nodeType":"YulTypedName","src":"918:5:23","type":""},{"name":"len","nativeSrc":"925:3:23","nodeType":"YulTypedName","src":"925:3:23","type":""},{"name":"startIndex","nativeSrc":"930:10:23","nodeType":"YulTypedName","src":"930:10:23","type":""}],"src":"865:543:23"},{"body":{"nativeSrc":"1498:81:23","nodeType":"YulBlock","src":"1498:81:23","statements":[{"nativeSrc":"1508:65:23","nodeType":"YulAssignment","src":"1508:65:23","value":{"arguments":[{"arguments":[{"name":"data","nativeSrc":"1523:4:23","nodeType":"YulIdentifier","src":"1523:4:23"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1541:1:23","nodeType":"YulLiteral","src":"1541:1:23","type":"","value":"3"},{"name":"len","nativeSrc":"1544:3:23","nodeType":"YulIdentifier","src":"1544:3:23"}],"functionName":{"name":"shl","nativeSrc":"1537:3:23","nodeType":"YulIdentifier","src":"1537:3:23"},"nativeSrc":"1537:11:23","nodeType":"YulFunctionCall","src":"1537:11:23"},{"arguments":[{"kind":"number","nativeSrc":"1554:1:23","nodeType":"YulLiteral","src":"1554:1:23","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"1550:3:23","nodeType":"YulIdentifier","src":"1550:3:23"},"nativeSrc":"1550:6:23","nodeType":"YulFunctionCall","src":"1550:6:23"}],"functionName":{"name":"shr","nativeSrc":"1533:3:23","nodeType":"YulIdentifier","src":"1533:3:23"},"nativeSrc":"1533:24:23","nodeType":"YulFunctionCall","src":"1533:24:23"}],"functionName":{"name":"not","nativeSrc":"1529:3:23","nodeType":"YulIdentifier","src":"1529:3:23"},"nativeSrc":"1529:29:23","nodeType":"YulFunctionCall","src":"1529:29:23"}],"functionName":{"name":"and","nativeSrc":"1519:3:23","nodeType":"YulIdentifier","src":"1519:3:23"},"nativeSrc":"1519:40:23","nodeType":"YulFunctionCall","src":"1519:40:23"},{"arguments":[{"kind":"number","nativeSrc":"1565:1:23","nodeType":"YulLiteral","src":"1565:1:23","type":"","value":"1"},{"name":"len","nativeSrc":"1568:3:23","nodeType":"YulIdentifier","src":"1568:3:23"}],"functionName":{"name":"shl","nativeSrc":"1561:3:23","nodeType":"YulIdentifier","src":"1561:3:23"},"nativeSrc":"1561:11:23","nodeType":"YulFunctionCall","src":"1561:11:23"}],"functionName":{"name":"or","nativeSrc":"1516:2:23","nodeType":"YulIdentifier","src":"1516:2:23"},"nativeSrc":"1516:57:23","nodeType":"YulFunctionCall","src":"1516:57:23"},"variableNames":[{"name":"used","nativeSrc":"1508:4:23","nodeType":"YulIdentifier","src":"1508:4:23"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"1413:166:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"1475:4:23","nodeType":"YulTypedName","src":"1475:4:23","type":""},{"name":"len","nativeSrc":"1481:3:23","nodeType":"YulTypedName","src":"1481:3:23","type":""}],"returnVariables":[{"name":"used","nativeSrc":"1489:4:23","nodeType":"YulTypedName","src":"1489:4:23","type":""}],"src":"1413:166:23"},{"body":{"nativeSrc":"1680:1249:23","nodeType":"YulBlock","src":"1680:1249:23","statements":[{"nativeSrc":"1690:24:23","nodeType":"YulVariableDeclaration","src":"1690:24:23","value":{"arguments":[{"name":"src","nativeSrc":"1710:3:23","nodeType":"YulIdentifier","src":"1710:3:23"}],"functionName":{"name":"mload","nativeSrc":"1704:5:23","nodeType":"YulIdentifier","src":"1704:5:23"},"nativeSrc":"1704:10:23","nodeType":"YulFunctionCall","src":"1704:10:23"},"variables":[{"name":"newLen","nativeSrc":"1694:6:23","nodeType":"YulTypedName","src":"1694:6:23","type":""}]},{"body":{"nativeSrc":"1757:22:23","nodeType":"YulBlock","src":"1757:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"1759:16:23","nodeType":"YulIdentifier","src":"1759:16:23"},"nativeSrc":"1759:18:23","nodeType":"YulFunctionCall","src":"1759:18:23"},"nativeSrc":"1759:18:23","nodeType":"YulExpressionStatement","src":"1759:18:23"}]},"condition":{"arguments":[{"name":"newLen","nativeSrc":"1729:6:23","nodeType":"YulIdentifier","src":"1729:6:23"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1745:2:23","nodeType":"YulLiteral","src":"1745:2:23","type":"","value":"64"},{"kind":"number","nativeSrc":"1749:1:23","nodeType":"YulLiteral","src":"1749:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"1741:3:23","nodeType":"YulIdentifier","src":"1741:3:23"},"nativeSrc":"1741:10:23","nodeType":"YulFunctionCall","src":"1741:10:23"},{"kind":"number","nativeSrc":"1753:1:23","nodeType":"YulLiteral","src":"1753:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"1737:3:23","nodeType":"YulIdentifier","src":"1737:3:23"},"nativeSrc":"1737:18:23","nodeType":"YulFunctionCall","src":"1737:18:23"}],"functionName":{"name":"gt","nativeSrc":"1726:2:23","nodeType":"YulIdentifier","src":"1726:2:23"},"nativeSrc":"1726:30:23","nodeType":"YulFunctionCall","src":"1726:30:23"},"nativeSrc":"1723:56:23","nodeType":"YulIf","src":"1723:56:23"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"1832:4:23","nodeType":"YulIdentifier","src":"1832:4:23"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"1870:4:23","nodeType":"YulIdentifier","src":"1870:4:23"}],"functionName":{"name":"sload","nativeSrc":"1864:5:23","nodeType":"YulIdentifier","src":"1864:5:23"},"nativeSrc":"1864:11:23","nodeType":"YulFunctionCall","src":"1864:11:23"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"1838:25:23","nodeType":"YulIdentifier","src":"1838:25:23"},"nativeSrc":"1838:38:23","nodeType":"YulFunctionCall","src":"1838:38:23"},{"name":"newLen","nativeSrc":"1878:6:23","nodeType":"YulIdentifier","src":"1878:6:23"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"1788:43:23","nodeType":"YulIdentifier","src":"1788:43:23"},"nativeSrc":"1788:97:23","nodeType":"YulFunctionCall","src":"1788:97:23"},"nativeSrc":"1788:97:23","nodeType":"YulExpressionStatement","src":"1788:97:23"},{"nativeSrc":"1894:18:23","nodeType":"YulVariableDeclaration","src":"1894:18:23","value":{"kind":"number","nativeSrc":"1911:1:23","nodeType":"YulLiteral","src":"1911:1:23","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"1898:9:23","nodeType":"YulTypedName","src":"1898:9:23","type":""}]},{"nativeSrc":"1921:23:23","nodeType":"YulVariableDeclaration","src":"1921:23:23","value":{"kind":"number","nativeSrc":"1940:4:23","nodeType":"YulLiteral","src":"1940:4:23","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nativeSrc":"1925:11:23","nodeType":"YulTypedName","src":"1925:11:23","type":""}]},{"nativeSrc":"1953:17:23","nodeType":"YulAssignment","src":"1953:17:23","value":{"kind":"number","nativeSrc":"1966:4:23","nodeType":"YulLiteral","src":"1966:4:23","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nativeSrc":"1953:9:23","nodeType":"YulIdentifier","src":"1953:9:23"}]},{"cases":[{"body":{"nativeSrc":"2016:656:23","nodeType":"YulBlock","src":"2016:656:23","statements":[{"nativeSrc":"2030:35:23","nodeType":"YulVariableDeclaration","src":"2030:35:23","value":{"arguments":[{"name":"newLen","nativeSrc":"2049:6:23","nodeType":"YulIdentifier","src":"2049:6:23"},{"arguments":[{"kind":"number","nativeSrc":"2061:2:23","nodeType":"YulLiteral","src":"2061:2:23","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"2057:3:23","nodeType":"YulIdentifier","src":"2057:3:23"},"nativeSrc":"2057:7:23","nodeType":"YulFunctionCall","src":"2057:7:23"}],"functionName":{"name":"and","nativeSrc":"2045:3:23","nodeType":"YulIdentifier","src":"2045:3:23"},"nativeSrc":"2045:20:23","nodeType":"YulFunctionCall","src":"2045:20:23"},"variables":[{"name":"loopEnd","nativeSrc":"2034:7:23","nodeType":"YulTypedName","src":"2034:7:23","type":""}]},{"nativeSrc":"2078:49:23","nodeType":"YulVariableDeclaration","src":"2078:49:23","value":{"arguments":[{"name":"slot","nativeSrc":"2122:4:23","nodeType":"YulIdentifier","src":"2122:4:23"}],"functionName":{"name":"array_dataslot_string_storage","nativeSrc":"2092:29:23","nodeType":"YulIdentifier","src":"2092:29:23"},"nativeSrc":"2092:35:23","nodeType":"YulFunctionCall","src":"2092:35:23"},"variables":[{"name":"dstPtr","nativeSrc":"2082:6:23","nodeType":"YulTypedName","src":"2082:6:23","type":""}]},{"nativeSrc":"2140:10:23","nodeType":"YulVariableDeclaration","src":"2140:10:23","value":{"kind":"number","nativeSrc":"2149:1:23","nodeType":"YulLiteral","src":"2149:1:23","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"2144:1:23","nodeType":"YulTypedName","src":"2144:1:23","type":""}]},{"body":{"nativeSrc":"2227:172:23","nodeType":"YulBlock","src":"2227:172:23","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"2252:6:23","nodeType":"YulIdentifier","src":"2252:6:23"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"2270:3:23","nodeType":"YulIdentifier","src":"2270:3:23"},{"name":"srcOffset","nativeSrc":"2275:9:23","nodeType":"YulIdentifier","src":"2275:9:23"}],"functionName":{"name":"add","nativeSrc":"2266:3:23","nodeType":"YulIdentifier","src":"2266:3:23"},"nativeSrc":"2266:19:23","nodeType":"YulFunctionCall","src":"2266:19:23"}],"functionName":{"name":"mload","nativeSrc":"2260:5:23","nodeType":"YulIdentifier","src":"2260:5:23"},"nativeSrc":"2260:26:23","nodeType":"YulFunctionCall","src":"2260:26:23"}],"functionName":{"name":"sstore","nativeSrc":"2245:6:23","nodeType":"YulIdentifier","src":"2245:6:23"},"nativeSrc":"2245:42:23","nodeType":"YulFunctionCall","src":"2245:42:23"},"nativeSrc":"2245:42:23","nodeType":"YulExpressionStatement","src":"2245:42:23"},{"nativeSrc":"2304:24:23","nodeType":"YulAssignment","src":"2304:24:23","value":{"arguments":[{"name":"dstPtr","nativeSrc":"2318:6:23","nodeType":"YulIdentifier","src":"2318:6:23"},{"kind":"number","nativeSrc":"2326:1:23","nodeType":"YulLiteral","src":"2326:1:23","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"2314:3:23","nodeType":"YulIdentifier","src":"2314:3:23"},"nativeSrc":"2314:14:23","nodeType":"YulFunctionCall","src":"2314:14:23"},"variableNames":[{"name":"dstPtr","nativeSrc":"2304:6:23","nodeType":"YulIdentifier","src":"2304:6:23"}]},{"nativeSrc":"2345:40:23","nodeType":"YulAssignment","src":"2345:40:23","value":{"arguments":[{"name":"srcOffset","nativeSrc":"2362:9:23","nodeType":"YulIdentifier","src":"2362:9:23"},{"name":"srcOffset_1","nativeSrc":"2373:11:23","nodeType":"YulIdentifier","src":"2373:11:23"}],"functionName":{"name":"add","nativeSrc":"2358:3:23","nodeType":"YulIdentifier","src":"2358:3:23"},"nativeSrc":"2358:27:23","nodeType":"YulFunctionCall","src":"2358:27:23"},"variableNames":[{"name":"srcOffset","nativeSrc":"2345:9:23","nodeType":"YulIdentifier","src":"2345:9:23"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"2174:1:23","nodeType":"YulIdentifier","src":"2174:1:23"},{"name":"loopEnd","nativeSrc":"2177:7:23","nodeType":"YulIdentifier","src":"2177:7:23"}],"functionName":{"name":"lt","nativeSrc":"2171:2:23","nodeType":"YulIdentifier","src":"2171:2:23"},"nativeSrc":"2171:14:23","nodeType":"YulFunctionCall","src":"2171:14:23"},"nativeSrc":"2163:236:23","nodeType":"YulForLoop","post":{"nativeSrc":"2186:28:23","nodeType":"YulBlock","src":"2186:28:23","statements":[{"nativeSrc":"2188:24:23","nodeType":"YulAssignment","src":"2188:24:23","value":{"arguments":[{"name":"i","nativeSrc":"2197:1:23","nodeType":"YulIdentifier","src":"2197:1:23"},{"name":"srcOffset_1","nativeSrc":"2200:11:23","nodeType":"YulIdentifier","src":"2200:11:23"}],"functionName":{"name":"add","nativeSrc":"2193:3:23","nodeType":"YulIdentifier","src":"2193:3:23"},"nativeSrc":"2193:19:23","nodeType":"YulFunctionCall","src":"2193:19:23"},"variableNames":[{"name":"i","nativeSrc":"2188:1:23","nodeType":"YulIdentifier","src":"2188:1:23"}]}]},"pre":{"nativeSrc":"2167:3:23","nodeType":"YulBlock","src":"2167:3:23","statements":[]},"src":"2163:236:23"},{"body":{"nativeSrc":"2447:166:23","nodeType":"YulBlock","src":"2447:166:23","statements":[{"nativeSrc":"2465:43:23","nodeType":"YulVariableDeclaration","src":"2465:43:23","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"2492:3:23","nodeType":"YulIdentifier","src":"2492:3:23"},{"name":"srcOffset","nativeSrc":"2497:9:23","nodeType":"YulIdentifier","src":"2497:9:23"}],"functionName":{"name":"add","nativeSrc":"2488:3:23","nodeType":"YulIdentifier","src":"2488:3:23"},"nativeSrc":"2488:19:23","nodeType":"YulFunctionCall","src":"2488:19:23"}],"functionName":{"name":"mload","nativeSrc":"2482:5:23","nodeType":"YulIdentifier","src":"2482:5:23"},"nativeSrc":"2482:26:23","nodeType":"YulFunctionCall","src":"2482:26:23"},"variables":[{"name":"lastValue","nativeSrc":"2469:9:23","nodeType":"YulTypedName","src":"2469:9:23","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"2532:6:23","nodeType":"YulIdentifier","src":"2532:6:23"},{"arguments":[{"name":"lastValue","nativeSrc":"2544:9:23","nodeType":"YulIdentifier","src":"2544:9:23"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"2571:1:23","nodeType":"YulLiteral","src":"2571:1:23","type":"","value":"3"},{"name":"newLen","nativeSrc":"2574:6:23","nodeType":"YulIdentifier","src":"2574:6:23"}],"functionName":{"name":"shl","nativeSrc":"2567:3:23","nodeType":"YulIdentifier","src":"2567:3:23"},"nativeSrc":"2567:14:23","nodeType":"YulFunctionCall","src":"2567:14:23"},{"kind":"number","nativeSrc":"2583:3:23","nodeType":"YulLiteral","src":"2583:3:23","type":"","value":"248"}],"functionName":{"name":"and","nativeSrc":"2563:3:23","nodeType":"YulIdentifier","src":"2563:3:23"},"nativeSrc":"2563:24:23","nodeType":"YulFunctionCall","src":"2563:24:23"},{"arguments":[{"kind":"number","nativeSrc":"2593:1:23","nodeType":"YulLiteral","src":"2593:1:23","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"2589:3:23","nodeType":"YulIdentifier","src":"2589:3:23"},"nativeSrc":"2589:6:23","nodeType":"YulFunctionCall","src":"2589:6:23"}],"functionName":{"name":"shr","nativeSrc":"2559:3:23","nodeType":"YulIdentifier","src":"2559:3:23"},"nativeSrc":"2559:37:23","nodeType":"YulFunctionCall","src":"2559:37:23"}],"functionName":{"name":"not","nativeSrc":"2555:3:23","nodeType":"YulIdentifier","src":"2555:3:23"},"nativeSrc":"2555:42:23","nodeType":"YulFunctionCall","src":"2555:42:23"}],"functionName":{"name":"and","nativeSrc":"2540:3:23","nodeType":"YulIdentifier","src":"2540:3:23"},"nativeSrc":"2540:58:23","nodeType":"YulFunctionCall","src":"2540:58:23"}],"functionName":{"name":"sstore","nativeSrc":"2525:6:23","nodeType":"YulIdentifier","src":"2525:6:23"},"nativeSrc":"2525:74:23","nodeType":"YulFunctionCall","src":"2525:74:23"},"nativeSrc":"2525:74:23","nodeType":"YulExpressionStatement","src":"2525:74:23"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"2418:7:23","nodeType":"YulIdentifier","src":"2418:7:23"},{"name":"newLen","nativeSrc":"2427:6:23","nodeType":"YulIdentifier","src":"2427:6:23"}],"functionName":{"name":"lt","nativeSrc":"2415:2:23","nodeType":"YulIdentifier","src":"2415:2:23"},"nativeSrc":"2415:19:23","nodeType":"YulFunctionCall","src":"2415:19:23"},"nativeSrc":"2412:201:23","nodeType":"YulIf","src":"2412:201:23"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"2633:4:23","nodeType":"YulIdentifier","src":"2633:4:23"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"2647:1:23","nodeType":"YulLiteral","src":"2647:1:23","type":"","value":"1"},{"name":"newLen","nativeSrc":"2650:6:23","nodeType":"YulIdentifier","src":"2650:6:23"}],"functionName":{"name":"shl","nativeSrc":"2643:3:23","nodeType":"YulIdentifier","src":"2643:3:23"},"nativeSrc":"2643:14:23","nodeType":"YulFunctionCall","src":"2643:14:23"},{"kind":"number","nativeSrc":"2659:1:23","nodeType":"YulLiteral","src":"2659:1:23","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"2639:3:23","nodeType":"YulIdentifier","src":"2639:3:23"},"nativeSrc":"2639:22:23","nodeType":"YulFunctionCall","src":"2639:22:23"}],"functionName":{"name":"sstore","nativeSrc":"2626:6:23","nodeType":"YulIdentifier","src":"2626:6:23"},"nativeSrc":"2626:36:23","nodeType":"YulFunctionCall","src":"2626:36:23"},"nativeSrc":"2626:36:23","nodeType":"YulExpressionStatement","src":"2626:36:23"}]},"nativeSrc":"2009:663:23","nodeType":"YulCase","src":"2009:663:23","value":{"kind":"number","nativeSrc":"2014:1:23","nodeType":"YulLiteral","src":"2014:1:23","type":"","value":"1"}},{"body":{"nativeSrc":"2689:234:23","nodeType":"YulBlock","src":"2689:234:23","statements":[{"nativeSrc":"2703:14:23","nodeType":"YulVariableDeclaration","src":"2703:14:23","value":{"kind":"number","nativeSrc":"2716:1:23","nodeType":"YulLiteral","src":"2716:1:23","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"2707:5:23","nodeType":"YulTypedName","src":"2707:5:23","type":""}]},{"body":{"nativeSrc":"2752:67:23","nodeType":"YulBlock","src":"2752:67:23","statements":[{"nativeSrc":"2770:35:23","nodeType":"YulAssignment","src":"2770:35:23","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"2789:3:23","nodeType":"YulIdentifier","src":"2789:3:23"},{"name":"srcOffset","nativeSrc":"2794:9:23","nodeType":"YulIdentifier","src":"2794:9:23"}],"functionName":{"name":"add","nativeSrc":"2785:3:23","nodeType":"YulIdentifier","src":"2785:3:23"},"nativeSrc":"2785:19:23","nodeType":"YulFunctionCall","src":"2785:19:23"}],"functionName":{"name":"mload","nativeSrc":"2779:5:23","nodeType":"YulIdentifier","src":"2779:5:23"},"nativeSrc":"2779:26:23","nodeType":"YulFunctionCall","src":"2779:26:23"},"variableNames":[{"name":"value","nativeSrc":"2770:5:23","nodeType":"YulIdentifier","src":"2770:5:23"}]}]},"condition":{"name":"newLen","nativeSrc":"2733:6:23","nodeType":"YulIdentifier","src":"2733:6:23"},"nativeSrc":"2730:89:23","nodeType":"YulIf","src":"2730:89:23"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"2839:4:23","nodeType":"YulIdentifier","src":"2839:4:23"},{"arguments":[{"name":"value","nativeSrc":"2898:5:23","nodeType":"YulIdentifier","src":"2898:5:23"},{"name":"newLen","nativeSrc":"2905:6:23","nodeType":"YulIdentifier","src":"2905:6:23"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"2845:52:23","nodeType":"YulIdentifier","src":"2845:52:23"},"nativeSrc":"2845:67:23","nodeType":"YulFunctionCall","src":"2845:67:23"}],"functionName":{"name":"sstore","nativeSrc":"2832:6:23","nodeType":"YulIdentifier","src":"2832:6:23"},"nativeSrc":"2832:81:23","nodeType":"YulFunctionCall","src":"2832:81:23"},"nativeSrc":"2832:81:23","nodeType":"YulExpressionStatement","src":"2832:81:23"}]},"nativeSrc":"2681:242:23","nodeType":"YulCase","src":"2681:242:23","value":"default"}],"expression":{"arguments":[{"name":"newLen","nativeSrc":"1989:6:23","nodeType":"YulIdentifier","src":"1989:6:23"},{"kind":"number","nativeSrc":"1997:2:23","nodeType":"YulLiteral","src":"1997:2:23","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"1986:2:23","nodeType":"YulIdentifier","src":"1986:2:23"},"nativeSrc":"1986:14:23","nodeType":"YulFunctionCall","src":"1986:14:23"},"nativeSrc":"1979:944:23","nodeType":"YulSwitch","src":"1979:944:23"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nativeSrc":"1584:1345:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"1665:4:23","nodeType":"YulTypedName","src":"1665:4:23","type":""},{"name":"src","nativeSrc":"1671:3:23","nodeType":"YulTypedName","src":"1671:3:23","type":""}],"src":"1584:1345:23"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":23,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x1 PUSH1 0x4 SSTORE PUSH1 0xA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH20 0x4E4AF2A21EBF62850FD99EB6253E1EFBB56098CD OR SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0x4555524B PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE CALLER SWAP1 PUSH2 0x62 DUP2 PUSH2 0xAD JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x91 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9A DUP2 PUSH2 0xBD JUMP JUMPDEST POP PUSH1 0x3 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE PUSH2 0x26F JUMP JUMPDEST PUSH1 0x2 PUSH2 0xB9 DUP3 DUP3 PUSH2 0x1B0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x139 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x159 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x1AB JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x188 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1A7 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x194 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1C9 JUMPI PUSH2 0x1C9 PUSH2 0x10F JUMP JUMPDEST PUSH2 0x1DD DUP2 PUSH2 0x1D7 DUP5 SLOAD PUSH2 0x125 JUMP JUMPDEST DUP5 PUSH2 0x15F JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x212 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x1FA JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x1A7 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x241 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x222 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x25F JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x23D7 DUP1 PUSH2 0x27E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x157 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0xA8C5DC33 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xA8C5DC33 EQ PUSH2 0x364 JUMPI DUP1 PUSH4 0xC2A756CA EQ PUSH2 0x377 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x39D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3B0 JUMPI DUP1 PUSH4 0xF5298ACA EQ PUSH2 0x3C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2BD JUMPI DUP1 PUSH4 0x73FD653D EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x85235D3D EQ PUSH2 0x2D8 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2EB JUMPI DUP1 PUSH4 0x8F192180 EQ PUSH2 0x310 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x351 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4DD2FEBE GT PUSH2 0x115 JUMPI DUP1 PUSH4 0x4DD2FEBE EQ PUSH2 0x226 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x239 JUMPI DUP1 PUSH4 0x508F3A37 EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x285 JUMPI DUP1 PUSH4 0x68E2CEA8 EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0x6B20C454 EQ PUSH2 0x2AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x15C JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x8F3E371 EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x1CE JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x1EE JUMPI DUP1 PUSH4 0x36F58E5F EQ PUSH2 0x203 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16F PUSH2 0x16A CALLDATASIZE PUSH1 0x4 PUSH2 0x185B JUMP JUMPDEST PUSH2 0x3D6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x195 PUSH2 0x190 CALLDATASIZE PUSH1 0x4 PUSH2 0x189B JUMP JUMPDEST PUSH2 0x3FE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x179 JUMP JUMPDEST PUSH2 0x1B8 PUSH2 0x1B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x185B JUMP JUMPDEST PUSH2 0x44E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x179 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x191B JUMP JUMPDEST PUSH2 0x1E1 PUSH2 0x1DC CALLDATASIZE PUSH1 0x4 PUSH2 0x1990 JUMP JUMPDEST PUSH2 0x55A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x179 SWAP2 SWAP1 PUSH2 0x19A9 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x1FC CALLDATASIZE PUSH1 0x4 PUSH2 0x1B03 JUMP JUMPDEST PUSH2 0x5EE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x195 PUSH2 0x211 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BAC JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x234 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BDC JUMP JUMPDEST PUSH2 0x65A JUMP JUMPDEST PUSH2 0x24C PUSH2 0x247 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C36 JUMP JUMPDEST PUSH2 0x946 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x179 SWAP2 SWAP1 PUSH2 0x1D31 JUMP JUMPDEST PUSH2 0x195 PUSH2 0x267 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BAC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x195 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x2A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D44 JUMP JUMPDEST PUSH2 0xA12 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x2B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D97 JUMP JUMPDEST PUSH2 0xC90 JUMP JUMPDEST PUSH2 0x201 PUSH2 0xCF4 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x2D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BAC JUMP JUMPDEST PUSH2 0xD08 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x2E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BAC JUMP JUMPDEST PUSH2 0xD5C JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x179 JUMP JUMPDEST PUSH2 0x339 PUSH2 0x31E CALLDATASIZE PUSH1 0x4 PUSH2 0x1BAC JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x179 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x35F CALLDATASIZE PUSH1 0x4 PUSH2 0x1E0A JUMP JUMPDEST PUSH2 0xF4F JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x2F8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x1B8 PUSH2 0x385 CALLDATASIZE PUSH1 0x4 PUSH2 0x1990 JUMP JUMPDEST PUSH2 0xF5E JUMP JUMPDEST PUSH2 0x195 PUSH2 0x398 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E46 JUMP JUMPDEST PUSH2 0xFC5 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x3AB CALLDATASIZE PUSH1 0x4 PUSH2 0x1E79 JUMP JUMPDEST PUSH2 0xFF3 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x3BE CALLDATASIZE PUSH1 0x4 PUSH2 0x1BAC JUMP JUMPDEST PUSH2 0x1052 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x3D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EDD JUMP JUMPDEST PUSH2 0x1090 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x42F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ JUMPDEST DUP1 PUSH2 0x3F8 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x3F8 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x46A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0xA SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 DUP6 ADD SLOAD PUSH1 0x5 DUP7 ADD SLOAD PUSH1 0x6 DUP8 ADD SLOAD PUSH1 0x7 DUP9 ADD SLOAD PUSH1 0x8 DUP10 ADD SLOAD PUSH1 0x9 DUP11 ADD DUP1 SLOAD SWAP10 SWAP13 POP PUSH1 0xFF SWAP1 SWAP9 AND SWAP11 POP SWAP6 SWAP9 SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP2 SWAP5 SWAP1 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP2 PUSH2 0x4D7 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x503 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x550 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x525 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x550 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x533 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP11 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x569 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x595 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5E2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5B7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5E2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5C5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP2 EQ DUP1 ISZERO SWAP1 PUSH2 0x60F JUMPI POP PUSH2 0x60D DUP7 DUP3 PUSH2 0xFC5 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x645 JUMPI PUSH1 0x40 MLOAD PUSH4 0x711BEC91 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP8 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x652 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x10C6 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x682 JUMPI POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST PUSH2 0x6E2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206D757374206265206F776E6572206F72207665726966696564 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x103932B9B2B0B931B432B9 PUSH1 0xA9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x63C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SUB PUSH2 0x741 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526573656172636820646F6573206E6F74206578697374000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x63C JUMP JUMPDEST PUSH1 0x8 DUP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH1 0x1F SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x769 SWAP2 DUP8 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH1 0x20 ADD PUSH2 0x1F4A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE PUSH1 0x1 DUP1 DUP5 MSTORE DUP4 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP3 POP PUSH1 0x0 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x78C JUMPI SWAP1 POP POP PUSH1 0x8 DUP6 ADD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP2 SWAP3 POP ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7E0 JUMPI PUSH2 0x7E0 PUSH2 0x1F74 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x869 JUMPI PUSH2 0x869 PUSH2 0x18BF JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 ADD DUP7 SWAP1 MSTORE PUSH1 0x60 SWAP1 SWAP3 ADD DUP7 SWAP1 MSTORE PUSH1 0xA SLOAD SWAP2 MLOAD PUSH4 0xB82916CB PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SWAP4 POP SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xB82916CB SWAP1 PUSH2 0x8B7 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1FF8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8D6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8FA SWAP2 SWAP1 PUSH2 0x212B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND DUP2 MSTORE SWAP1 SWAP2 POP CALLER SWAP1 PUSH32 0x9C671A1530AF5D07EF953AFA0BDE839D600ABE110ED1178BBBECF03AD8DC611A SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x977 JUMPI DUP2 MLOAD DUP4 MLOAD PUSH1 0x40 MLOAD PUSH4 0x5B059991 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x63C JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x992 JUMPI PUSH2 0x992 PUSH2 0x19BC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x9BB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xA0A JUMPI PUSH1 0x20 DUP1 DUP3 MUL DUP7 ADD ADD MLOAD PUSH2 0x9E5 SWAP1 PUSH1 0x20 DUP1 DUP5 MUL DUP8 ADD ADD MLOAD PUSH2 0x3D6 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x9F7 JUMPI PUSH2 0x9F7 PUSH2 0x1F74 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x9C1 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x5F5E100 PUSH1 0x0 PUSH2 0xA23 DUP3 DUP7 PUSH2 0x215E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xA4E JUMPI PUSH2 0xA4E PUSH2 0x18BF JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 ADD DUP10 SWAP1 MSTORE PUSH1 0x60 DUP4 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP4 ADD DUP9 SWAP1 MSTORE PUSH1 0x0 PUSH1 0xA0 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 DUP5 ADD DUP2 SWAP1 MSTORE CALLER PUSH1 0xE0 DUP6 ADD DUP2 SWAP1 MSTORE PUSH2 0x100 SWAP1 SWAP5 ADD DUP13 SWAP1 MSTORE SWAP3 DUP4 MSTORE PUSH1 0x6 DUP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP4 SSTORE SWAP2 DUP5 MSTORE SWAP3 DUP3 SWAP1 KECCAK256 DUP5 MLOAD PUSH1 0xA SWAP1 SWAP5 MUL ADD SWAP3 DUP4 SSTORE SWAP1 DUP4 ADD MLOAD DUP3 DUP3 ADD DUP1 SLOAD SWAP5 SWAP6 POP DUP6 SWAP5 SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0xFF NOT AND SWAP1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xADC JUMPI PUSH2 0xADC PUSH2 0x18BF JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x3 DUP3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x4 DUP3 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x5 DUP3 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x6 DUP3 ADD SSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x7 DUP3 ADD SSTORE PUSH2 0x100 DUP3 ADD MLOAD PUSH1 0x8 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x120 DUP3 ADD MLOAD PUSH1 0x9 DUP3 ADD SWAP1 PUSH2 0xB59 SWAP1 DUP3 PUSH2 0x21C8 JUMP JUMPDEST POP POP PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP4 MLOAD DUP2 SSTORE SWAP1 DUP4 ADD MLOAD PUSH1 0x1 DUP1 DUP4 ADD DUP1 SLOAD DUP7 SWAP6 POP SWAP1 SWAP2 PUSH1 0xFF NOT SWAP1 SWAP2 AND SWAP1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xB9C JUMPI PUSH2 0xB9C PUSH2 0x18BF JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x3 DUP3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x4 DUP3 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x5 DUP3 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x6 DUP3 ADD SSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x7 DUP3 ADD SSTORE PUSH2 0x100 DUP3 ADD MLOAD PUSH1 0x8 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x120 DUP3 ADD MLOAD PUSH1 0x9 DUP3 ADD SWAP1 PUSH2 0xC19 SWAP1 DUP3 PUSH2 0x21C8 JUMP JUMPDEST POP POP PUSH1 0x4 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE CALLER PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0xA0F5EE5B57F0C2F7AC409633C1C78B5D7473845E4FA9F659B98B4392FFBCDEBA SWAP3 POP ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x4 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0xC67 DUP4 PUSH2 0x2287 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP1 MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xC86 DUP9 DUP3 PUSH2 0x21C8 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 0xCB0 JUMPI POP PUSH2 0xCAE DUP4 CALLER PUSH2 0xFC5 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0xCE4 JUMPI CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x711BEC91 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x63C JUMP JUMPDEST PUSH2 0xCEF DUP4 DUP4 DUP4 PUSH2 0x112D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xCFC PUSH2 0x1173 JUMP JUMPDEST PUSH2 0xD06 PUSH1 0x0 PUSH2 0x11A0 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xD10 PUSH2 0x1173 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0xF89EF2D5D537A2764CDC3D2319C0320FEB008480D7B24C76E4AC853C8BAC67E8 SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0xD64 PUSH2 0x1173 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x1E SWAP2 PUSH1 0x0 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xD7F JUMPI SWAP1 POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP3 POP ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xDCD JUMPI PUSH2 0xDCD PUSH2 0x1F74 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xE04 SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE PUSH2 0x140 DUP4 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 AND DUP4 MSTORE PUSH1 0x0 PUSH1 0x20 DUP5 ADD DUP2 SWAP1 MSTORE DUP4 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE ADDRESS PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0xE0 DUP5 ADD DUP2 SWAP1 MSTORE PUSH2 0x100 DUP5 ADD DUP7 SWAP1 MSTORE PUSH2 0x120 DUP5 ADD DUP3 SWAP1 MSTORE PUSH1 0xA SLOAD SWAP3 MLOAD PUSH4 0xB82916CB PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP5 POP SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xB82916CB SWAP1 PUSH2 0xE96 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1FF8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEB5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xED9 SWAP2 SWAP1 PUSH2 0x212B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE SWAP3 SWAP4 POP SWAP1 SWAP2 PUSH32 0x22C9AA052D4E34C225D60366B28389EE92CC16A9675CF0C73566587DB4AABCB8 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xF5A CALLER DUP4 DUP4 PUSH2 0x11F2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 DUP6 ADD SLOAD PUSH1 0x5 DUP7 ADD SLOAD PUSH1 0x6 DUP8 ADD SLOAD SWAP8 DUP8 ADD SLOAD PUSH1 0x8 DUP9 ADD SLOAD PUSH1 0x9 DUP10 ADD DUP1 SLOAD SWAP9 SWAP11 PUSH1 0xFF SWAP1 SWAP9 AND SWAP10 SWAP7 SWAP9 SWAP6 SWAP8 SWAP5 SWAP7 SWAP4 SWAP6 SWAP3 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 PUSH2 0x4D7 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP2 EQ DUP1 ISZERO SWAP1 PUSH2 0x1014 JUMPI POP PUSH2 0x1012 DUP7 DUP3 PUSH2 0xFC5 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1045 JUMPI PUSH1 0x40 MLOAD PUSH4 0x711BEC91 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP8 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x63C JUMP JUMPDEST PUSH2 0x652 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x1288 JUMP JUMPDEST PUSH2 0x105A PUSH2 0x1173 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1084 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x63C JUMP JUMPDEST PUSH2 0x108D DUP2 PUSH2 0x11A0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 0x10B0 JUMPI POP PUSH2 0x10AE DUP4 CALLER PUSH2 0xFC5 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x10BB JUMPI CALLER PUSH2 0xCB7 JUMP JUMPDEST PUSH2 0xCEF DUP4 DUP4 DUP4 PUSH2 0x1316 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x10F0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2BFA23E7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x63C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x1119 JUMPI PUSH1 0x40 MLOAD PUSH3 0x6A0D45 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x63C JUMP JUMPDEST PUSH2 0x1126 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x137A JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1156 JUMPI PUSH1 0x40 MLOAD PUSH3 0x6A0D45 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x63C JUMP JUMPDEST PUSH2 0xCEF DUP4 PUSH1 0x0 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x137A JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xD06 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x63C JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x121B JUMPI PUSH1 0x40 MLOAD PUSH3 0xCED3E1 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x63C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x12B2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2BFA23E7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x63C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x12DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x6A0D45 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x63C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP7 SWAP1 MSTORE DUP2 DUP4 ADD SWAP1 DUP2 MSTORE PUSH1 0x60 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH2 0x130D DUP8 DUP8 DUP5 DUP5 DUP8 PUSH2 0x137A JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x133F JUMPI PUSH1 0x40 MLOAD PUSH3 0x6A0D45 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x63C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP6 SWAP1 MSTORE DUP2 DUP4 ADD SWAP1 DUP2 MSTORE PUSH1 0x60 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 PUSH1 0x80 DUP3 ADD DUP2 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH2 0x1126 SWAP2 DUP8 SWAP2 DUP6 SWAP1 DUP6 SWAP1 JUMPDEST PUSH2 0x1386 DUP6 DUP6 DUP6 DUP6 PUSH2 0x13CD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1126 JUMPI DUP3 MLOAD CALLER SWAP1 PUSH1 0x1 SUB PUSH2 0x13BF JUMPI PUSH1 0x20 DUP5 DUP2 ADD MLOAD SWAP1 DUP5 ADD MLOAD PUSH2 0x13B8 DUP4 DUP10 DUP10 DUP6 DUP6 DUP10 PUSH2 0x13DF JUMP JUMPDEST POP POP PUSH2 0x652 JUMP JUMPDEST PUSH2 0x652 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1503 JUMP JUMPDEST PUSH2 0x13D9 DUP5 DUP5 DUP5 DUP5 PUSH2 0x15EC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x652 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0x1423 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x22A0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x145E JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x145B SWAP2 DUP2 ADD SWAP1 PUSH2 0x22E5 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x14C7 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x148C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1491 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x14BF JUMPI PUSH1 0x40 MLOAD PUSH4 0x2BFA23E7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x63C JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH2 0x130D JUMPI PUSH1 0x40 MLOAD PUSH4 0x2BFA23E7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x63C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x652 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0x1547 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2302 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1582 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x157F SWAP2 DUP2 ADD SWAP1 PUSH2 0x22E5 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x15B0 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x148C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1491 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xBC197C81 PUSH1 0xE0 SHL EQ PUSH2 0x130D JUMPI PUSH1 0x40 MLOAD PUSH4 0x2BFA23E7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x63C JUMP JUMPDEST PUSH2 0x15F4 PUSH2 0x1600 JUMP JUMPDEST PUSH2 0x13D9 DUP5 DUP5 DUP5 DUP5 PUSH2 0x162B JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xD06 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP3 MLOAD EQ PUSH2 0x165A JUMPI DUP2 MLOAD DUP2 MLOAD PUSH1 0x40 MLOAD PUSH4 0x5B059991 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x63C JUMP JUMPDEST CALLER PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x1760 JUMPI PUSH1 0x20 DUP2 DUP2 MUL DUP6 DUP2 ADD DUP3 ADD MLOAD SWAP1 DUP6 ADD SWAP1 SWAP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND ISZERO PUSH2 0x1711 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x16EA JUMPI PUSH1 0x40 MLOAD PUSH4 0x3DEE4C5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x84 ADD PUSH2 0x63C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND ISZERO PUSH2 0x1756 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x1750 SWAP1 DUP5 SWAP1 PUSH2 0x2360 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x165E JUMP JUMPDEST POP DUP3 MLOAD PUSH1 0x1 SUB PUSH2 0x17E1 JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x0 SWAP1 PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP2 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x17D2 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP PUSH2 0x1126 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x1830 SWAP3 SWAP2 SWAP1 PUSH2 0x2373 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1856 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x186E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1877 DUP4 PUSH2 0x183F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x108D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x18B8 DUP2 PUSH2 0x1885 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x18FB JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x18DF JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x140 DUP13 DUP4 MSTORE PUSH1 0x3 DUP13 LT PUSH2 0x1933 JUMPI PUSH2 0x1933 PUSH2 0x18BF JUMP JUMPDEST DUP12 PUSH1 0x20 DUP5 ADD MSTORE DUP11 PUSH1 0x40 DUP5 ADD MSTORE DUP10 PUSH1 0x60 DUP5 ADD MSTORE DUP9 PUSH1 0x80 DUP5 ADD MSTORE DUP8 PUSH1 0xA0 DUP5 ADD MSTORE DUP7 PUSH1 0xC0 DUP5 ADD MSTORE DUP6 PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x100 DUP5 ADD MSTORE DUP1 PUSH2 0x120 DUP5 ADD MSTORE PUSH2 0x197F DUP2 DUP5 ADD DUP6 PUSH2 0x18D5 JUMP JUMPDEST SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x18B8 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x18D5 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x19FA JUMPI PUSH2 0x19FA PUSH2 0x19BC JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x1A1B JUMPI PUSH2 0x1A1B PUSH2 0x19BC JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x1A4B PUSH2 0x1A46 DUP4 PUSH2 0x1A02 JUMP JUMPDEST PUSH2 0x19D2 JUMP JUMPDEST DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP5 PUSH1 0x5 SHL DUP8 ADD ADD SWAP4 POP DUP7 DUP5 GT ISZERO PUSH2 0x1A6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1A89 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x1A72 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1AA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1ABE JUMPI PUSH2 0x1ABE PUSH2 0x19BC JUMP JUMPDEST PUSH2 0x1AD1 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x19D2 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1AE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1B1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B24 DUP7 PUSH2 0x183F JUMP JUMPDEST SWAP5 POP PUSH2 0x1B32 PUSH1 0x20 DUP8 ADD PUSH2 0x183F JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1B4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B5A DUP10 DUP4 DUP11 ADD PUSH2 0x1A25 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1B70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B7C DUP10 DUP4 DUP11 ADD PUSH2 0x1A25 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1B92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B9F DUP9 DUP3 DUP10 ADD PUSH2 0x1A94 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18B8 DUP3 PUSH2 0x183F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x108D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1BF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1C0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C1A DUP7 DUP3 DUP8 ADD PUSH2 0x1A94 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x1C2B DUP2 PUSH2 0x1BC7 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1C60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1C74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x1C84 PUSH2 0x1A46 DUP4 PUSH2 0x1A02 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP10 DUP5 GT ISZERO PUSH2 0x1CA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x1CC8 JUMPI PUSH2 0x1CB9 DUP7 PUSH2 0x183F JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0x1CA8 JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0x1CDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CEB DUP6 DUP3 DUP7 ADD PUSH2 0x1A25 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1D26 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1D0A JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x18B8 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1CF5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1D5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1D70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D7C DUP8 DUP3 DUP9 ADD PUSH2 0x1A94 JUMP JUMPDEST SWAP8 PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP8 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP7 PUSH1 0x60 ADD CALLDATALOAD SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1DAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1DB5 DUP5 PUSH2 0x183F JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1DD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1DDD DUP8 DUP4 DUP9 ADD PUSH2 0x1A25 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1DF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E00 DUP7 DUP3 DUP8 ADD PUSH2 0x1A25 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E26 DUP4 PUSH2 0x183F JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1E3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E62 DUP4 PUSH2 0x183F JUMP JUMPDEST SWAP2 POP PUSH2 0x1E70 PUSH1 0x20 DUP5 ADD PUSH2 0x183F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1E91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E9A DUP7 PUSH2 0x183F JUMP JUMPDEST SWAP5 POP PUSH2 0x1EA8 PUSH1 0x20 DUP8 ADD PUSH2 0x183F JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1ED1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B9F DUP9 DUP3 DUP10 ADD PUSH2 0x1A94 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1EF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EFB DUP5 PUSH2 0x183F JUMP JUMPDEST SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 SWAP1 SWAP5 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1F24 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1F44 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1F5D PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x18D5 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x1F9A JUMPI PUSH2 0x1F9A PUSH2 0x18BF JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MLOAD DUP1 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP6 POP PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD PUSH1 0x20 DUP7 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1FEB JUMPI PUSH1 0x1F NOT DUP7 DUP5 SUB ADD DUP10 MSTORE PUSH2 0x1FD9 DUP4 DUP4 MLOAD PUSH2 0x18D5 JUMP JUMPDEST SWAP9 DUP5 ADD SWAP9 SWAP3 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1FBD JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH2 0x2012 PUSH1 0x80 DUP3 ADD DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x202E PUSH1 0xA0 DUP5 ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD AND PUSH1 0xE0 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x100 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP6 ADD MLOAD SWAP2 POP PUSH2 0x120 PUSH2 0x2086 DUP2 DUP7 ADD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xC0 DUP7 ADD MLOAD SWAP3 POP PUSH2 0x140 PUSH2 0x209C DUP2 DUP8 ADD DUP6 PUSH2 0x1F8A JUMP JUMPDEST PUSH1 0xE0 DUP8 ADD MLOAD ISZERO ISZERO PUSH2 0x160 DUP8 ADD MSTORE DUP3 DUP8 ADD MLOAD PUSH2 0x180 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 POP PUSH2 0x20C6 PUSH2 0x1C0 DUP7 ADD DUP5 PUSH2 0x1F9E JUMP JUMPDEST SWAP1 DUP7 ADD MLOAD DUP6 DUP3 SUB PUSH1 0x7F NOT ADD PUSH2 0x1A0 DUP8 ADD MSTORE SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x20E6 DUP3 DUP3 PUSH2 0x18D5 JUMP JUMPDEST SWAP2 POP POP DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x20FF DUP2 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 POP PUSH1 0x20 DUP2 ADD DUP4 DUP2 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x213D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x18B8 DUP2 PUSH2 0x1BC7 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x217B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0xCEF JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x21A9 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x652 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x21B5 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x21E1 JUMPI PUSH2 0x21E1 PUSH2 0x19BC JUMP JUMPDEST PUSH2 0x21F5 DUP2 PUSH2 0x21EF DUP5 SLOAD PUSH2 0x1F10 JUMP JUMPDEST DUP5 PUSH2 0x2180 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x222A JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2212 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x652 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2259 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x223A JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x2277 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2299 JUMPI PUSH2 0x2299 PUSH2 0x2148 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x22DA SWAP1 DUP4 ADD DUP5 PUSH2 0x18D5 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x22F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x18B8 DUP2 PUSH2 0x1885 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x232E SWAP1 DUP4 ADD DUP7 PUSH2 0x1CF5 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x2340 DUP2 DUP7 PUSH2 0x1CF5 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x2354 DUP2 DUP6 PUSH2 0x18D5 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x3F8 JUMPI PUSH2 0x3F8 PUSH2 0x2148 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2386 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1CF5 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2398 DUP2 DUP6 PUSH2 0x1CF5 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NUMBER 0xE MLOAD PUSH20 0x5C42A32B571376D5E1ED325DD22177AFCEA0EEE7 PC PC 0xC0 0xD2 DUP13 0xE0 PC 0xCE PUSH5 0x736F6C6343 STOP ADDMOD NOT STOP CALLER ","sourceMap":"559:8689:22:-:0;;;870:1;837:34;;1696:71;;;-1:-1:-1;;;;;;1696:71:22;1724:42;1696:71;;;1806:52;;;;;;;;;-1:-1:-1;1251:62:8;;;;;;;;;;;;-1:-1:-1;;;1251:62:8;;;;1844:10:22;;1293:13:8;1251:62;1293:7;:13::i;:::-;-1:-1:-1;;;;;;1273:26:6;;1269:95;;1322:31;;-1:-1:-1;;;1322:31:6;;1350:1;1322:31;;;160:51:23;133:18;;1322:31:6;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;-1:-1:-1;1231:7:17;:15;;-1:-1:-1;;;;1231:15:17;;;559:8689:22;;10282:86:8;10348:4;:13;10355:6;10348:4;:13;:::i;:::-;;10282:86;:::o;2912:187:6:-;3004:6;;;-1:-1:-1;;;;;3020:17:6;;;-1:-1:-1;;;;;;3020:17:6;;;;;;;3052:40;;3004:6;;;3020:17;3004:6;;3052:40;;2985:16;;3052:40;2975:124;2912:187;:::o;222:127:23:-;283:10;278:3;274:20;271:1;264:31;314:4;311:1;304:15;338:4;335:1;328:15;354:380;433:1;429:12;;;;476;;;497:61;;551:4;543:6;539:17;529:27;;497:61;604:2;596:6;593:14;573:18;570:38;567:161;;650:10;645:3;641:20;638:1;631:31;685:4;682:1;675:15;713:4;710:1;703:15;567:161;;354:380;;;:::o;865:543::-;967:2;962:3;959:11;956:446;;;1003:1;1027:5;1024:1;1017:16;1071:4;1068:1;1058:18;1141:2;1129:10;1125:19;1122:1;1118:27;1112:4;1108:38;1177:4;1165:10;1162:20;1159:47;;;-1:-1:-1;1200:4:23;1159:47;1255:2;1250:3;1246:12;1243:1;1239:20;1233:4;1229:31;1219:41;;1310:82;1328:2;1321:5;1318:13;1310:82;;;1373:17;;;1354:1;1343:13;1310:82;;;1314:3;;;956:446;865:543;;;:::o;1584:1345::-;1704:10;;-1:-1:-1;;;;;1726:30:23;;1723:56;;;1759:18;;:::i;:::-;1788:97;1878:6;1838:38;1870:4;1864:11;1838:38;:::i;:::-;1832:4;1788:97;:::i;:::-;1940:4;;1997:2;1986:14;;2014:1;2009:663;;;;2716:1;2733:6;2730:89;;;-1:-1:-1;2785:19:23;;;2779:26;2730:89;-1:-1:-1;;1541:1:23;1537:11;;;1533:24;1529:29;1519:40;1565:1;1561:11;;;1516:57;2832:81;;1979:944;;2009:663;812:1;805:14;;;849:4;836:18;;-1:-1:-1;;2045:20:23;;;2163:236;2177:7;2174:1;2171:14;2163:236;;;2266:19;;;2260:26;2245:42;;2358:27;;;;2326:1;2314:14;;;;2193:19;;2163:236;;;2167:3;2427:6;2418:7;2415:19;2412:201;;;2488:19;;;2482:26;-1:-1:-1;;2571:1:23;2567:14;;;2583:3;2563:24;2559:37;2555:42;2540:58;2525:74;;2412:201;-1:-1:-1;;;;;2659:1:23;2643:14;;;2639:22;2626:36;;-1:-1:-1;1584:1345:23:o;:::-;559:8689:22;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_asSingletonArrays_1965":{"entryPoint":null,"id":1965,"parameterSlots":2,"returnSlots":2},"@_burnBatch_1771":{"entryPoint":4397,"id":1771,"parameterSlots":3,"returnSlots":0},"@_burn_1732":{"entryPoint":4886,"id":1732,"parameterSlots":3,"returnSlots":0},"@_checkOwner_715":{"entryPoint":4467,"id":715,"parameterSlots":0,"returnSlots":0},"@_doSafeBatchTransferAcceptanceCheck_1949":{"entryPoint":5379,"id":1949,"parameterSlots":6,"returnSlots":0},"@_doSafeTransferAcceptanceCheck_1879":{"entryPoint":5087,"id":1879,"parameterSlots":6,"returnSlots":0},"@_msgSender_2539":{"entryPoint":null,"id":2539,"parameterSlots":0,"returnSlots":1},"@_requireNotPaused_2628":{"entryPoint":5632,"id":2628,"parameterSlots":0,"returnSlots":0},"@_safeBatchTransferFrom_1578":{"entryPoint":4294,"id":1578,"parameterSlots":5,"returnSlots":0},"@_safeTransferFrom_1523":{"entryPoint":4744,"id":1523,"parameterSlots":5,"returnSlots":0},"@_setApprovalForAll_1811":{"entryPoint":4594,"id":1811,"parameterSlots":3,"returnSlots":0},"@_transferOwnership_777":{"entryPoint":4512,"id":777,"parameterSlots":1,"returnSlots":0},"@_updateWithAcceptanceCheck_1457":{"entryPoint":4986,"id":1457,"parameterSlots":5,"returnSlots":0},"@_update_1381":{"entryPoint":5675,"id":1381,"parameterSlots":4,"returnSlots":0},"@_update_2249":{"entryPoint":5612,"id":2249,"parameterSlots":4,"returnSlots":0},"@_update_4312":{"entryPoint":5069,"id":4312,"parameterSlots":4,"returnSlots":0},"@attestResearchAuthor_4286":{"entryPoint":1626,"id":4286,"parameterSlots":3,"returnSlots":0},"@attestResearcherVerification_4177":{"entryPoint":3420,"id":4177,"parameterSlots":1,"returnSlots":0},"@balanceOfBatch_1105":{"entryPoint":2374,"id":1105,"parameterSlots":2,"returnSlots":1},"@balanceOf_1035":{"entryPoint":982,"id":1035,"parameterSlots":2,"returnSlots":1},"@burnBatch_2210":{"entryPoint":3216,"id":2210,"parameterSlots":3,"returnSlots":0},"@burn_2173":{"entryPoint":4240,"id":2173,"parameterSlots":3,"returnSlots":0},"@createResearch_4066":{"entryPoint":2578,"id":4066,"parameterSlots":4,"returnSlots":0},"@isApprovedForAll_1138":{"entryPoint":4037,"id":1138,"parameterSlots":2,"returnSlots":1},"@isVerifiedResearcher_4078":{"entryPoint":null,"id":4078,"parameterSlots":1,"returnSlots":1},"@owner_698":{"entryPoint":null,"id":698,"parameterSlots":0,"returnSlots":1},"@paused_2616":{"entryPoint":null,"id":2616,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_729":{"entryPoint":3316,"id":729,"parameterSlots":0,"returnSlots":0},"@researchById_3949":{"entryPoint":3934,"id":3949,"parameterSlots":0,"returnSlots":0},"@researchRequest_3944":{"entryPoint":1102,"id":3944,"parameterSlots":0,"returnSlots":0},"@researcherVerificationAttestations_3957":{"entryPoint":null,"id":3957,"parameterSlots":0,"returnSlots":0},"@safeBatchTransferFrom_1228":{"entryPoint":1518,"id":1228,"parameterSlots":5,"returnSlots":0},"@safeTransferFrom_1182":{"entryPoint":4083,"id":1182,"parameterSlots":5,"returnSlots":0},"@setApprovalForAll_1121":{"entryPoint":3919,"id":1121,"parameterSlots":2,"returnSlots":0},"@spInstance_3963":{"entryPoint":null,"id":3963,"parameterSlots":0,"returnSlots":0},"@supportsInterface_1007":{"entryPoint":1022,"id":1007,"parameterSlots":1,"returnSlots":1},"@supportsInterface_2807":{"entryPoint":null,"id":2807,"parameterSlots":1,"returnSlots":1},"@transferOwnership_757":{"entryPoint":4178,"id":757,"parameterSlots":1,"returnSlots":0},"@unsafeMemoryAccess_2513":{"entryPoint":null,"id":2513,"parameterSlots":2,"returnSlots":1},"@unsafeMemoryAccess_2526":{"entryPoint":null,"id":2526,"parameterSlots":2,"returnSlots":1},"@uri_1018":{"entryPoint":1370,"id":1018,"parameterSlots":1,"returnSlots":1},"@verifiedResearchers_3938":{"entryPoint":null,"id":3938,"parameterSlots":0,"returnSlots":0},"@verifyResearcher_4096":{"entryPoint":3336,"id":4096,"parameterSlots":1,"returnSlots":0},"abi_decode_address":{"entryPoint":6207,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn":{"entryPoint":6693,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":6804,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":7084,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":7750,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr":{"entryPoint":6915,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr":{"entryPoint":7801,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":7575,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_bool":{"entryPoint":7690,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":6235,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256t_uint256":{"entryPoint":7901,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":7222,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":6299,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":8933,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_uint256t_uint256t_uint256":{"entryPoint":7492,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_uint256":{"entryPoint":6544,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_string_memory_ptrt_uint64":{"entryPoint":7132,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint64_fromMemory":{"entryPoint":8491,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_array_bytes_dyn":{"entryPoint":8094,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn":{"entryPoint":7413,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bool":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_enum_DataLocation":{"entryPoint":8074,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_string":{"entryPoint":6357,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":8962,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":8864,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_bool__to_t_address_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":7473,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":9075,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_ISP_$495__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6569,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_address__to_t_string_memory_ptr_t_address__fromStack_reversed":{"entryPoint":8010,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_stringliteral_48567b562a28c744dba76ce6943cf1c17ec4b60da09661342613b80a5b797077__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_bfa583a8d2598f5edd72edfde6db9a2b6010ae7161d27686b20babdb1d529b4f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_Attestation_$592_memory_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_struct$_Attestation_$592_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":8184,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_enum$_ResearchState_$3912_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_address_t_string_memory_ptr__to_t_uint256_t_uint8_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_address_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6427,"id":null,"parameterSlots":11,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_uint64":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"allocate_memory":{"entryPoint":6610,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":6658,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_string":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":9056,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":8542,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":8576,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":8648,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":7952,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":8839,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":8520,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":6335,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":8052,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6588,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":6277,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_uint64":{"entryPoint":7111,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:23777:23","nodeType":"YulBlock","src":"0:23777:23","statements":[{"nativeSrc":"6:3:23","nodeType":"YulBlock","src":"6:3:23","statements":[]},{"body":{"nativeSrc":"63:124:23","nodeType":"YulBlock","src":"63:124:23","statements":[{"nativeSrc":"73:29:23","nodeType":"YulAssignment","src":"73:29:23","value":{"arguments":[{"name":"offset","nativeSrc":"95:6:23","nodeType":"YulIdentifier","src":"95:6:23"}],"functionName":{"name":"calldataload","nativeSrc":"82:12:23","nodeType":"YulIdentifier","src":"82:12:23"},"nativeSrc":"82:20:23","nodeType":"YulFunctionCall","src":"82:20:23"},"variableNames":[{"name":"value","nativeSrc":"73:5:23","nodeType":"YulIdentifier","src":"73:5:23"}]},{"body":{"nativeSrc":"165:16:23","nodeType":"YulBlock","src":"165:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"174:1:23","nodeType":"YulLiteral","src":"174:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"177:1:23","nodeType":"YulLiteral","src":"177:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"167:6:23","nodeType":"YulIdentifier","src":"167:6:23"},"nativeSrc":"167:12:23","nodeType":"YulFunctionCall","src":"167:12:23"},"nativeSrc":"167:12:23","nodeType":"YulExpressionStatement","src":"167:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"124:5:23","nodeType":"YulIdentifier","src":"124:5:23"},{"arguments":[{"name":"value","nativeSrc":"135:5:23","nodeType":"YulIdentifier","src":"135:5:23"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"150:3:23","nodeType":"YulLiteral","src":"150:3:23","type":"","value":"160"},{"kind":"number","nativeSrc":"155:1:23","nodeType":"YulLiteral","src":"155:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"146:3:23","nodeType":"YulIdentifier","src":"146:3:23"},"nativeSrc":"146:11:23","nodeType":"YulFunctionCall","src":"146:11:23"},{"kind":"number","nativeSrc":"159:1:23","nodeType":"YulLiteral","src":"159:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"142:3:23","nodeType":"YulIdentifier","src":"142:3:23"},"nativeSrc":"142:19:23","nodeType":"YulFunctionCall","src":"142:19:23"}],"functionName":{"name":"and","nativeSrc":"131:3:23","nodeType":"YulIdentifier","src":"131:3:23"},"nativeSrc":"131:31:23","nodeType":"YulFunctionCall","src":"131:31:23"}],"functionName":{"name":"eq","nativeSrc":"121:2:23","nodeType":"YulIdentifier","src":"121:2:23"},"nativeSrc":"121:42:23","nodeType":"YulFunctionCall","src":"121:42:23"}],"functionName":{"name":"iszero","nativeSrc":"114:6:23","nodeType":"YulIdentifier","src":"114:6:23"},"nativeSrc":"114:50:23","nodeType":"YulFunctionCall","src":"114:50:23"},"nativeSrc":"111:70:23","nodeType":"YulIf","src":"111:70:23"}]},"name":"abi_decode_address","nativeSrc":"14:173:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"42:6:23","nodeType":"YulTypedName","src":"42:6:23","type":""}],"returnVariables":[{"name":"value","nativeSrc":"53:5:23","nodeType":"YulTypedName","src":"53:5:23","type":""}],"src":"14:173:23"},{"body":{"nativeSrc":"279:167:23","nodeType":"YulBlock","src":"279:167:23","statements":[{"body":{"nativeSrc":"325:16:23","nodeType":"YulBlock","src":"325:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"334:1:23","nodeType":"YulLiteral","src":"334:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"337:1:23","nodeType":"YulLiteral","src":"337:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"327:6:23","nodeType":"YulIdentifier","src":"327:6:23"},"nativeSrc":"327:12:23","nodeType":"YulFunctionCall","src":"327:12:23"},"nativeSrc":"327:12:23","nodeType":"YulExpressionStatement","src":"327:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"300:7:23","nodeType":"YulIdentifier","src":"300:7:23"},{"name":"headStart","nativeSrc":"309:9:23","nodeType":"YulIdentifier","src":"309:9:23"}],"functionName":{"name":"sub","nativeSrc":"296:3:23","nodeType":"YulIdentifier","src":"296:3:23"},"nativeSrc":"296:23:23","nodeType":"YulFunctionCall","src":"296:23:23"},{"kind":"number","nativeSrc":"321:2:23","nodeType":"YulLiteral","src":"321:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"292:3:23","nodeType":"YulIdentifier","src":"292:3:23"},"nativeSrc":"292:32:23","nodeType":"YulFunctionCall","src":"292:32:23"},"nativeSrc":"289:52:23","nodeType":"YulIf","src":"289:52:23"},{"nativeSrc":"350:39:23","nodeType":"YulAssignment","src":"350:39:23","value":{"arguments":[{"name":"headStart","nativeSrc":"379:9:23","nodeType":"YulIdentifier","src":"379:9:23"}],"functionName":{"name":"abi_decode_address","nativeSrc":"360:18:23","nodeType":"YulIdentifier","src":"360:18:23"},"nativeSrc":"360:29:23","nodeType":"YulFunctionCall","src":"360:29:23"},"variableNames":[{"name":"value0","nativeSrc":"350:6:23","nodeType":"YulIdentifier","src":"350:6:23"}]},{"nativeSrc":"398:42:23","nodeType":"YulAssignment","src":"398:42:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"425:9:23","nodeType":"YulIdentifier","src":"425:9:23"},{"kind":"number","nativeSrc":"436:2:23","nodeType":"YulLiteral","src":"436:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"421:3:23","nodeType":"YulIdentifier","src":"421:3:23"},"nativeSrc":"421:18:23","nodeType":"YulFunctionCall","src":"421:18:23"}],"functionName":{"name":"calldataload","nativeSrc":"408:12:23","nodeType":"YulIdentifier","src":"408:12:23"},"nativeSrc":"408:32:23","nodeType":"YulFunctionCall","src":"408:32:23"},"variableNames":[{"name":"value1","nativeSrc":"398:6:23","nodeType":"YulIdentifier","src":"398:6:23"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nativeSrc":"192:254:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"237:9:23","nodeType":"YulTypedName","src":"237:9:23","type":""},{"name":"dataEnd","nativeSrc":"248:7:23","nodeType":"YulTypedName","src":"248:7:23","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"260:6:23","nodeType":"YulTypedName","src":"260:6:23","type":""},{"name":"value1","nativeSrc":"268:6:23","nodeType":"YulTypedName","src":"268:6:23","type":""}],"src":"192:254:23"},{"body":{"nativeSrc":"552:76:23","nodeType":"YulBlock","src":"552:76:23","statements":[{"nativeSrc":"562:26:23","nodeType":"YulAssignment","src":"562:26:23","value":{"arguments":[{"name":"headStart","nativeSrc":"574:9:23","nodeType":"YulIdentifier","src":"574:9:23"},{"kind":"number","nativeSrc":"585:2:23","nodeType":"YulLiteral","src":"585:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"570:3:23","nodeType":"YulIdentifier","src":"570:3:23"},"nativeSrc":"570:18:23","nodeType":"YulFunctionCall","src":"570:18:23"},"variableNames":[{"name":"tail","nativeSrc":"562:4:23","nodeType":"YulIdentifier","src":"562:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"604:9:23","nodeType":"YulIdentifier","src":"604:9:23"},{"name":"value0","nativeSrc":"615:6:23","nodeType":"YulIdentifier","src":"615:6:23"}],"functionName":{"name":"mstore","nativeSrc":"597:6:23","nodeType":"YulIdentifier","src":"597:6:23"},"nativeSrc":"597:25:23","nodeType":"YulFunctionCall","src":"597:25:23"},"nativeSrc":"597:25:23","nodeType":"YulExpressionStatement","src":"597:25:23"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"451:177:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"521:9:23","nodeType":"YulTypedName","src":"521:9:23","type":""},{"name":"value0","nativeSrc":"532:6:23","nodeType":"YulTypedName","src":"532:6:23","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"543:4:23","nodeType":"YulTypedName","src":"543:4:23","type":""}],"src":"451:177:23"},{"body":{"nativeSrc":"677:87:23","nodeType":"YulBlock","src":"677:87:23","statements":[{"body":{"nativeSrc":"742:16:23","nodeType":"YulBlock","src":"742:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"751:1:23","nodeType":"YulLiteral","src":"751:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"754:1:23","nodeType":"YulLiteral","src":"754:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"744:6:23","nodeType":"YulIdentifier","src":"744:6:23"},"nativeSrc":"744:12:23","nodeType":"YulFunctionCall","src":"744:12:23"},"nativeSrc":"744:12:23","nodeType":"YulExpressionStatement","src":"744:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"700:5:23","nodeType":"YulIdentifier","src":"700:5:23"},{"arguments":[{"name":"value","nativeSrc":"711:5:23","nodeType":"YulIdentifier","src":"711:5:23"},{"arguments":[{"kind":"number","nativeSrc":"722:3:23","nodeType":"YulLiteral","src":"722:3:23","type":"","value":"224"},{"kind":"number","nativeSrc":"727:10:23","nodeType":"YulLiteral","src":"727:10:23","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nativeSrc":"718:3:23","nodeType":"YulIdentifier","src":"718:3:23"},"nativeSrc":"718:20:23","nodeType":"YulFunctionCall","src":"718:20:23"}],"functionName":{"name":"and","nativeSrc":"707:3:23","nodeType":"YulIdentifier","src":"707:3:23"},"nativeSrc":"707:32:23","nodeType":"YulFunctionCall","src":"707:32:23"}],"functionName":{"name":"eq","nativeSrc":"697:2:23","nodeType":"YulIdentifier","src":"697:2:23"},"nativeSrc":"697:43:23","nodeType":"YulFunctionCall","src":"697:43:23"}],"functionName":{"name":"iszero","nativeSrc":"690:6:23","nodeType":"YulIdentifier","src":"690:6:23"},"nativeSrc":"690:51:23","nodeType":"YulFunctionCall","src":"690:51:23"},"nativeSrc":"687:71:23","nodeType":"YulIf","src":"687:71:23"}]},"name":"validator_revert_bytes4","nativeSrc":"633:131:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"666:5:23","nodeType":"YulTypedName","src":"666:5:23","type":""}],"src":"633:131:23"},{"body":{"nativeSrc":"838:176:23","nodeType":"YulBlock","src":"838:176:23","statements":[{"body":{"nativeSrc":"884:16:23","nodeType":"YulBlock","src":"884:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"893:1:23","nodeType":"YulLiteral","src":"893:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"896:1:23","nodeType":"YulLiteral","src":"896:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"886:6:23","nodeType":"YulIdentifier","src":"886:6:23"},"nativeSrc":"886:12:23","nodeType":"YulFunctionCall","src":"886:12:23"},"nativeSrc":"886:12:23","nodeType":"YulExpressionStatement","src":"886:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"859:7:23","nodeType":"YulIdentifier","src":"859:7:23"},{"name":"headStart","nativeSrc":"868:9:23","nodeType":"YulIdentifier","src":"868:9:23"}],"functionName":{"name":"sub","nativeSrc":"855:3:23","nodeType":"YulIdentifier","src":"855:3:23"},"nativeSrc":"855:23:23","nodeType":"YulFunctionCall","src":"855:23:23"},{"kind":"number","nativeSrc":"880:2:23","nodeType":"YulLiteral","src":"880:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"851:3:23","nodeType":"YulIdentifier","src":"851:3:23"},"nativeSrc":"851:32:23","nodeType":"YulFunctionCall","src":"851:32:23"},"nativeSrc":"848:52:23","nodeType":"YulIf","src":"848:52:23"},{"nativeSrc":"909:36:23","nodeType":"YulVariableDeclaration","src":"909:36:23","value":{"arguments":[{"name":"headStart","nativeSrc":"935:9:23","nodeType":"YulIdentifier","src":"935:9:23"}],"functionName":{"name":"calldataload","nativeSrc":"922:12:23","nodeType":"YulIdentifier","src":"922:12:23"},"nativeSrc":"922:23:23","nodeType":"YulFunctionCall","src":"922:23:23"},"variables":[{"name":"value","nativeSrc":"913:5:23","nodeType":"YulTypedName","src":"913:5:23","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"978:5:23","nodeType":"YulIdentifier","src":"978:5:23"}],"functionName":{"name":"validator_revert_bytes4","nativeSrc":"954:23:23","nodeType":"YulIdentifier","src":"954:23:23"},"nativeSrc":"954:30:23","nodeType":"YulFunctionCall","src":"954:30:23"},"nativeSrc":"954:30:23","nodeType":"YulExpressionStatement","src":"954:30:23"},{"nativeSrc":"993:15:23","nodeType":"YulAssignment","src":"993:15:23","value":{"name":"value","nativeSrc":"1003:5:23","nodeType":"YulIdentifier","src":"1003:5:23"},"variableNames":[{"name":"value0","nativeSrc":"993:6:23","nodeType":"YulIdentifier","src":"993:6:23"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"769:245:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"804:9:23","nodeType":"YulTypedName","src":"804:9:23","type":""},{"name":"dataEnd","nativeSrc":"815:7:23","nodeType":"YulTypedName","src":"815:7:23","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"827:6:23","nodeType":"YulTypedName","src":"827:6:23","type":""}],"src":"769:245:23"},{"body":{"nativeSrc":"1060:50:23","nodeType":"YulBlock","src":"1060:50:23","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1077:3:23","nodeType":"YulIdentifier","src":"1077:3:23"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1096:5:23","nodeType":"YulIdentifier","src":"1096:5:23"}],"functionName":{"name":"iszero","nativeSrc":"1089:6:23","nodeType":"YulIdentifier","src":"1089:6:23"},"nativeSrc":"1089:13:23","nodeType":"YulFunctionCall","src":"1089:13:23"}],"functionName":{"name":"iszero","nativeSrc":"1082:6:23","nodeType":"YulIdentifier","src":"1082:6:23"},"nativeSrc":"1082:21:23","nodeType":"YulFunctionCall","src":"1082:21:23"}],"functionName":{"name":"mstore","nativeSrc":"1070:6:23","nodeType":"YulIdentifier","src":"1070:6:23"},"nativeSrc":"1070:34:23","nodeType":"YulFunctionCall","src":"1070:34:23"},"nativeSrc":"1070:34:23","nodeType":"YulExpressionStatement","src":"1070:34:23"}]},"name":"abi_encode_bool","nativeSrc":"1019:91:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1044:5:23","nodeType":"YulTypedName","src":"1044:5:23","type":""},{"name":"pos","nativeSrc":"1051:3:23","nodeType":"YulTypedName","src":"1051:3:23","type":""}],"src":"1019:91:23"},{"body":{"nativeSrc":"1210:92:23","nodeType":"YulBlock","src":"1210:92:23","statements":[{"nativeSrc":"1220:26:23","nodeType":"YulAssignment","src":"1220:26:23","value":{"arguments":[{"name":"headStart","nativeSrc":"1232:9:23","nodeType":"YulIdentifier","src":"1232:9:23"},{"kind":"number","nativeSrc":"1243:2:23","nodeType":"YulLiteral","src":"1243:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1228:3:23","nodeType":"YulIdentifier","src":"1228:3:23"},"nativeSrc":"1228:18:23","nodeType":"YulFunctionCall","src":"1228:18:23"},"variableNames":[{"name":"tail","nativeSrc":"1220:4:23","nodeType":"YulIdentifier","src":"1220:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1262:9:23","nodeType":"YulIdentifier","src":"1262:9:23"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"1287:6:23","nodeType":"YulIdentifier","src":"1287:6:23"}],"functionName":{"name":"iszero","nativeSrc":"1280:6:23","nodeType":"YulIdentifier","src":"1280:6:23"},"nativeSrc":"1280:14:23","nodeType":"YulFunctionCall","src":"1280:14:23"}],"functionName":{"name":"iszero","nativeSrc":"1273:6:23","nodeType":"YulIdentifier","src":"1273:6:23"},"nativeSrc":"1273:22:23","nodeType":"YulFunctionCall","src":"1273:22:23"}],"functionName":{"name":"mstore","nativeSrc":"1255:6:23","nodeType":"YulIdentifier","src":"1255:6:23"},"nativeSrc":"1255:41:23","nodeType":"YulFunctionCall","src":"1255:41:23"},"nativeSrc":"1255:41:23","nodeType":"YulExpressionStatement","src":"1255:41:23"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"1115:187:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1179:9:23","nodeType":"YulTypedName","src":"1179:9:23","type":""},{"name":"value0","nativeSrc":"1190:6:23","nodeType":"YulTypedName","src":"1190:6:23","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1201:4:23","nodeType":"YulTypedName","src":"1201:4:23","type":""}],"src":"1115:187:23"},{"body":{"nativeSrc":"1339:95:23","nodeType":"YulBlock","src":"1339:95:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1356:1:23","nodeType":"YulLiteral","src":"1356:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"1363:3:23","nodeType":"YulLiteral","src":"1363:3:23","type":"","value":"224"},{"kind":"number","nativeSrc":"1368:10:23","nodeType":"YulLiteral","src":"1368:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"1359:3:23","nodeType":"YulIdentifier","src":"1359:3:23"},"nativeSrc":"1359:20:23","nodeType":"YulFunctionCall","src":"1359:20:23"}],"functionName":{"name":"mstore","nativeSrc":"1349:6:23","nodeType":"YulIdentifier","src":"1349:6:23"},"nativeSrc":"1349:31:23","nodeType":"YulFunctionCall","src":"1349:31:23"},"nativeSrc":"1349:31:23","nodeType":"YulExpressionStatement","src":"1349:31:23"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1396:1:23","nodeType":"YulLiteral","src":"1396:1:23","type":"","value":"4"},{"kind":"number","nativeSrc":"1399:4:23","nodeType":"YulLiteral","src":"1399:4:23","type":"","value":"0x21"}],"functionName":{"name":"mstore","nativeSrc":"1389:6:23","nodeType":"YulIdentifier","src":"1389:6:23"},"nativeSrc":"1389:15:23","nodeType":"YulFunctionCall","src":"1389:15:23"},"nativeSrc":"1389:15:23","nodeType":"YulExpressionStatement","src":"1389:15:23"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1420:1:23","nodeType":"YulLiteral","src":"1420:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"1423:4:23","nodeType":"YulLiteral","src":"1423:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1413:6:23","nodeType":"YulIdentifier","src":"1413:6:23"},"nativeSrc":"1413:15:23","nodeType":"YulFunctionCall","src":"1413:15:23"},"nativeSrc":"1413:15:23","nodeType":"YulExpressionStatement","src":"1413:15:23"}]},"name":"panic_error_0x21","nativeSrc":"1307:127:23","nodeType":"YulFunctionDefinition","src":"1307:127:23"},{"body":{"nativeSrc":"1483:60:23","nodeType":"YulBlock","src":"1483:60:23","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1500:3:23","nodeType":"YulIdentifier","src":"1500:3:23"},{"arguments":[{"name":"value","nativeSrc":"1509:5:23","nodeType":"YulIdentifier","src":"1509:5:23"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1524:3:23","nodeType":"YulLiteral","src":"1524:3:23","type":"","value":"160"},{"kind":"number","nativeSrc":"1529:1:23","nodeType":"YulLiteral","src":"1529:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"1520:3:23","nodeType":"YulIdentifier","src":"1520:3:23"},"nativeSrc":"1520:11:23","nodeType":"YulFunctionCall","src":"1520:11:23"},{"kind":"number","nativeSrc":"1533:1:23","nodeType":"YulLiteral","src":"1533:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"1516:3:23","nodeType":"YulIdentifier","src":"1516:3:23"},"nativeSrc":"1516:19:23","nodeType":"YulFunctionCall","src":"1516:19:23"}],"functionName":{"name":"and","nativeSrc":"1505:3:23","nodeType":"YulIdentifier","src":"1505:3:23"},"nativeSrc":"1505:31:23","nodeType":"YulFunctionCall","src":"1505:31:23"}],"functionName":{"name":"mstore","nativeSrc":"1493:6:23","nodeType":"YulIdentifier","src":"1493:6:23"},"nativeSrc":"1493:44:23","nodeType":"YulFunctionCall","src":"1493:44:23"},"nativeSrc":"1493:44:23","nodeType":"YulExpressionStatement","src":"1493:44:23"}]},"name":"abi_encode_address","nativeSrc":"1439:104:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1467:5:23","nodeType":"YulTypedName","src":"1467:5:23","type":""},{"name":"pos","nativeSrc":"1474:3:23","nodeType":"YulTypedName","src":"1474:3:23","type":""}],"src":"1439:104:23"},{"body":{"nativeSrc":"1617:68:23","nodeType":"YulBlock","src":"1617:68:23","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1634:3:23","nodeType":"YulIdentifier","src":"1634:3:23"},{"kind":"number","nativeSrc":"1639:1:23","nodeType":"YulLiteral","src":"1639:1:23","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"1627:6:23","nodeType":"YulIdentifier","src":"1627:6:23"},"nativeSrc":"1627:14:23","nodeType":"YulFunctionCall","src":"1627:14:23"},"nativeSrc":"1627:14:23","nodeType":"YulExpressionStatement","src":"1627:14:23"},{"nativeSrc":"1650:29:23","nodeType":"YulAssignment","src":"1650:29:23","value":{"arguments":[{"name":"pos","nativeSrc":"1669:3:23","nodeType":"YulIdentifier","src":"1669:3:23"},{"kind":"number","nativeSrc":"1674:4:23","nodeType":"YulLiteral","src":"1674:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1665:3:23","nodeType":"YulIdentifier","src":"1665:3:23"},"nativeSrc":"1665:14:23","nodeType":"YulFunctionCall","src":"1665:14:23"},"variableNames":[{"name":"updated_pos","nativeSrc":"1650:11:23","nodeType":"YulIdentifier","src":"1650:11:23"}]}]},"name":"array_storeLengthForEncoding_string","nativeSrc":"1548:137:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"1593:3:23","nodeType":"YulTypedName","src":"1593:3:23","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"1601:11:23","nodeType":"YulTypedName","src":"1601:11:23","type":""}],"src":"1548:137:23"},{"body":{"nativeSrc":"1740:373:23","nodeType":"YulBlock","src":"1740:373:23","statements":[{"nativeSrc":"1750:26:23","nodeType":"YulVariableDeclaration","src":"1750:26:23","value":{"arguments":[{"name":"value","nativeSrc":"1770:5:23","nodeType":"YulIdentifier","src":"1770:5:23"}],"functionName":{"name":"mload","nativeSrc":"1764:5:23","nodeType":"YulIdentifier","src":"1764:5:23"},"nativeSrc":"1764:12:23","nodeType":"YulFunctionCall","src":"1764:12:23"},"variables":[{"name":"length","nativeSrc":"1754:6:23","nodeType":"YulTypedName","src":"1754:6:23","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"1792:3:23","nodeType":"YulIdentifier","src":"1792:3:23"},{"name":"length","nativeSrc":"1797:6:23","nodeType":"YulIdentifier","src":"1797:6:23"}],"functionName":{"name":"mstore","nativeSrc":"1785:6:23","nodeType":"YulIdentifier","src":"1785:6:23"},"nativeSrc":"1785:19:23","nodeType":"YulFunctionCall","src":"1785:19:23"},"nativeSrc":"1785:19:23","nodeType":"YulExpressionStatement","src":"1785:19:23"},{"nativeSrc":"1813:10:23","nodeType":"YulVariableDeclaration","src":"1813:10:23","value":{"kind":"number","nativeSrc":"1822:1:23","nodeType":"YulLiteral","src":"1822:1:23","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"1817:1:23","nodeType":"YulTypedName","src":"1817:1:23","type":""}]},{"body":{"nativeSrc":"1884:110:23","nodeType":"YulBlock","src":"1884:110:23","statements":[{"nativeSrc":"1898:14:23","nodeType":"YulVariableDeclaration","src":"1898:14:23","value":{"kind":"number","nativeSrc":"1908:4:23","nodeType":"YulLiteral","src":"1908:4:23","type":"","value":"0x20"},"variables":[{"name":"_1","nativeSrc":"1902:2:23","nodeType":"YulTypedName","src":"1902:2:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"1940:3:23","nodeType":"YulIdentifier","src":"1940:3:23"},{"name":"i","nativeSrc":"1945:1:23","nodeType":"YulIdentifier","src":"1945:1:23"}],"functionName":{"name":"add","nativeSrc":"1936:3:23","nodeType":"YulIdentifier","src":"1936:3:23"},"nativeSrc":"1936:11:23","nodeType":"YulFunctionCall","src":"1936:11:23"},{"name":"_1","nativeSrc":"1949:2:23","nodeType":"YulIdentifier","src":"1949:2:23"}],"functionName":{"name":"add","nativeSrc":"1932:3:23","nodeType":"YulIdentifier","src":"1932:3:23"},"nativeSrc":"1932:20:23","nodeType":"YulFunctionCall","src":"1932:20:23"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1968:5:23","nodeType":"YulIdentifier","src":"1968:5:23"},{"name":"i","nativeSrc":"1975:1:23","nodeType":"YulIdentifier","src":"1975:1:23"}],"functionName":{"name":"add","nativeSrc":"1964:3:23","nodeType":"YulIdentifier","src":"1964:3:23"},"nativeSrc":"1964:13:23","nodeType":"YulFunctionCall","src":"1964:13:23"},{"name":"_1","nativeSrc":"1979:2:23","nodeType":"YulIdentifier","src":"1979:2:23"}],"functionName":{"name":"add","nativeSrc":"1960:3:23","nodeType":"YulIdentifier","src":"1960:3:23"},"nativeSrc":"1960:22:23","nodeType":"YulFunctionCall","src":"1960:22:23"}],"functionName":{"name":"mload","nativeSrc":"1954:5:23","nodeType":"YulIdentifier","src":"1954:5:23"},"nativeSrc":"1954:29:23","nodeType":"YulFunctionCall","src":"1954:29:23"}],"functionName":{"name":"mstore","nativeSrc":"1925:6:23","nodeType":"YulIdentifier","src":"1925:6:23"},"nativeSrc":"1925:59:23","nodeType":"YulFunctionCall","src":"1925:59:23"},"nativeSrc":"1925:59:23","nodeType":"YulExpressionStatement","src":"1925:59:23"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"1843:1:23","nodeType":"YulIdentifier","src":"1843:1:23"},{"name":"length","nativeSrc":"1846:6:23","nodeType":"YulIdentifier","src":"1846:6:23"}],"functionName":{"name":"lt","nativeSrc":"1840:2:23","nodeType":"YulIdentifier","src":"1840:2:23"},"nativeSrc":"1840:13:23","nodeType":"YulFunctionCall","src":"1840:13:23"},"nativeSrc":"1832:162:23","nodeType":"YulForLoop","post":{"nativeSrc":"1854:21:23","nodeType":"YulBlock","src":"1854:21:23","statements":[{"nativeSrc":"1856:17:23","nodeType":"YulAssignment","src":"1856:17:23","value":{"arguments":[{"name":"i","nativeSrc":"1865:1:23","nodeType":"YulIdentifier","src":"1865:1:23"},{"kind":"number","nativeSrc":"1868:4:23","nodeType":"YulLiteral","src":"1868:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1861:3:23","nodeType":"YulIdentifier","src":"1861:3:23"},"nativeSrc":"1861:12:23","nodeType":"YulFunctionCall","src":"1861:12:23"},"variableNames":[{"name":"i","nativeSrc":"1856:1:23","nodeType":"YulIdentifier","src":"1856:1:23"}]}]},"pre":{"nativeSrc":"1836:3:23","nodeType":"YulBlock","src":"1836:3:23","statements":[]},"src":"1832:162:23"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"2018:3:23","nodeType":"YulIdentifier","src":"2018:3:23"},{"name":"length","nativeSrc":"2023:6:23","nodeType":"YulIdentifier","src":"2023:6:23"}],"functionName":{"name":"add","nativeSrc":"2014:3:23","nodeType":"YulIdentifier","src":"2014:3:23"},"nativeSrc":"2014:16:23","nodeType":"YulFunctionCall","src":"2014:16:23"},{"kind":"number","nativeSrc":"2032:4:23","nodeType":"YulLiteral","src":"2032:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2010:3:23","nodeType":"YulIdentifier","src":"2010:3:23"},"nativeSrc":"2010:27:23","nodeType":"YulFunctionCall","src":"2010:27:23"},{"kind":"number","nativeSrc":"2039:1:23","nodeType":"YulLiteral","src":"2039:1:23","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"2003:6:23","nodeType":"YulIdentifier","src":"2003:6:23"},"nativeSrc":"2003:38:23","nodeType":"YulFunctionCall","src":"2003:38:23"},"nativeSrc":"2003:38:23","nodeType":"YulExpressionStatement","src":"2003:38:23"},{"nativeSrc":"2050:57:23","nodeType":"YulAssignment","src":"2050:57:23","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"2065:3:23","nodeType":"YulIdentifier","src":"2065:3:23"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"2078:6:23","nodeType":"YulIdentifier","src":"2078:6:23"},{"kind":"number","nativeSrc":"2086:2:23","nodeType":"YulLiteral","src":"2086:2:23","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"2074:3:23","nodeType":"YulIdentifier","src":"2074:3:23"},"nativeSrc":"2074:15:23","nodeType":"YulFunctionCall","src":"2074:15:23"},{"arguments":[{"kind":"number","nativeSrc":"2095:2:23","nodeType":"YulLiteral","src":"2095:2:23","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"2091:3:23","nodeType":"YulIdentifier","src":"2091:3:23"},"nativeSrc":"2091:7:23","nodeType":"YulFunctionCall","src":"2091:7:23"}],"functionName":{"name":"and","nativeSrc":"2070:3:23","nodeType":"YulIdentifier","src":"2070:3:23"},"nativeSrc":"2070:29:23","nodeType":"YulFunctionCall","src":"2070:29:23"}],"functionName":{"name":"add","nativeSrc":"2061:3:23","nodeType":"YulIdentifier","src":"2061:3:23"},"nativeSrc":"2061:39:23","nodeType":"YulFunctionCall","src":"2061:39:23"},{"kind":"number","nativeSrc":"2102:4:23","nodeType":"YulLiteral","src":"2102:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2057:3:23","nodeType":"YulIdentifier","src":"2057:3:23"},"nativeSrc":"2057:50:23","nodeType":"YulFunctionCall","src":"2057:50:23"},"variableNames":[{"name":"end","nativeSrc":"2050:3:23","nodeType":"YulIdentifier","src":"2050:3:23"}]}]},"name":"abi_encode_string","nativeSrc":"1690:423:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1717:5:23","nodeType":"YulTypedName","src":"1717:5:23","type":""},{"name":"pos","nativeSrc":"1724:3:23","nodeType":"YulTypedName","src":"1724:3:23","type":""}],"returnVariables":[{"name":"end","nativeSrc":"1732:3:23","nodeType":"YulTypedName","src":"1732:3:23","type":""}],"src":"1690:423:23"},{"body":{"nativeSrc":"2507:596:23","nodeType":"YulBlock","src":"2507:596:23","statements":[{"nativeSrc":"2517:13:23","nodeType":"YulVariableDeclaration","src":"2517:13:23","value":{"kind":"number","nativeSrc":"2527:3:23","nodeType":"YulLiteral","src":"2527:3:23","type":"","value":"320"},"variables":[{"name":"_1","nativeSrc":"2521:2:23","nodeType":"YulTypedName","src":"2521:2:23","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2546:9:23","nodeType":"YulIdentifier","src":"2546:9:23"},{"name":"value0","nativeSrc":"2557:6:23","nodeType":"YulIdentifier","src":"2557:6:23"}],"functionName":{"name":"mstore","nativeSrc":"2539:6:23","nodeType":"YulIdentifier","src":"2539:6:23"},"nativeSrc":"2539:25:23","nodeType":"YulFunctionCall","src":"2539:25:23"},"nativeSrc":"2539:25:23","nodeType":"YulExpressionStatement","src":"2539:25:23"},{"body":{"nativeSrc":"2598:22:23","nodeType":"YulBlock","src":"2598:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x21","nativeSrc":"2600:16:23","nodeType":"YulIdentifier","src":"2600:16:23"},"nativeSrc":"2600:18:23","nodeType":"YulFunctionCall","src":"2600:18:23"},"nativeSrc":"2600:18:23","nodeType":"YulExpressionStatement","src":"2600:18:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value1","nativeSrc":"2586:6:23","nodeType":"YulIdentifier","src":"2586:6:23"},{"kind":"number","nativeSrc":"2594:1:23","nodeType":"YulLiteral","src":"2594:1:23","type":"","value":"3"}],"functionName":{"name":"lt","nativeSrc":"2583:2:23","nodeType":"YulIdentifier","src":"2583:2:23"},"nativeSrc":"2583:13:23","nodeType":"YulFunctionCall","src":"2583:13:23"}],"functionName":{"name":"iszero","nativeSrc":"2576:6:23","nodeType":"YulIdentifier","src":"2576:6:23"},"nativeSrc":"2576:21:23","nodeType":"YulFunctionCall","src":"2576:21:23"},"nativeSrc":"2573:47:23","nodeType":"YulIf","src":"2573:47:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2640:9:23","nodeType":"YulIdentifier","src":"2640:9:23"},{"kind":"number","nativeSrc":"2651:2:23","nodeType":"YulLiteral","src":"2651:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2636:3:23","nodeType":"YulIdentifier","src":"2636:3:23"},"nativeSrc":"2636:18:23","nodeType":"YulFunctionCall","src":"2636:18:23"},{"name":"value1","nativeSrc":"2656:6:23","nodeType":"YulIdentifier","src":"2656:6:23"}],"functionName":{"name":"mstore","nativeSrc":"2629:6:23","nodeType":"YulIdentifier","src":"2629:6:23"},"nativeSrc":"2629:34:23","nodeType":"YulFunctionCall","src":"2629:34:23"},"nativeSrc":"2629:34:23","nodeType":"YulExpressionStatement","src":"2629:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2683:9:23","nodeType":"YulIdentifier","src":"2683:9:23"},{"kind":"number","nativeSrc":"2694:2:23","nodeType":"YulLiteral","src":"2694:2:23","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2679:3:23","nodeType":"YulIdentifier","src":"2679:3:23"},"nativeSrc":"2679:18:23","nodeType":"YulFunctionCall","src":"2679:18:23"},{"name":"value2","nativeSrc":"2699:6:23","nodeType":"YulIdentifier","src":"2699:6:23"}],"functionName":{"name":"mstore","nativeSrc":"2672:6:23","nodeType":"YulIdentifier","src":"2672:6:23"},"nativeSrc":"2672:34:23","nodeType":"YulFunctionCall","src":"2672:34:23"},"nativeSrc":"2672:34:23","nodeType":"YulExpressionStatement","src":"2672:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2726:9:23","nodeType":"YulIdentifier","src":"2726:9:23"},{"kind":"number","nativeSrc":"2737:2:23","nodeType":"YulLiteral","src":"2737:2:23","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"2722:3:23","nodeType":"YulIdentifier","src":"2722:3:23"},"nativeSrc":"2722:18:23","nodeType":"YulFunctionCall","src":"2722:18:23"},{"name":"value3","nativeSrc":"2742:6:23","nodeType":"YulIdentifier","src":"2742:6:23"}],"functionName":{"name":"mstore","nativeSrc":"2715:6:23","nodeType":"YulIdentifier","src":"2715:6:23"},"nativeSrc":"2715:34:23","nodeType":"YulFunctionCall","src":"2715:34:23"},"nativeSrc":"2715:34:23","nodeType":"YulExpressionStatement","src":"2715:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2769:9:23","nodeType":"YulIdentifier","src":"2769:9:23"},{"kind":"number","nativeSrc":"2780:3:23","nodeType":"YulLiteral","src":"2780:3:23","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"2765:3:23","nodeType":"YulIdentifier","src":"2765:3:23"},"nativeSrc":"2765:19:23","nodeType":"YulFunctionCall","src":"2765:19:23"},{"name":"value4","nativeSrc":"2786:6:23","nodeType":"YulIdentifier","src":"2786:6:23"}],"functionName":{"name":"mstore","nativeSrc":"2758:6:23","nodeType":"YulIdentifier","src":"2758:6:23"},"nativeSrc":"2758:35:23","nodeType":"YulFunctionCall","src":"2758:35:23"},"nativeSrc":"2758:35:23","nodeType":"YulExpressionStatement","src":"2758:35:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2813:9:23","nodeType":"YulIdentifier","src":"2813:9:23"},{"kind":"number","nativeSrc":"2824:3:23","nodeType":"YulLiteral","src":"2824:3:23","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"2809:3:23","nodeType":"YulIdentifier","src":"2809:3:23"},"nativeSrc":"2809:19:23","nodeType":"YulFunctionCall","src":"2809:19:23"},{"name":"value5","nativeSrc":"2830:6:23","nodeType":"YulIdentifier","src":"2830:6:23"}],"functionName":{"name":"mstore","nativeSrc":"2802:6:23","nodeType":"YulIdentifier","src":"2802:6:23"},"nativeSrc":"2802:35:23","nodeType":"YulFunctionCall","src":"2802:35:23"},"nativeSrc":"2802:35:23","nodeType":"YulExpressionStatement","src":"2802:35:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2857:9:23","nodeType":"YulIdentifier","src":"2857:9:23"},{"kind":"number","nativeSrc":"2868:3:23","nodeType":"YulLiteral","src":"2868:3:23","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"2853:3:23","nodeType":"YulIdentifier","src":"2853:3:23"},"nativeSrc":"2853:19:23","nodeType":"YulFunctionCall","src":"2853:19:23"},{"name":"value6","nativeSrc":"2874:6:23","nodeType":"YulIdentifier","src":"2874:6:23"}],"functionName":{"name":"mstore","nativeSrc":"2846:6:23","nodeType":"YulIdentifier","src":"2846:6:23"},"nativeSrc":"2846:35:23","nodeType":"YulFunctionCall","src":"2846:35:23"},"nativeSrc":"2846:35:23","nodeType":"YulExpressionStatement","src":"2846:35:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2901:9:23","nodeType":"YulIdentifier","src":"2901:9:23"},{"kind":"number","nativeSrc":"2912:3:23","nodeType":"YulLiteral","src":"2912:3:23","type":"","value":"224"}],"functionName":{"name":"add","nativeSrc":"2897:3:23","nodeType":"YulIdentifier","src":"2897:3:23"},"nativeSrc":"2897:19:23","nodeType":"YulFunctionCall","src":"2897:19:23"},{"name":"value7","nativeSrc":"2918:6:23","nodeType":"YulIdentifier","src":"2918:6:23"}],"functionName":{"name":"mstore","nativeSrc":"2890:6:23","nodeType":"YulIdentifier","src":"2890:6:23"},"nativeSrc":"2890:35:23","nodeType":"YulFunctionCall","src":"2890:35:23"},"nativeSrc":"2890:35:23","nodeType":"YulExpressionStatement","src":"2890:35:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2945:9:23","nodeType":"YulIdentifier","src":"2945:9:23"},{"kind":"number","nativeSrc":"2956:3:23","nodeType":"YulLiteral","src":"2956:3:23","type":"","value":"256"}],"functionName":{"name":"add","nativeSrc":"2941:3:23","nodeType":"YulIdentifier","src":"2941:3:23"},"nativeSrc":"2941:19:23","nodeType":"YulFunctionCall","src":"2941:19:23"},{"arguments":[{"name":"value8","nativeSrc":"2966:6:23","nodeType":"YulIdentifier","src":"2966:6:23"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"2982:3:23","nodeType":"YulLiteral","src":"2982:3:23","type":"","value":"160"},{"kind":"number","nativeSrc":"2987:1:23","nodeType":"YulLiteral","src":"2987:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"2978:3:23","nodeType":"YulIdentifier","src":"2978:3:23"},"nativeSrc":"2978:11:23","nodeType":"YulFunctionCall","src":"2978:11:23"},{"kind":"number","nativeSrc":"2991:1:23","nodeType":"YulLiteral","src":"2991:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"2974:3:23","nodeType":"YulIdentifier","src":"2974:3:23"},"nativeSrc":"2974:19:23","nodeType":"YulFunctionCall","src":"2974:19:23"}],"functionName":{"name":"and","nativeSrc":"2962:3:23","nodeType":"YulIdentifier","src":"2962:3:23"},"nativeSrc":"2962:32:23","nodeType":"YulFunctionCall","src":"2962:32:23"}],"functionName":{"name":"mstore","nativeSrc":"2934:6:23","nodeType":"YulIdentifier","src":"2934:6:23"},"nativeSrc":"2934:61:23","nodeType":"YulFunctionCall","src":"2934:61:23"},"nativeSrc":"2934:61:23","nodeType":"YulExpressionStatement","src":"2934:61:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3015:9:23","nodeType":"YulIdentifier","src":"3015:9:23"},{"kind":"number","nativeSrc":"3026:3:23","nodeType":"YulLiteral","src":"3026:3:23","type":"","value":"288"}],"functionName":{"name":"add","nativeSrc":"3011:3:23","nodeType":"YulIdentifier","src":"3011:3:23"},"nativeSrc":"3011:19:23","nodeType":"YulFunctionCall","src":"3011:19:23"},{"name":"_1","nativeSrc":"3032:2:23","nodeType":"YulIdentifier","src":"3032:2:23"}],"functionName":{"name":"mstore","nativeSrc":"3004:6:23","nodeType":"YulIdentifier","src":"3004:6:23"},"nativeSrc":"3004:31:23","nodeType":"YulFunctionCall","src":"3004:31:23"},"nativeSrc":"3004:31:23","nodeType":"YulExpressionStatement","src":"3004:31:23"},{"nativeSrc":"3044:53:23","nodeType":"YulAssignment","src":"3044:53:23","value":{"arguments":[{"name":"value9","nativeSrc":"3070:6:23","nodeType":"YulIdentifier","src":"3070:6:23"},{"arguments":[{"name":"headStart","nativeSrc":"3082:9:23","nodeType":"YulIdentifier","src":"3082:9:23"},{"name":"_1","nativeSrc":"3093:2:23","nodeType":"YulIdentifier","src":"3093:2:23"}],"functionName":{"name":"add","nativeSrc":"3078:3:23","nodeType":"YulIdentifier","src":"3078:3:23"},"nativeSrc":"3078:18:23","nodeType":"YulFunctionCall","src":"3078:18:23"}],"functionName":{"name":"abi_encode_string","nativeSrc":"3052:17:23","nodeType":"YulIdentifier","src":"3052:17:23"},"nativeSrc":"3052:45:23","nodeType":"YulFunctionCall","src":"3052:45:23"},"variableNames":[{"name":"tail","nativeSrc":"3044:4:23","nodeType":"YulIdentifier","src":"3044:4:23"}]}]},"name":"abi_encode_tuple_t_uint256_t_enum$_ResearchState_$3912_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_address_t_string_memory_ptr__to_t_uint256_t_uint8_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_address_t_string_memory_ptr__fromStack_reversed","nativeSrc":"2118:985:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2404:9:23","nodeType":"YulTypedName","src":"2404:9:23","type":""},{"name":"value9","nativeSrc":"2415:6:23","nodeType":"YulTypedName","src":"2415:6:23","type":""},{"name":"value8","nativeSrc":"2423:6:23","nodeType":"YulTypedName","src":"2423:6:23","type":""},{"name":"value7","nativeSrc":"2431:6:23","nodeType":"YulTypedName","src":"2431:6:23","type":""},{"name":"value6","nativeSrc":"2439:6:23","nodeType":"YulTypedName","src":"2439:6:23","type":""},{"name":"value5","nativeSrc":"2447:6:23","nodeType":"YulTypedName","src":"2447:6:23","type":""},{"name":"value4","nativeSrc":"2455:6:23","nodeType":"YulTypedName","src":"2455:6:23","type":""},{"name":"value3","nativeSrc":"2463:6:23","nodeType":"YulTypedName","src":"2463:6:23","type":""},{"name":"value2","nativeSrc":"2471:6:23","nodeType":"YulTypedName","src":"2471:6:23","type":""},{"name":"value1","nativeSrc":"2479:6:23","nodeType":"YulTypedName","src":"2479:6:23","type":""},{"name":"value0","nativeSrc":"2487:6:23","nodeType":"YulTypedName","src":"2487:6:23","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2498:4:23","nodeType":"YulTypedName","src":"2498:4:23","type":""}],"src":"2118:985:23"},{"body":{"nativeSrc":"3178:110:23","nodeType":"YulBlock","src":"3178:110:23","statements":[{"body":{"nativeSrc":"3224:16:23","nodeType":"YulBlock","src":"3224:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3233:1:23","nodeType":"YulLiteral","src":"3233:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"3236:1:23","nodeType":"YulLiteral","src":"3236:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3226:6:23","nodeType":"YulIdentifier","src":"3226:6:23"},"nativeSrc":"3226:12:23","nodeType":"YulFunctionCall","src":"3226:12:23"},"nativeSrc":"3226:12:23","nodeType":"YulExpressionStatement","src":"3226:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3199:7:23","nodeType":"YulIdentifier","src":"3199:7:23"},{"name":"headStart","nativeSrc":"3208:9:23","nodeType":"YulIdentifier","src":"3208:9:23"}],"functionName":{"name":"sub","nativeSrc":"3195:3:23","nodeType":"YulIdentifier","src":"3195:3:23"},"nativeSrc":"3195:23:23","nodeType":"YulFunctionCall","src":"3195:23:23"},{"kind":"number","nativeSrc":"3220:2:23","nodeType":"YulLiteral","src":"3220:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3191:3:23","nodeType":"YulIdentifier","src":"3191:3:23"},"nativeSrc":"3191:32:23","nodeType":"YulFunctionCall","src":"3191:32:23"},"nativeSrc":"3188:52:23","nodeType":"YulIf","src":"3188:52:23"},{"nativeSrc":"3249:33:23","nodeType":"YulAssignment","src":"3249:33:23","value":{"arguments":[{"name":"headStart","nativeSrc":"3272:9:23","nodeType":"YulIdentifier","src":"3272:9:23"}],"functionName":{"name":"calldataload","nativeSrc":"3259:12:23","nodeType":"YulIdentifier","src":"3259:12:23"},"nativeSrc":"3259:23:23","nodeType":"YulFunctionCall","src":"3259:23:23"},"variableNames":[{"name":"value0","nativeSrc":"3249:6:23","nodeType":"YulIdentifier","src":"3249:6:23"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"3108:180:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3144:9:23","nodeType":"YulTypedName","src":"3144:9:23","type":""},{"name":"dataEnd","nativeSrc":"3155:7:23","nodeType":"YulTypedName","src":"3155:7:23","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3167:6:23","nodeType":"YulTypedName","src":"3167:6:23","type":""}],"src":"3108:180:23"},{"body":{"nativeSrc":"3414:99:23","nodeType":"YulBlock","src":"3414:99:23","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3431:9:23","nodeType":"YulIdentifier","src":"3431:9:23"},{"kind":"number","nativeSrc":"3442:2:23","nodeType":"YulLiteral","src":"3442:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"3424:6:23","nodeType":"YulIdentifier","src":"3424:6:23"},"nativeSrc":"3424:21:23","nodeType":"YulFunctionCall","src":"3424:21:23"},"nativeSrc":"3424:21:23","nodeType":"YulExpressionStatement","src":"3424:21:23"},{"nativeSrc":"3454:53:23","nodeType":"YulAssignment","src":"3454:53:23","value":{"arguments":[{"name":"value0","nativeSrc":"3480:6:23","nodeType":"YulIdentifier","src":"3480:6:23"},{"arguments":[{"name":"headStart","nativeSrc":"3492:9:23","nodeType":"YulIdentifier","src":"3492:9:23"},{"kind":"number","nativeSrc":"3503:2:23","nodeType":"YulLiteral","src":"3503:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3488:3:23","nodeType":"YulIdentifier","src":"3488:3:23"},"nativeSrc":"3488:18:23","nodeType":"YulFunctionCall","src":"3488:18:23"}],"functionName":{"name":"abi_encode_string","nativeSrc":"3462:17:23","nodeType":"YulIdentifier","src":"3462:17:23"},"nativeSrc":"3462:45:23","nodeType":"YulFunctionCall","src":"3462:45:23"},"variableNames":[{"name":"tail","nativeSrc":"3454:4:23","nodeType":"YulIdentifier","src":"3454:4:23"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"3293:220:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3383:9:23","nodeType":"YulTypedName","src":"3383:9:23","type":""},{"name":"value0","nativeSrc":"3394:6:23","nodeType":"YulTypedName","src":"3394:6:23","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3405:4:23","nodeType":"YulTypedName","src":"3405:4:23","type":""}],"src":"3293:220:23"},{"body":{"nativeSrc":"3550:95:23","nodeType":"YulBlock","src":"3550:95:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3567:1:23","nodeType":"YulLiteral","src":"3567:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"3574:3:23","nodeType":"YulLiteral","src":"3574:3:23","type":"","value":"224"},{"kind":"number","nativeSrc":"3579:10:23","nodeType":"YulLiteral","src":"3579:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"3570:3:23","nodeType":"YulIdentifier","src":"3570:3:23"},"nativeSrc":"3570:20:23","nodeType":"YulFunctionCall","src":"3570:20:23"}],"functionName":{"name":"mstore","nativeSrc":"3560:6:23","nodeType":"YulIdentifier","src":"3560:6:23"},"nativeSrc":"3560:31:23","nodeType":"YulFunctionCall","src":"3560:31:23"},"nativeSrc":"3560:31:23","nodeType":"YulExpressionStatement","src":"3560:31:23"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3607:1:23","nodeType":"YulLiteral","src":"3607:1:23","type":"","value":"4"},{"kind":"number","nativeSrc":"3610:4:23","nodeType":"YulLiteral","src":"3610:4:23","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"3600:6:23","nodeType":"YulIdentifier","src":"3600:6:23"},"nativeSrc":"3600:15:23","nodeType":"YulFunctionCall","src":"3600:15:23"},"nativeSrc":"3600:15:23","nodeType":"YulExpressionStatement","src":"3600:15:23"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3631:1:23","nodeType":"YulLiteral","src":"3631:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"3634:4:23","nodeType":"YulLiteral","src":"3634:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"3624:6:23","nodeType":"YulIdentifier","src":"3624:6:23"},"nativeSrc":"3624:15:23","nodeType":"YulFunctionCall","src":"3624:15:23"},"nativeSrc":"3624:15:23","nodeType":"YulExpressionStatement","src":"3624:15:23"}]},"name":"panic_error_0x41","nativeSrc":"3518:127:23","nodeType":"YulFunctionDefinition","src":"3518:127:23"},{"body":{"nativeSrc":"3695:230:23","nodeType":"YulBlock","src":"3695:230:23","statements":[{"nativeSrc":"3705:19:23","nodeType":"YulAssignment","src":"3705:19:23","value":{"arguments":[{"kind":"number","nativeSrc":"3721:2:23","nodeType":"YulLiteral","src":"3721:2:23","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"3715:5:23","nodeType":"YulIdentifier","src":"3715:5:23"},"nativeSrc":"3715:9:23","nodeType":"YulFunctionCall","src":"3715:9:23"},"variableNames":[{"name":"memPtr","nativeSrc":"3705:6:23","nodeType":"YulIdentifier","src":"3705:6:23"}]},{"nativeSrc":"3733:58:23","nodeType":"YulVariableDeclaration","src":"3733:58:23","value":{"arguments":[{"name":"memPtr","nativeSrc":"3755:6:23","nodeType":"YulIdentifier","src":"3755:6:23"},{"arguments":[{"arguments":[{"name":"size","nativeSrc":"3771:4:23","nodeType":"YulIdentifier","src":"3771:4:23"},{"kind":"number","nativeSrc":"3777:2:23","nodeType":"YulLiteral","src":"3777:2:23","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"3767:3:23","nodeType":"YulIdentifier","src":"3767:3:23"},"nativeSrc":"3767:13:23","nodeType":"YulFunctionCall","src":"3767:13:23"},{"arguments":[{"kind":"number","nativeSrc":"3786:2:23","nodeType":"YulLiteral","src":"3786:2:23","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"3782:3:23","nodeType":"YulIdentifier","src":"3782:3:23"},"nativeSrc":"3782:7:23","nodeType":"YulFunctionCall","src":"3782:7:23"}],"functionName":{"name":"and","nativeSrc":"3763:3:23","nodeType":"YulIdentifier","src":"3763:3:23"},"nativeSrc":"3763:27:23","nodeType":"YulFunctionCall","src":"3763:27:23"}],"functionName":{"name":"add","nativeSrc":"3751:3:23","nodeType":"YulIdentifier","src":"3751:3:23"},"nativeSrc":"3751:40:23","nodeType":"YulFunctionCall","src":"3751:40:23"},"variables":[{"name":"newFreePtr","nativeSrc":"3737:10:23","nodeType":"YulTypedName","src":"3737:10:23","type":""}]},{"body":{"nativeSrc":"3866:22:23","nodeType":"YulBlock","src":"3866:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"3868:16:23","nodeType":"YulIdentifier","src":"3868:16:23"},"nativeSrc":"3868:18:23","nodeType":"YulFunctionCall","src":"3868:18:23"},"nativeSrc":"3868:18:23","nodeType":"YulExpressionStatement","src":"3868:18:23"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"3809:10:23","nodeType":"YulIdentifier","src":"3809:10:23"},{"kind":"number","nativeSrc":"3821:18:23","nodeType":"YulLiteral","src":"3821:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3806:2:23","nodeType":"YulIdentifier","src":"3806:2:23"},"nativeSrc":"3806:34:23","nodeType":"YulFunctionCall","src":"3806:34:23"},{"arguments":[{"name":"newFreePtr","nativeSrc":"3845:10:23","nodeType":"YulIdentifier","src":"3845:10:23"},{"name":"memPtr","nativeSrc":"3857:6:23","nodeType":"YulIdentifier","src":"3857:6:23"}],"functionName":{"name":"lt","nativeSrc":"3842:2:23","nodeType":"YulIdentifier","src":"3842:2:23"},"nativeSrc":"3842:22:23","nodeType":"YulFunctionCall","src":"3842:22:23"}],"functionName":{"name":"or","nativeSrc":"3803:2:23","nodeType":"YulIdentifier","src":"3803:2:23"},"nativeSrc":"3803:62:23","nodeType":"YulFunctionCall","src":"3803:62:23"},"nativeSrc":"3800:88:23","nodeType":"YulIf","src":"3800:88:23"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3904:2:23","nodeType":"YulLiteral","src":"3904:2:23","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"3908:10:23","nodeType":"YulIdentifier","src":"3908:10:23"}],"functionName":{"name":"mstore","nativeSrc":"3897:6:23","nodeType":"YulIdentifier","src":"3897:6:23"},"nativeSrc":"3897:22:23","nodeType":"YulFunctionCall","src":"3897:22:23"},"nativeSrc":"3897:22:23","nodeType":"YulExpressionStatement","src":"3897:22:23"}]},"name":"allocate_memory","nativeSrc":"3650:275:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"3675:4:23","nodeType":"YulTypedName","src":"3675:4:23","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"3684:6:23","nodeType":"YulTypedName","src":"3684:6:23","type":""}],"src":"3650:275:23"},{"body":{"nativeSrc":"3999:114:23","nodeType":"YulBlock","src":"3999:114:23","statements":[{"body":{"nativeSrc":"4043:22:23","nodeType":"YulBlock","src":"4043:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"4045:16:23","nodeType":"YulIdentifier","src":"4045:16:23"},"nativeSrc":"4045:18:23","nodeType":"YulFunctionCall","src":"4045:18:23"},"nativeSrc":"4045:18:23","nodeType":"YulExpressionStatement","src":"4045:18:23"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"4015:6:23","nodeType":"YulIdentifier","src":"4015:6:23"},{"kind":"number","nativeSrc":"4023:18:23","nodeType":"YulLiteral","src":"4023:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4012:2:23","nodeType":"YulIdentifier","src":"4012:2:23"},"nativeSrc":"4012:30:23","nodeType":"YulFunctionCall","src":"4012:30:23"},"nativeSrc":"4009:56:23","nodeType":"YulIf","src":"4009:56:23"},{"nativeSrc":"4074:33:23","nodeType":"YulAssignment","src":"4074:33:23","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4090:1:23","nodeType":"YulLiteral","src":"4090:1:23","type":"","value":"5"},{"name":"length","nativeSrc":"4093:6:23","nodeType":"YulIdentifier","src":"4093:6:23"}],"functionName":{"name":"shl","nativeSrc":"4086:3:23","nodeType":"YulIdentifier","src":"4086:3:23"},"nativeSrc":"4086:14:23","nodeType":"YulFunctionCall","src":"4086:14:23"},{"kind":"number","nativeSrc":"4102:4:23","nodeType":"YulLiteral","src":"4102:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4082:3:23","nodeType":"YulIdentifier","src":"4082:3:23"},"nativeSrc":"4082:25:23","nodeType":"YulFunctionCall","src":"4082:25:23"},"variableNames":[{"name":"size","nativeSrc":"4074:4:23","nodeType":"YulIdentifier","src":"4074:4:23"}]}]},"name":"array_allocation_size_array_uint256_dyn","nativeSrc":"3930:183:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nativeSrc":"3979:6:23","nodeType":"YulTypedName","src":"3979:6:23","type":""}],"returnVariables":[{"name":"size","nativeSrc":"3990:4:23","nodeType":"YulTypedName","src":"3990:4:23","type":""}],"src":"3930:183:23"},{"body":{"nativeSrc":"4182:604:23","nodeType":"YulBlock","src":"4182:604:23","statements":[{"body":{"nativeSrc":"4231:16:23","nodeType":"YulBlock","src":"4231:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4240:1:23","nodeType":"YulLiteral","src":"4240:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"4243:1:23","nodeType":"YulLiteral","src":"4243:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4233:6:23","nodeType":"YulIdentifier","src":"4233:6:23"},"nativeSrc":"4233:12:23","nodeType":"YulFunctionCall","src":"4233:12:23"},"nativeSrc":"4233:12:23","nodeType":"YulExpressionStatement","src":"4233:12:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"4210:6:23","nodeType":"YulIdentifier","src":"4210:6:23"},{"kind":"number","nativeSrc":"4218:4:23","nodeType":"YulLiteral","src":"4218:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"4206:3:23","nodeType":"YulIdentifier","src":"4206:3:23"},"nativeSrc":"4206:17:23","nodeType":"YulFunctionCall","src":"4206:17:23"},{"name":"end","nativeSrc":"4225:3:23","nodeType":"YulIdentifier","src":"4225:3:23"}],"functionName":{"name":"slt","nativeSrc":"4202:3:23","nodeType":"YulIdentifier","src":"4202:3:23"},"nativeSrc":"4202:27:23","nodeType":"YulFunctionCall","src":"4202:27:23"}],"functionName":{"name":"iszero","nativeSrc":"4195:6:23","nodeType":"YulIdentifier","src":"4195:6:23"},"nativeSrc":"4195:35:23","nodeType":"YulFunctionCall","src":"4195:35:23"},"nativeSrc":"4192:55:23","nodeType":"YulIf","src":"4192:55:23"},{"nativeSrc":"4256:30:23","nodeType":"YulVariableDeclaration","src":"4256:30:23","value":{"arguments":[{"name":"offset","nativeSrc":"4279:6:23","nodeType":"YulIdentifier","src":"4279:6:23"}],"functionName":{"name":"calldataload","nativeSrc":"4266:12:23","nodeType":"YulIdentifier","src":"4266:12:23"},"nativeSrc":"4266:20:23","nodeType":"YulFunctionCall","src":"4266:20:23"},"variables":[{"name":"_1","nativeSrc":"4260:2:23","nodeType":"YulTypedName","src":"4260:2:23","type":""}]},{"nativeSrc":"4295:14:23","nodeType":"YulVariableDeclaration","src":"4295:14:23","value":{"kind":"number","nativeSrc":"4305:4:23","nodeType":"YulLiteral","src":"4305:4:23","type":"","value":"0x20"},"variables":[{"name":"_2","nativeSrc":"4299:2:23","nodeType":"YulTypedName","src":"4299:2:23","type":""}]},{"nativeSrc":"4318:71:23","nodeType":"YulVariableDeclaration","src":"4318:71:23","value":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"4385:2:23","nodeType":"YulIdentifier","src":"4385:2:23"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nativeSrc":"4345:39:23","nodeType":"YulIdentifier","src":"4345:39:23"},"nativeSrc":"4345:43:23","nodeType":"YulFunctionCall","src":"4345:43:23"}],"functionName":{"name":"allocate_memory","nativeSrc":"4329:15:23","nodeType":"YulIdentifier","src":"4329:15:23"},"nativeSrc":"4329:60:23","nodeType":"YulFunctionCall","src":"4329:60:23"},"variables":[{"name":"dst","nativeSrc":"4322:3:23","nodeType":"YulTypedName","src":"4322:3:23","type":""}]},{"nativeSrc":"4398:16:23","nodeType":"YulVariableDeclaration","src":"4398:16:23","value":{"name":"dst","nativeSrc":"4411:3:23","nodeType":"YulIdentifier","src":"4411:3:23"},"variables":[{"name":"dst_1","nativeSrc":"4402:5:23","nodeType":"YulTypedName","src":"4402:5:23","type":""}]},{"expression":{"arguments":[{"name":"dst","nativeSrc":"4430:3:23","nodeType":"YulIdentifier","src":"4430:3:23"},{"name":"_1","nativeSrc":"4435:2:23","nodeType":"YulIdentifier","src":"4435:2:23"}],"functionName":{"name":"mstore","nativeSrc":"4423:6:23","nodeType":"YulIdentifier","src":"4423:6:23"},"nativeSrc":"4423:15:23","nodeType":"YulFunctionCall","src":"4423:15:23"},"nativeSrc":"4423:15:23","nodeType":"YulExpressionStatement","src":"4423:15:23"},{"nativeSrc":"4447:21:23","nodeType":"YulAssignment","src":"4447:21:23","value":{"arguments":[{"name":"dst","nativeSrc":"4458:3:23","nodeType":"YulIdentifier","src":"4458:3:23"},{"kind":"number","nativeSrc":"4463:4:23","nodeType":"YulLiteral","src":"4463:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4454:3:23","nodeType":"YulIdentifier","src":"4454:3:23"},"nativeSrc":"4454:14:23","nodeType":"YulFunctionCall","src":"4454:14:23"},"variableNames":[{"name":"dst","nativeSrc":"4447:3:23","nodeType":"YulIdentifier","src":"4447:3:23"}]},{"nativeSrc":"4477:48:23","nodeType":"YulVariableDeclaration","src":"4477:48:23","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"4499:6:23","nodeType":"YulIdentifier","src":"4499:6:23"},{"arguments":[{"kind":"number","nativeSrc":"4511:1:23","nodeType":"YulLiteral","src":"4511:1:23","type":"","value":"5"},{"name":"_1","nativeSrc":"4514:2:23","nodeType":"YulIdentifier","src":"4514:2:23"}],"functionName":{"name":"shl","nativeSrc":"4507:3:23","nodeType":"YulIdentifier","src":"4507:3:23"},"nativeSrc":"4507:10:23","nodeType":"YulFunctionCall","src":"4507:10:23"}],"functionName":{"name":"add","nativeSrc":"4495:3:23","nodeType":"YulIdentifier","src":"4495:3:23"},"nativeSrc":"4495:23:23","nodeType":"YulFunctionCall","src":"4495:23:23"},{"kind":"number","nativeSrc":"4520:4:23","nodeType":"YulLiteral","src":"4520:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4491:3:23","nodeType":"YulIdentifier","src":"4491:3:23"},"nativeSrc":"4491:34:23","nodeType":"YulFunctionCall","src":"4491:34:23"},"variables":[{"name":"srcEnd","nativeSrc":"4481:6:23","nodeType":"YulTypedName","src":"4481:6:23","type":""}]},{"body":{"nativeSrc":"4553:16:23","nodeType":"YulBlock","src":"4553:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4562:1:23","nodeType":"YulLiteral","src":"4562:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"4565:1:23","nodeType":"YulLiteral","src":"4565:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4555:6:23","nodeType":"YulIdentifier","src":"4555:6:23"},"nativeSrc":"4555:12:23","nodeType":"YulFunctionCall","src":"4555:12:23"},"nativeSrc":"4555:12:23","nodeType":"YulExpressionStatement","src":"4555:12:23"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"4540:6:23","nodeType":"YulIdentifier","src":"4540:6:23"},{"name":"end","nativeSrc":"4548:3:23","nodeType":"YulIdentifier","src":"4548:3:23"}],"functionName":{"name":"gt","nativeSrc":"4537:2:23","nodeType":"YulIdentifier","src":"4537:2:23"},"nativeSrc":"4537:15:23","nodeType":"YulFunctionCall","src":"4537:15:23"},"nativeSrc":"4534:35:23","nodeType":"YulIf","src":"4534:35:23"},{"nativeSrc":"4578:28:23","nodeType":"YulVariableDeclaration","src":"4578:28:23","value":{"arguments":[{"name":"offset","nativeSrc":"4593:6:23","nodeType":"YulIdentifier","src":"4593:6:23"},{"kind":"number","nativeSrc":"4601:4:23","nodeType":"YulLiteral","src":"4601:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4589:3:23","nodeType":"YulIdentifier","src":"4589:3:23"},"nativeSrc":"4589:17:23","nodeType":"YulFunctionCall","src":"4589:17:23"},"variables":[{"name":"src","nativeSrc":"4582:3:23","nodeType":"YulTypedName","src":"4582:3:23","type":""}]},{"body":{"nativeSrc":"4671:86:23","nodeType":"YulBlock","src":"4671:86:23","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"4692:3:23","nodeType":"YulIdentifier","src":"4692:3:23"},{"arguments":[{"name":"src","nativeSrc":"4710:3:23","nodeType":"YulIdentifier","src":"4710:3:23"}],"functionName":{"name":"calldataload","nativeSrc":"4697:12:23","nodeType":"YulIdentifier","src":"4697:12:23"},"nativeSrc":"4697:17:23","nodeType":"YulFunctionCall","src":"4697:17:23"}],"functionName":{"name":"mstore","nativeSrc":"4685:6:23","nodeType":"YulIdentifier","src":"4685:6:23"},"nativeSrc":"4685:30:23","nodeType":"YulFunctionCall","src":"4685:30:23"},"nativeSrc":"4685:30:23","nodeType":"YulExpressionStatement","src":"4685:30:23"},{"nativeSrc":"4728:19:23","nodeType":"YulAssignment","src":"4728:19:23","value":{"arguments":[{"name":"dst","nativeSrc":"4739:3:23","nodeType":"YulIdentifier","src":"4739:3:23"},{"name":"_2","nativeSrc":"4744:2:23","nodeType":"YulIdentifier","src":"4744:2:23"}],"functionName":{"name":"add","nativeSrc":"4735:3:23","nodeType":"YulIdentifier","src":"4735:3:23"},"nativeSrc":"4735:12:23","nodeType":"YulFunctionCall","src":"4735:12:23"},"variableNames":[{"name":"dst","nativeSrc":"4728:3:23","nodeType":"YulIdentifier","src":"4728:3:23"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"4626:3:23","nodeType":"YulIdentifier","src":"4626:3:23"},{"name":"srcEnd","nativeSrc":"4631:6:23","nodeType":"YulIdentifier","src":"4631:6:23"}],"functionName":{"name":"lt","nativeSrc":"4623:2:23","nodeType":"YulIdentifier","src":"4623:2:23"},"nativeSrc":"4623:15:23","nodeType":"YulFunctionCall","src":"4623:15:23"},"nativeSrc":"4615:142:23","nodeType":"YulForLoop","post":{"nativeSrc":"4639:23:23","nodeType":"YulBlock","src":"4639:23:23","statements":[{"nativeSrc":"4641:19:23","nodeType":"YulAssignment","src":"4641:19:23","value":{"arguments":[{"name":"src","nativeSrc":"4652:3:23","nodeType":"YulIdentifier","src":"4652:3:23"},{"name":"_2","nativeSrc":"4657:2:23","nodeType":"YulIdentifier","src":"4657:2:23"}],"functionName":{"name":"add","nativeSrc":"4648:3:23","nodeType":"YulIdentifier","src":"4648:3:23"},"nativeSrc":"4648:12:23","nodeType":"YulFunctionCall","src":"4648:12:23"},"variableNames":[{"name":"src","nativeSrc":"4641:3:23","nodeType":"YulIdentifier","src":"4641:3:23"}]}]},"pre":{"nativeSrc":"4619:3:23","nodeType":"YulBlock","src":"4619:3:23","statements":[]},"src":"4615:142:23"},{"nativeSrc":"4766:14:23","nodeType":"YulAssignment","src":"4766:14:23","value":{"name":"dst_1","nativeSrc":"4775:5:23","nodeType":"YulIdentifier","src":"4775:5:23"},"variableNames":[{"name":"array","nativeSrc":"4766:5:23","nodeType":"YulIdentifier","src":"4766:5:23"}]}]},"name":"abi_decode_array_uint256_dyn","nativeSrc":"4118:668:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"4156:6:23","nodeType":"YulTypedName","src":"4156:6:23","type":""},{"name":"end","nativeSrc":"4164:3:23","nodeType":"YulTypedName","src":"4164:3:23","type":""}],"returnVariables":[{"name":"array","nativeSrc":"4172:5:23","nodeType":"YulTypedName","src":"4172:5:23","type":""}],"src":"4118:668:23"},{"body":{"nativeSrc":"4843:478:23","nodeType":"YulBlock","src":"4843:478:23","statements":[{"body":{"nativeSrc":"4892:16:23","nodeType":"YulBlock","src":"4892:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4901:1:23","nodeType":"YulLiteral","src":"4901:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"4904:1:23","nodeType":"YulLiteral","src":"4904:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4894:6:23","nodeType":"YulIdentifier","src":"4894:6:23"},"nativeSrc":"4894:12:23","nodeType":"YulFunctionCall","src":"4894:12:23"},"nativeSrc":"4894:12:23","nodeType":"YulExpressionStatement","src":"4894:12:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"4871:6:23","nodeType":"YulIdentifier","src":"4871:6:23"},{"kind":"number","nativeSrc":"4879:4:23","nodeType":"YulLiteral","src":"4879:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"4867:3:23","nodeType":"YulIdentifier","src":"4867:3:23"},"nativeSrc":"4867:17:23","nodeType":"YulFunctionCall","src":"4867:17:23"},{"name":"end","nativeSrc":"4886:3:23","nodeType":"YulIdentifier","src":"4886:3:23"}],"functionName":{"name":"slt","nativeSrc":"4863:3:23","nodeType":"YulIdentifier","src":"4863:3:23"},"nativeSrc":"4863:27:23","nodeType":"YulFunctionCall","src":"4863:27:23"}],"functionName":{"name":"iszero","nativeSrc":"4856:6:23","nodeType":"YulIdentifier","src":"4856:6:23"},"nativeSrc":"4856:35:23","nodeType":"YulFunctionCall","src":"4856:35:23"},"nativeSrc":"4853:55:23","nodeType":"YulIf","src":"4853:55:23"},{"nativeSrc":"4917:30:23","nodeType":"YulVariableDeclaration","src":"4917:30:23","value":{"arguments":[{"name":"offset","nativeSrc":"4940:6:23","nodeType":"YulIdentifier","src":"4940:6:23"}],"functionName":{"name":"calldataload","nativeSrc":"4927:12:23","nodeType":"YulIdentifier","src":"4927:12:23"},"nativeSrc":"4927:20:23","nodeType":"YulFunctionCall","src":"4927:20:23"},"variables":[{"name":"_1","nativeSrc":"4921:2:23","nodeType":"YulTypedName","src":"4921:2:23","type":""}]},{"body":{"nativeSrc":"4986:22:23","nodeType":"YulBlock","src":"4986:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"4988:16:23","nodeType":"YulIdentifier","src":"4988:16:23"},"nativeSrc":"4988:18:23","nodeType":"YulFunctionCall","src":"4988:18:23"},"nativeSrc":"4988:18:23","nodeType":"YulExpressionStatement","src":"4988:18:23"}]},"condition":{"arguments":[{"name":"_1","nativeSrc":"4962:2:23","nodeType":"YulIdentifier","src":"4962:2:23"},{"kind":"number","nativeSrc":"4966:18:23","nodeType":"YulLiteral","src":"4966:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4959:2:23","nodeType":"YulIdentifier","src":"4959:2:23"},"nativeSrc":"4959:26:23","nodeType":"YulFunctionCall","src":"4959:26:23"},"nativeSrc":"4956:52:23","nodeType":"YulIf","src":"4956:52:23"},{"nativeSrc":"5017:70:23","nodeType":"YulVariableDeclaration","src":"5017:70:23","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"5060:2:23","nodeType":"YulIdentifier","src":"5060:2:23"},{"kind":"number","nativeSrc":"5064:4:23","nodeType":"YulLiteral","src":"5064:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"5056:3:23","nodeType":"YulIdentifier","src":"5056:3:23"},"nativeSrc":"5056:13:23","nodeType":"YulFunctionCall","src":"5056:13:23"},{"arguments":[{"kind":"number","nativeSrc":"5075:2:23","nodeType":"YulLiteral","src":"5075:2:23","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"5071:3:23","nodeType":"YulIdentifier","src":"5071:3:23"},"nativeSrc":"5071:7:23","nodeType":"YulFunctionCall","src":"5071:7:23"}],"functionName":{"name":"and","nativeSrc":"5052:3:23","nodeType":"YulIdentifier","src":"5052:3:23"},"nativeSrc":"5052:27:23","nodeType":"YulFunctionCall","src":"5052:27:23"},{"kind":"number","nativeSrc":"5081:4:23","nodeType":"YulLiteral","src":"5081:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5048:3:23","nodeType":"YulIdentifier","src":"5048:3:23"},"nativeSrc":"5048:38:23","nodeType":"YulFunctionCall","src":"5048:38:23"}],"functionName":{"name":"allocate_memory","nativeSrc":"5032:15:23","nodeType":"YulIdentifier","src":"5032:15:23"},"nativeSrc":"5032:55:23","nodeType":"YulFunctionCall","src":"5032:55:23"},"variables":[{"name":"array_1","nativeSrc":"5021:7:23","nodeType":"YulTypedName","src":"5021:7:23","type":""}]},{"expression":{"arguments":[{"name":"array_1","nativeSrc":"5103:7:23","nodeType":"YulIdentifier","src":"5103:7:23"},{"name":"_1","nativeSrc":"5112:2:23","nodeType":"YulIdentifier","src":"5112:2:23"}],"functionName":{"name":"mstore","nativeSrc":"5096:6:23","nodeType":"YulIdentifier","src":"5096:6:23"},"nativeSrc":"5096:19:23","nodeType":"YulFunctionCall","src":"5096:19:23"},"nativeSrc":"5096:19:23","nodeType":"YulExpressionStatement","src":"5096:19:23"},{"body":{"nativeSrc":"5163:16:23","nodeType":"YulBlock","src":"5163:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5172:1:23","nodeType":"YulLiteral","src":"5172:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"5175:1:23","nodeType":"YulLiteral","src":"5175:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5165:6:23","nodeType":"YulIdentifier","src":"5165:6:23"},"nativeSrc":"5165:12:23","nodeType":"YulFunctionCall","src":"5165:12:23"},"nativeSrc":"5165:12:23","nodeType":"YulExpressionStatement","src":"5165:12:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"5138:6:23","nodeType":"YulIdentifier","src":"5138:6:23"},{"name":"_1","nativeSrc":"5146:2:23","nodeType":"YulIdentifier","src":"5146:2:23"}],"functionName":{"name":"add","nativeSrc":"5134:3:23","nodeType":"YulIdentifier","src":"5134:3:23"},"nativeSrc":"5134:15:23","nodeType":"YulFunctionCall","src":"5134:15:23"},{"kind":"number","nativeSrc":"5151:4:23","nodeType":"YulLiteral","src":"5151:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5130:3:23","nodeType":"YulIdentifier","src":"5130:3:23"},"nativeSrc":"5130:26:23","nodeType":"YulFunctionCall","src":"5130:26:23"},{"name":"end","nativeSrc":"5158:3:23","nodeType":"YulIdentifier","src":"5158:3:23"}],"functionName":{"name":"gt","nativeSrc":"5127:2:23","nodeType":"YulIdentifier","src":"5127:2:23"},"nativeSrc":"5127:35:23","nodeType":"YulFunctionCall","src":"5127:35:23"},"nativeSrc":"5124:55:23","nodeType":"YulIf","src":"5124:55:23"},{"expression":{"arguments":[{"arguments":[{"name":"array_1","nativeSrc":"5205:7:23","nodeType":"YulIdentifier","src":"5205:7:23"},{"kind":"number","nativeSrc":"5214:4:23","nodeType":"YulLiteral","src":"5214:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5201:3:23","nodeType":"YulIdentifier","src":"5201:3:23"},"nativeSrc":"5201:18:23","nodeType":"YulFunctionCall","src":"5201:18:23"},{"arguments":[{"name":"offset","nativeSrc":"5225:6:23","nodeType":"YulIdentifier","src":"5225:6:23"},{"kind":"number","nativeSrc":"5233:4:23","nodeType":"YulLiteral","src":"5233:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5221:3:23","nodeType":"YulIdentifier","src":"5221:3:23"},"nativeSrc":"5221:17:23","nodeType":"YulFunctionCall","src":"5221:17:23"},{"name":"_1","nativeSrc":"5240:2:23","nodeType":"YulIdentifier","src":"5240:2:23"}],"functionName":{"name":"calldatacopy","nativeSrc":"5188:12:23","nodeType":"YulIdentifier","src":"5188:12:23"},"nativeSrc":"5188:55:23","nodeType":"YulFunctionCall","src":"5188:55:23"},"nativeSrc":"5188:55:23","nodeType":"YulExpressionStatement","src":"5188:55:23"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nativeSrc":"5267:7:23","nodeType":"YulIdentifier","src":"5267:7:23"},{"name":"_1","nativeSrc":"5276:2:23","nodeType":"YulIdentifier","src":"5276:2:23"}],"functionName":{"name":"add","nativeSrc":"5263:3:23","nodeType":"YulIdentifier","src":"5263:3:23"},"nativeSrc":"5263:16:23","nodeType":"YulFunctionCall","src":"5263:16:23"},{"kind":"number","nativeSrc":"5281:4:23","nodeType":"YulLiteral","src":"5281:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5259:3:23","nodeType":"YulIdentifier","src":"5259:3:23"},"nativeSrc":"5259:27:23","nodeType":"YulFunctionCall","src":"5259:27:23"},{"kind":"number","nativeSrc":"5288:1:23","nodeType":"YulLiteral","src":"5288:1:23","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"5252:6:23","nodeType":"YulIdentifier","src":"5252:6:23"},"nativeSrc":"5252:38:23","nodeType":"YulFunctionCall","src":"5252:38:23"},"nativeSrc":"5252:38:23","nodeType":"YulExpressionStatement","src":"5252:38:23"},{"nativeSrc":"5299:16:23","nodeType":"YulAssignment","src":"5299:16:23","value":{"name":"array_1","nativeSrc":"5308:7:23","nodeType":"YulIdentifier","src":"5308:7:23"},"variableNames":[{"name":"array","nativeSrc":"5299:5:23","nodeType":"YulIdentifier","src":"5299:5:23"}]}]},"name":"abi_decode_bytes","nativeSrc":"4791:530:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"4817:6:23","nodeType":"YulTypedName","src":"4817:6:23","type":""},{"name":"end","nativeSrc":"4825:3:23","nodeType":"YulTypedName","src":"4825:3:23","type":""}],"returnVariables":[{"name":"array","nativeSrc":"4833:5:23","nodeType":"YulTypedName","src":"4833:5:23","type":""}],"src":"4791:530:23"},{"body":{"nativeSrc":"5523:746:23","nodeType":"YulBlock","src":"5523:746:23","statements":[{"body":{"nativeSrc":"5570:16:23","nodeType":"YulBlock","src":"5570:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5579:1:23","nodeType":"YulLiteral","src":"5579:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"5582:1:23","nodeType":"YulLiteral","src":"5582:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5572:6:23","nodeType":"YulIdentifier","src":"5572:6:23"},"nativeSrc":"5572:12:23","nodeType":"YulFunctionCall","src":"5572:12:23"},"nativeSrc":"5572:12:23","nodeType":"YulExpressionStatement","src":"5572:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5544:7:23","nodeType":"YulIdentifier","src":"5544:7:23"},{"name":"headStart","nativeSrc":"5553:9:23","nodeType":"YulIdentifier","src":"5553:9:23"}],"functionName":{"name":"sub","nativeSrc":"5540:3:23","nodeType":"YulIdentifier","src":"5540:3:23"},"nativeSrc":"5540:23:23","nodeType":"YulFunctionCall","src":"5540:23:23"},{"kind":"number","nativeSrc":"5565:3:23","nodeType":"YulLiteral","src":"5565:3:23","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"5536:3:23","nodeType":"YulIdentifier","src":"5536:3:23"},"nativeSrc":"5536:33:23","nodeType":"YulFunctionCall","src":"5536:33:23"},"nativeSrc":"5533:53:23","nodeType":"YulIf","src":"5533:53:23"},{"nativeSrc":"5595:39:23","nodeType":"YulAssignment","src":"5595:39:23","value":{"arguments":[{"name":"headStart","nativeSrc":"5624:9:23","nodeType":"YulIdentifier","src":"5624:9:23"}],"functionName":{"name":"abi_decode_address","nativeSrc":"5605:18:23","nodeType":"YulIdentifier","src":"5605:18:23"},"nativeSrc":"5605:29:23","nodeType":"YulFunctionCall","src":"5605:29:23"},"variableNames":[{"name":"value0","nativeSrc":"5595:6:23","nodeType":"YulIdentifier","src":"5595:6:23"}]},{"nativeSrc":"5643:48:23","nodeType":"YulAssignment","src":"5643:48:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5676:9:23","nodeType":"YulIdentifier","src":"5676:9:23"},{"kind":"number","nativeSrc":"5687:2:23","nodeType":"YulLiteral","src":"5687:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5672:3:23","nodeType":"YulIdentifier","src":"5672:3:23"},"nativeSrc":"5672:18:23","nodeType":"YulFunctionCall","src":"5672:18:23"}],"functionName":{"name":"abi_decode_address","nativeSrc":"5653:18:23","nodeType":"YulIdentifier","src":"5653:18:23"},"nativeSrc":"5653:38:23","nodeType":"YulFunctionCall","src":"5653:38:23"},"variableNames":[{"name":"value1","nativeSrc":"5643:6:23","nodeType":"YulIdentifier","src":"5643:6:23"}]},{"nativeSrc":"5700:46:23","nodeType":"YulVariableDeclaration","src":"5700:46:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5731:9:23","nodeType":"YulIdentifier","src":"5731:9:23"},{"kind":"number","nativeSrc":"5742:2:23","nodeType":"YulLiteral","src":"5742:2:23","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5727:3:23","nodeType":"YulIdentifier","src":"5727:3:23"},"nativeSrc":"5727:18:23","nodeType":"YulFunctionCall","src":"5727:18:23"}],"functionName":{"name":"calldataload","nativeSrc":"5714:12:23","nodeType":"YulIdentifier","src":"5714:12:23"},"nativeSrc":"5714:32:23","nodeType":"YulFunctionCall","src":"5714:32:23"},"variables":[{"name":"offset","nativeSrc":"5704:6:23","nodeType":"YulTypedName","src":"5704:6:23","type":""}]},{"nativeSrc":"5755:28:23","nodeType":"YulVariableDeclaration","src":"5755:28:23","value":{"kind":"number","nativeSrc":"5765:18:23","nodeType":"YulLiteral","src":"5765:18:23","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"5759:2:23","nodeType":"YulTypedName","src":"5759:2:23","type":""}]},{"body":{"nativeSrc":"5810:16:23","nodeType":"YulBlock","src":"5810:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5819:1:23","nodeType":"YulLiteral","src":"5819:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"5822:1:23","nodeType":"YulLiteral","src":"5822:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5812:6:23","nodeType":"YulIdentifier","src":"5812:6:23"},"nativeSrc":"5812:12:23","nodeType":"YulFunctionCall","src":"5812:12:23"},"nativeSrc":"5812:12:23","nodeType":"YulExpressionStatement","src":"5812:12:23"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"5798:6:23","nodeType":"YulIdentifier","src":"5798:6:23"},{"name":"_1","nativeSrc":"5806:2:23","nodeType":"YulIdentifier","src":"5806:2:23"}],"functionName":{"name":"gt","nativeSrc":"5795:2:23","nodeType":"YulIdentifier","src":"5795:2:23"},"nativeSrc":"5795:14:23","nodeType":"YulFunctionCall","src":"5795:14:23"},"nativeSrc":"5792:34:23","nodeType":"YulIf","src":"5792:34:23"},{"nativeSrc":"5835:71:23","nodeType":"YulAssignment","src":"5835:71:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5878:9:23","nodeType":"YulIdentifier","src":"5878:9:23"},{"name":"offset","nativeSrc":"5889:6:23","nodeType":"YulIdentifier","src":"5889:6:23"}],"functionName":{"name":"add","nativeSrc":"5874:3:23","nodeType":"YulIdentifier","src":"5874:3:23"},"nativeSrc":"5874:22:23","nodeType":"YulFunctionCall","src":"5874:22:23"},{"name":"dataEnd","nativeSrc":"5898:7:23","nodeType":"YulIdentifier","src":"5898:7:23"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nativeSrc":"5845:28:23","nodeType":"YulIdentifier","src":"5845:28:23"},"nativeSrc":"5845:61:23","nodeType":"YulFunctionCall","src":"5845:61:23"},"variableNames":[{"name":"value2","nativeSrc":"5835:6:23","nodeType":"YulIdentifier","src":"5835:6:23"}]},{"nativeSrc":"5915:48:23","nodeType":"YulVariableDeclaration","src":"5915:48:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5948:9:23","nodeType":"YulIdentifier","src":"5948:9:23"},{"kind":"number","nativeSrc":"5959:2:23","nodeType":"YulLiteral","src":"5959:2:23","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5944:3:23","nodeType":"YulIdentifier","src":"5944:3:23"},"nativeSrc":"5944:18:23","nodeType":"YulFunctionCall","src":"5944:18:23"}],"functionName":{"name":"calldataload","nativeSrc":"5931:12:23","nodeType":"YulIdentifier","src":"5931:12:23"},"nativeSrc":"5931:32:23","nodeType":"YulFunctionCall","src":"5931:32:23"},"variables":[{"name":"offset_1","nativeSrc":"5919:8:23","nodeType":"YulTypedName","src":"5919:8:23","type":""}]},{"body":{"nativeSrc":"5992:16:23","nodeType":"YulBlock","src":"5992:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6001:1:23","nodeType":"YulLiteral","src":"6001:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"6004:1:23","nodeType":"YulLiteral","src":"6004:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5994:6:23","nodeType":"YulIdentifier","src":"5994:6:23"},"nativeSrc":"5994:12:23","nodeType":"YulFunctionCall","src":"5994:12:23"},"nativeSrc":"5994:12:23","nodeType":"YulExpressionStatement","src":"5994:12:23"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"5978:8:23","nodeType":"YulIdentifier","src":"5978:8:23"},{"name":"_1","nativeSrc":"5988:2:23","nodeType":"YulIdentifier","src":"5988:2:23"}],"functionName":{"name":"gt","nativeSrc":"5975:2:23","nodeType":"YulIdentifier","src":"5975:2:23"},"nativeSrc":"5975:16:23","nodeType":"YulFunctionCall","src":"5975:16:23"},"nativeSrc":"5972:36:23","nodeType":"YulIf","src":"5972:36:23"},{"nativeSrc":"6017:73:23","nodeType":"YulAssignment","src":"6017:73:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6060:9:23","nodeType":"YulIdentifier","src":"6060:9:23"},{"name":"offset_1","nativeSrc":"6071:8:23","nodeType":"YulIdentifier","src":"6071:8:23"}],"functionName":{"name":"add","nativeSrc":"6056:3:23","nodeType":"YulIdentifier","src":"6056:3:23"},"nativeSrc":"6056:24:23","nodeType":"YulFunctionCall","src":"6056:24:23"},{"name":"dataEnd","nativeSrc":"6082:7:23","nodeType":"YulIdentifier","src":"6082:7:23"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nativeSrc":"6027:28:23","nodeType":"YulIdentifier","src":"6027:28:23"},"nativeSrc":"6027:63:23","nodeType":"YulFunctionCall","src":"6027:63:23"},"variableNames":[{"name":"value3","nativeSrc":"6017:6:23","nodeType":"YulIdentifier","src":"6017:6:23"}]},{"nativeSrc":"6099:49:23","nodeType":"YulVariableDeclaration","src":"6099:49:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6132:9:23","nodeType":"YulIdentifier","src":"6132:9:23"},{"kind":"number","nativeSrc":"6143:3:23","nodeType":"YulLiteral","src":"6143:3:23","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"6128:3:23","nodeType":"YulIdentifier","src":"6128:3:23"},"nativeSrc":"6128:19:23","nodeType":"YulFunctionCall","src":"6128:19:23"}],"functionName":{"name":"calldataload","nativeSrc":"6115:12:23","nodeType":"YulIdentifier","src":"6115:12:23"},"nativeSrc":"6115:33:23","nodeType":"YulFunctionCall","src":"6115:33:23"},"variables":[{"name":"offset_2","nativeSrc":"6103:8:23","nodeType":"YulTypedName","src":"6103:8:23","type":""}]},{"body":{"nativeSrc":"6177:16:23","nodeType":"YulBlock","src":"6177:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6186:1:23","nodeType":"YulLiteral","src":"6186:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"6189:1:23","nodeType":"YulLiteral","src":"6189:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6179:6:23","nodeType":"YulIdentifier","src":"6179:6:23"},"nativeSrc":"6179:12:23","nodeType":"YulFunctionCall","src":"6179:12:23"},"nativeSrc":"6179:12:23","nodeType":"YulExpressionStatement","src":"6179:12:23"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"6163:8:23","nodeType":"YulIdentifier","src":"6163:8:23"},{"name":"_1","nativeSrc":"6173:2:23","nodeType":"YulIdentifier","src":"6173:2:23"}],"functionName":{"name":"gt","nativeSrc":"6160:2:23","nodeType":"YulIdentifier","src":"6160:2:23"},"nativeSrc":"6160:16:23","nodeType":"YulFunctionCall","src":"6160:16:23"},"nativeSrc":"6157:36:23","nodeType":"YulIf","src":"6157:36:23"},{"nativeSrc":"6202:61:23","nodeType":"YulAssignment","src":"6202:61:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6233:9:23","nodeType":"YulIdentifier","src":"6233:9:23"},{"name":"offset_2","nativeSrc":"6244:8:23","nodeType":"YulIdentifier","src":"6244:8:23"}],"functionName":{"name":"add","nativeSrc":"6229:3:23","nodeType":"YulIdentifier","src":"6229:3:23"},"nativeSrc":"6229:24:23","nodeType":"YulFunctionCall","src":"6229:24:23"},{"name":"dataEnd","nativeSrc":"6255:7:23","nodeType":"YulIdentifier","src":"6255:7:23"}],"functionName":{"name":"abi_decode_bytes","nativeSrc":"6212:16:23","nodeType":"YulIdentifier","src":"6212:16:23"},"nativeSrc":"6212:51:23","nodeType":"YulFunctionCall","src":"6212:51:23"},"variableNames":[{"name":"value4","nativeSrc":"6202:6:23","nodeType":"YulIdentifier","src":"6202:6:23"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr","nativeSrc":"5326:943:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5457:9:23","nodeType":"YulTypedName","src":"5457:9:23","type":""},{"name":"dataEnd","nativeSrc":"5468:7:23","nodeType":"YulTypedName","src":"5468:7:23","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5480:6:23","nodeType":"YulTypedName","src":"5480:6:23","type":""},{"name":"value1","nativeSrc":"5488:6:23","nodeType":"YulTypedName","src":"5488:6:23","type":""},{"name":"value2","nativeSrc":"5496:6:23","nodeType":"YulTypedName","src":"5496:6:23","type":""},{"name":"value3","nativeSrc":"5504:6:23","nodeType":"YulTypedName","src":"5504:6:23","type":""},{"name":"value4","nativeSrc":"5512:6:23","nodeType":"YulTypedName","src":"5512:6:23","type":""}],"src":"5326:943:23"},{"body":{"nativeSrc":"6344:116:23","nodeType":"YulBlock","src":"6344:116:23","statements":[{"body":{"nativeSrc":"6390:16:23","nodeType":"YulBlock","src":"6390:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6399:1:23","nodeType":"YulLiteral","src":"6399:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"6402:1:23","nodeType":"YulLiteral","src":"6402:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6392:6:23","nodeType":"YulIdentifier","src":"6392:6:23"},"nativeSrc":"6392:12:23","nodeType":"YulFunctionCall","src":"6392:12:23"},"nativeSrc":"6392:12:23","nodeType":"YulExpressionStatement","src":"6392:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6365:7:23","nodeType":"YulIdentifier","src":"6365:7:23"},{"name":"headStart","nativeSrc":"6374:9:23","nodeType":"YulIdentifier","src":"6374:9:23"}],"functionName":{"name":"sub","nativeSrc":"6361:3:23","nodeType":"YulIdentifier","src":"6361:3:23"},"nativeSrc":"6361:23:23","nodeType":"YulFunctionCall","src":"6361:23:23"},{"kind":"number","nativeSrc":"6386:2:23","nodeType":"YulLiteral","src":"6386:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"6357:3:23","nodeType":"YulIdentifier","src":"6357:3:23"},"nativeSrc":"6357:32:23","nodeType":"YulFunctionCall","src":"6357:32:23"},"nativeSrc":"6354:52:23","nodeType":"YulIf","src":"6354:52:23"},{"nativeSrc":"6415:39:23","nodeType":"YulAssignment","src":"6415:39:23","value":{"arguments":[{"name":"headStart","nativeSrc":"6444:9:23","nodeType":"YulIdentifier","src":"6444:9:23"}],"functionName":{"name":"abi_decode_address","nativeSrc":"6425:18:23","nodeType":"YulIdentifier","src":"6425:18:23"},"nativeSrc":"6425:29:23","nodeType":"YulFunctionCall","src":"6425:29:23"},"variableNames":[{"name":"value0","nativeSrc":"6415:6:23","nodeType":"YulIdentifier","src":"6415:6:23"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"6274:186:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6310:9:23","nodeType":"YulTypedName","src":"6310:9:23","type":""},{"name":"dataEnd","nativeSrc":"6321:7:23","nodeType":"YulTypedName","src":"6321:7:23","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6333:6:23","nodeType":"YulTypedName","src":"6333:6:23","type":""}],"src":"6274:186:23"},{"body":{"nativeSrc":"6509:85:23","nodeType":"YulBlock","src":"6509:85:23","statements":[{"body":{"nativeSrc":"6572:16:23","nodeType":"YulBlock","src":"6572:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6581:1:23","nodeType":"YulLiteral","src":"6581:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"6584:1:23","nodeType":"YulLiteral","src":"6584:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6574:6:23","nodeType":"YulIdentifier","src":"6574:6:23"},"nativeSrc":"6574:12:23","nodeType":"YulFunctionCall","src":"6574:12:23"},"nativeSrc":"6574:12:23","nodeType":"YulExpressionStatement","src":"6574:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6532:5:23","nodeType":"YulIdentifier","src":"6532:5:23"},{"arguments":[{"name":"value","nativeSrc":"6543:5:23","nodeType":"YulIdentifier","src":"6543:5:23"},{"kind":"number","nativeSrc":"6550:18:23","nodeType":"YulLiteral","src":"6550:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6539:3:23","nodeType":"YulIdentifier","src":"6539:3:23"},"nativeSrc":"6539:30:23","nodeType":"YulFunctionCall","src":"6539:30:23"}],"functionName":{"name":"eq","nativeSrc":"6529:2:23","nodeType":"YulIdentifier","src":"6529:2:23"},"nativeSrc":"6529:41:23","nodeType":"YulFunctionCall","src":"6529:41:23"}],"functionName":{"name":"iszero","nativeSrc":"6522:6:23","nodeType":"YulIdentifier","src":"6522:6:23"},"nativeSrc":"6522:49:23","nodeType":"YulFunctionCall","src":"6522:49:23"},"nativeSrc":"6519:69:23","nodeType":"YulIf","src":"6519:69:23"}]},"name":"validator_revert_uint64","nativeSrc":"6465:129:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6498:5:23","nodeType":"YulTypedName","src":"6498:5:23","type":""}],"src":"6465:129:23"},{"body":{"nativeSrc":"6712:409:23","nodeType":"YulBlock","src":"6712:409:23","statements":[{"body":{"nativeSrc":"6758:16:23","nodeType":"YulBlock","src":"6758:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6767:1:23","nodeType":"YulLiteral","src":"6767:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"6770:1:23","nodeType":"YulLiteral","src":"6770:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6760:6:23","nodeType":"YulIdentifier","src":"6760:6:23"},"nativeSrc":"6760:12:23","nodeType":"YulFunctionCall","src":"6760:12:23"},"nativeSrc":"6760:12:23","nodeType":"YulExpressionStatement","src":"6760:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6733:7:23","nodeType":"YulIdentifier","src":"6733:7:23"},{"name":"headStart","nativeSrc":"6742:9:23","nodeType":"YulIdentifier","src":"6742:9:23"}],"functionName":{"name":"sub","nativeSrc":"6729:3:23","nodeType":"YulIdentifier","src":"6729:3:23"},"nativeSrc":"6729:23:23","nodeType":"YulFunctionCall","src":"6729:23:23"},{"kind":"number","nativeSrc":"6754:2:23","nodeType":"YulLiteral","src":"6754:2:23","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"6725:3:23","nodeType":"YulIdentifier","src":"6725:3:23"},"nativeSrc":"6725:32:23","nodeType":"YulFunctionCall","src":"6725:32:23"},"nativeSrc":"6722:52:23","nodeType":"YulIf","src":"6722:52:23"},{"nativeSrc":"6783:33:23","nodeType":"YulAssignment","src":"6783:33:23","value":{"arguments":[{"name":"headStart","nativeSrc":"6806:9:23","nodeType":"YulIdentifier","src":"6806:9:23"}],"functionName":{"name":"calldataload","nativeSrc":"6793:12:23","nodeType":"YulIdentifier","src":"6793:12:23"},"nativeSrc":"6793:23:23","nodeType":"YulFunctionCall","src":"6793:23:23"},"variableNames":[{"name":"value0","nativeSrc":"6783:6:23","nodeType":"YulIdentifier","src":"6783:6:23"}]},{"nativeSrc":"6825:46:23","nodeType":"YulVariableDeclaration","src":"6825:46:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6856:9:23","nodeType":"YulIdentifier","src":"6856:9:23"},{"kind":"number","nativeSrc":"6867:2:23","nodeType":"YulLiteral","src":"6867:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6852:3:23","nodeType":"YulIdentifier","src":"6852:3:23"},"nativeSrc":"6852:18:23","nodeType":"YulFunctionCall","src":"6852:18:23"}],"functionName":{"name":"calldataload","nativeSrc":"6839:12:23","nodeType":"YulIdentifier","src":"6839:12:23"},"nativeSrc":"6839:32:23","nodeType":"YulFunctionCall","src":"6839:32:23"},"variables":[{"name":"offset","nativeSrc":"6829:6:23","nodeType":"YulTypedName","src":"6829:6:23","type":""}]},{"body":{"nativeSrc":"6914:16:23","nodeType":"YulBlock","src":"6914:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6923:1:23","nodeType":"YulLiteral","src":"6923:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"6926:1:23","nodeType":"YulLiteral","src":"6926:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6916:6:23","nodeType":"YulIdentifier","src":"6916:6:23"},"nativeSrc":"6916:12:23","nodeType":"YulFunctionCall","src":"6916:12:23"},"nativeSrc":"6916:12:23","nodeType":"YulExpressionStatement","src":"6916:12:23"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"6886:6:23","nodeType":"YulIdentifier","src":"6886:6:23"},{"kind":"number","nativeSrc":"6894:18:23","nodeType":"YulLiteral","src":"6894:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"6883:2:23","nodeType":"YulIdentifier","src":"6883:2:23"},"nativeSrc":"6883:30:23","nodeType":"YulFunctionCall","src":"6883:30:23"},"nativeSrc":"6880:50:23","nodeType":"YulIf","src":"6880:50:23"},{"nativeSrc":"6939:59:23","nodeType":"YulAssignment","src":"6939:59:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6970:9:23","nodeType":"YulIdentifier","src":"6970:9:23"},{"name":"offset","nativeSrc":"6981:6:23","nodeType":"YulIdentifier","src":"6981:6:23"}],"functionName":{"name":"add","nativeSrc":"6966:3:23","nodeType":"YulIdentifier","src":"6966:3:23"},"nativeSrc":"6966:22:23","nodeType":"YulFunctionCall","src":"6966:22:23"},{"name":"dataEnd","nativeSrc":"6990:7:23","nodeType":"YulIdentifier","src":"6990:7:23"}],"functionName":{"name":"abi_decode_bytes","nativeSrc":"6949:16:23","nodeType":"YulIdentifier","src":"6949:16:23"},"nativeSrc":"6949:49:23","nodeType":"YulFunctionCall","src":"6949:49:23"},"variableNames":[{"name":"value1","nativeSrc":"6939:6:23","nodeType":"YulIdentifier","src":"6939:6:23"}]},{"nativeSrc":"7007:45:23","nodeType":"YulVariableDeclaration","src":"7007:45:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7037:9:23","nodeType":"YulIdentifier","src":"7037:9:23"},{"kind":"number","nativeSrc":"7048:2:23","nodeType":"YulLiteral","src":"7048:2:23","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7033:3:23","nodeType":"YulIdentifier","src":"7033:3:23"},"nativeSrc":"7033:18:23","nodeType":"YulFunctionCall","src":"7033:18:23"}],"functionName":{"name":"calldataload","nativeSrc":"7020:12:23","nodeType":"YulIdentifier","src":"7020:12:23"},"nativeSrc":"7020:32:23","nodeType":"YulFunctionCall","src":"7020:32:23"},"variables":[{"name":"value","nativeSrc":"7011:5:23","nodeType":"YulTypedName","src":"7011:5:23","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"7085:5:23","nodeType":"YulIdentifier","src":"7085:5:23"}],"functionName":{"name":"validator_revert_uint64","nativeSrc":"7061:23:23","nodeType":"YulIdentifier","src":"7061:23:23"},"nativeSrc":"7061:30:23","nodeType":"YulFunctionCall","src":"7061:30:23"},"nativeSrc":"7061:30:23","nodeType":"YulExpressionStatement","src":"7061:30:23"},{"nativeSrc":"7100:15:23","nodeType":"YulAssignment","src":"7100:15:23","value":{"name":"value","nativeSrc":"7110:5:23","nodeType":"YulIdentifier","src":"7110:5:23"},"variableNames":[{"name":"value2","nativeSrc":"7100:6:23","nodeType":"YulIdentifier","src":"7100:6:23"}]}]},"name":"abi_decode_tuple_t_uint256t_string_memory_ptrt_uint64","nativeSrc":"6599:522:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6662:9:23","nodeType":"YulTypedName","src":"6662:9:23","type":""},{"name":"dataEnd","nativeSrc":"6673:7:23","nodeType":"YulTypedName","src":"6673:7:23","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6685:6:23","nodeType":"YulTypedName","src":"6685:6:23","type":""},{"name":"value1","nativeSrc":"6693:6:23","nodeType":"YulTypedName","src":"6693:6:23","type":""},{"name":"value2","nativeSrc":"6701:6:23","nodeType":"YulTypedName","src":"6701:6:23","type":""}],"src":"6599:522:23"},{"body":{"nativeSrc":"7263:1009:23","nodeType":"YulBlock","src":"7263:1009:23","statements":[{"body":{"nativeSrc":"7309:16:23","nodeType":"YulBlock","src":"7309:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7318:1:23","nodeType":"YulLiteral","src":"7318:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"7321:1:23","nodeType":"YulLiteral","src":"7321:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7311:6:23","nodeType":"YulIdentifier","src":"7311:6:23"},"nativeSrc":"7311:12:23","nodeType":"YulFunctionCall","src":"7311:12:23"},"nativeSrc":"7311:12:23","nodeType":"YulExpressionStatement","src":"7311:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7284:7:23","nodeType":"YulIdentifier","src":"7284:7:23"},{"name":"headStart","nativeSrc":"7293:9:23","nodeType":"YulIdentifier","src":"7293:9:23"}],"functionName":{"name":"sub","nativeSrc":"7280:3:23","nodeType":"YulIdentifier","src":"7280:3:23"},"nativeSrc":"7280:23:23","nodeType":"YulFunctionCall","src":"7280:23:23"},{"kind":"number","nativeSrc":"7305:2:23","nodeType":"YulLiteral","src":"7305:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"7276:3:23","nodeType":"YulIdentifier","src":"7276:3:23"},"nativeSrc":"7276:32:23","nodeType":"YulFunctionCall","src":"7276:32:23"},"nativeSrc":"7273:52:23","nodeType":"YulIf","src":"7273:52:23"},{"nativeSrc":"7334:37:23","nodeType":"YulVariableDeclaration","src":"7334:37:23","value":{"arguments":[{"name":"headStart","nativeSrc":"7361:9:23","nodeType":"YulIdentifier","src":"7361:9:23"}],"functionName":{"name":"calldataload","nativeSrc":"7348:12:23","nodeType":"YulIdentifier","src":"7348:12:23"},"nativeSrc":"7348:23:23","nodeType":"YulFunctionCall","src":"7348:23:23"},"variables":[{"name":"offset","nativeSrc":"7338:6:23","nodeType":"YulTypedName","src":"7338:6:23","type":""}]},{"nativeSrc":"7380:28:23","nodeType":"YulVariableDeclaration","src":"7380:28:23","value":{"kind":"number","nativeSrc":"7390:18:23","nodeType":"YulLiteral","src":"7390:18:23","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"7384:2:23","nodeType":"YulTypedName","src":"7384:2:23","type":""}]},{"body":{"nativeSrc":"7435:16:23","nodeType":"YulBlock","src":"7435:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7444:1:23","nodeType":"YulLiteral","src":"7444:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"7447:1:23","nodeType":"YulLiteral","src":"7447:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7437:6:23","nodeType":"YulIdentifier","src":"7437:6:23"},"nativeSrc":"7437:12:23","nodeType":"YulFunctionCall","src":"7437:12:23"},"nativeSrc":"7437:12:23","nodeType":"YulExpressionStatement","src":"7437:12:23"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"7423:6:23","nodeType":"YulIdentifier","src":"7423:6:23"},{"name":"_1","nativeSrc":"7431:2:23","nodeType":"YulIdentifier","src":"7431:2:23"}],"functionName":{"name":"gt","nativeSrc":"7420:2:23","nodeType":"YulIdentifier","src":"7420:2:23"},"nativeSrc":"7420:14:23","nodeType":"YulFunctionCall","src":"7420:14:23"},"nativeSrc":"7417:34:23","nodeType":"YulIf","src":"7417:34:23"},{"nativeSrc":"7460:32:23","nodeType":"YulVariableDeclaration","src":"7460:32:23","value":{"arguments":[{"name":"headStart","nativeSrc":"7474:9:23","nodeType":"YulIdentifier","src":"7474:9:23"},{"name":"offset","nativeSrc":"7485:6:23","nodeType":"YulIdentifier","src":"7485:6:23"}],"functionName":{"name":"add","nativeSrc":"7470:3:23","nodeType":"YulIdentifier","src":"7470:3:23"},"nativeSrc":"7470:22:23","nodeType":"YulFunctionCall","src":"7470:22:23"},"variables":[{"name":"_2","nativeSrc":"7464:2:23","nodeType":"YulTypedName","src":"7464:2:23","type":""}]},{"body":{"nativeSrc":"7540:16:23","nodeType":"YulBlock","src":"7540:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7549:1:23","nodeType":"YulLiteral","src":"7549:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"7552:1:23","nodeType":"YulLiteral","src":"7552:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7542:6:23","nodeType":"YulIdentifier","src":"7542:6:23"},"nativeSrc":"7542:12:23","nodeType":"YulFunctionCall","src":"7542:12:23"},"nativeSrc":"7542:12:23","nodeType":"YulExpressionStatement","src":"7542:12:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"7519:2:23","nodeType":"YulIdentifier","src":"7519:2:23"},{"kind":"number","nativeSrc":"7523:4:23","nodeType":"YulLiteral","src":"7523:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"7515:3:23","nodeType":"YulIdentifier","src":"7515:3:23"},"nativeSrc":"7515:13:23","nodeType":"YulFunctionCall","src":"7515:13:23"},{"name":"dataEnd","nativeSrc":"7530:7:23","nodeType":"YulIdentifier","src":"7530:7:23"}],"functionName":{"name":"slt","nativeSrc":"7511:3:23","nodeType":"YulIdentifier","src":"7511:3:23"},"nativeSrc":"7511:27:23","nodeType":"YulFunctionCall","src":"7511:27:23"}],"functionName":{"name":"iszero","nativeSrc":"7504:6:23","nodeType":"YulIdentifier","src":"7504:6:23"},"nativeSrc":"7504:35:23","nodeType":"YulFunctionCall","src":"7504:35:23"},"nativeSrc":"7501:55:23","nodeType":"YulIf","src":"7501:55:23"},{"nativeSrc":"7565:26:23","nodeType":"YulVariableDeclaration","src":"7565:26:23","value":{"arguments":[{"name":"_2","nativeSrc":"7588:2:23","nodeType":"YulIdentifier","src":"7588:2:23"}],"functionName":{"name":"calldataload","nativeSrc":"7575:12:23","nodeType":"YulIdentifier","src":"7575:12:23"},"nativeSrc":"7575:16:23","nodeType":"YulFunctionCall","src":"7575:16:23"},"variables":[{"name":"_3","nativeSrc":"7569:2:23","nodeType":"YulTypedName","src":"7569:2:23","type":""}]},{"nativeSrc":"7600:14:23","nodeType":"YulVariableDeclaration","src":"7600:14:23","value":{"kind":"number","nativeSrc":"7610:4:23","nodeType":"YulLiteral","src":"7610:4:23","type":"","value":"0x20"},"variables":[{"name":"_4","nativeSrc":"7604:2:23","nodeType":"YulTypedName","src":"7604:2:23","type":""}]},{"nativeSrc":"7623:71:23","nodeType":"YulVariableDeclaration","src":"7623:71:23","value":{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"7690:2:23","nodeType":"YulIdentifier","src":"7690:2:23"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nativeSrc":"7650:39:23","nodeType":"YulIdentifier","src":"7650:39:23"},"nativeSrc":"7650:43:23","nodeType":"YulFunctionCall","src":"7650:43:23"}],"functionName":{"name":"allocate_memory","nativeSrc":"7634:15:23","nodeType":"YulIdentifier","src":"7634:15:23"},"nativeSrc":"7634:60:23","nodeType":"YulFunctionCall","src":"7634:60:23"},"variables":[{"name":"dst","nativeSrc":"7627:3:23","nodeType":"YulTypedName","src":"7627:3:23","type":""}]},{"nativeSrc":"7703:16:23","nodeType":"YulVariableDeclaration","src":"7703:16:23","value":{"name":"dst","nativeSrc":"7716:3:23","nodeType":"YulIdentifier","src":"7716:3:23"},"variables":[{"name":"dst_1","nativeSrc":"7707:5:23","nodeType":"YulTypedName","src":"7707:5:23","type":""}]},{"expression":{"arguments":[{"name":"dst","nativeSrc":"7735:3:23","nodeType":"YulIdentifier","src":"7735:3:23"},{"name":"_3","nativeSrc":"7740:2:23","nodeType":"YulIdentifier","src":"7740:2:23"}],"functionName":{"name":"mstore","nativeSrc":"7728:6:23","nodeType":"YulIdentifier","src":"7728:6:23"},"nativeSrc":"7728:15:23","nodeType":"YulFunctionCall","src":"7728:15:23"},"nativeSrc":"7728:15:23","nodeType":"YulExpressionStatement","src":"7728:15:23"},{"nativeSrc":"7752:19:23","nodeType":"YulAssignment","src":"7752:19:23","value":{"arguments":[{"name":"dst","nativeSrc":"7763:3:23","nodeType":"YulIdentifier","src":"7763:3:23"},{"name":"_4","nativeSrc":"7768:2:23","nodeType":"YulIdentifier","src":"7768:2:23"}],"functionName":{"name":"add","nativeSrc":"7759:3:23","nodeType":"YulIdentifier","src":"7759:3:23"},"nativeSrc":"7759:12:23","nodeType":"YulFunctionCall","src":"7759:12:23"},"variableNames":[{"name":"dst","nativeSrc":"7752:3:23","nodeType":"YulIdentifier","src":"7752:3:23"}]},{"nativeSrc":"7780:42:23","nodeType":"YulVariableDeclaration","src":"7780:42:23","value":{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"7802:2:23","nodeType":"YulIdentifier","src":"7802:2:23"},{"arguments":[{"kind":"number","nativeSrc":"7810:1:23","nodeType":"YulLiteral","src":"7810:1:23","type":"","value":"5"},{"name":"_3","nativeSrc":"7813:2:23","nodeType":"YulIdentifier","src":"7813:2:23"}],"functionName":{"name":"shl","nativeSrc":"7806:3:23","nodeType":"YulIdentifier","src":"7806:3:23"},"nativeSrc":"7806:10:23","nodeType":"YulFunctionCall","src":"7806:10:23"}],"functionName":{"name":"add","nativeSrc":"7798:3:23","nodeType":"YulIdentifier","src":"7798:3:23"},"nativeSrc":"7798:19:23","nodeType":"YulFunctionCall","src":"7798:19:23"},{"name":"_4","nativeSrc":"7819:2:23","nodeType":"YulIdentifier","src":"7819:2:23"}],"functionName":{"name":"add","nativeSrc":"7794:3:23","nodeType":"YulIdentifier","src":"7794:3:23"},"nativeSrc":"7794:28:23","nodeType":"YulFunctionCall","src":"7794:28:23"},"variables":[{"name":"srcEnd","nativeSrc":"7784:6:23","nodeType":"YulTypedName","src":"7784:6:23","type":""}]},{"body":{"nativeSrc":"7854:16:23","nodeType":"YulBlock","src":"7854:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7863:1:23","nodeType":"YulLiteral","src":"7863:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"7866:1:23","nodeType":"YulLiteral","src":"7866:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7856:6:23","nodeType":"YulIdentifier","src":"7856:6:23"},"nativeSrc":"7856:12:23","nodeType":"YulFunctionCall","src":"7856:12:23"},"nativeSrc":"7856:12:23","nodeType":"YulExpressionStatement","src":"7856:12:23"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"7837:6:23","nodeType":"YulIdentifier","src":"7837:6:23"},{"name":"dataEnd","nativeSrc":"7845:7:23","nodeType":"YulIdentifier","src":"7845:7:23"}],"functionName":{"name":"gt","nativeSrc":"7834:2:23","nodeType":"YulIdentifier","src":"7834:2:23"},"nativeSrc":"7834:19:23","nodeType":"YulFunctionCall","src":"7834:19:23"},"nativeSrc":"7831:39:23","nodeType":"YulIf","src":"7831:39:23"},{"nativeSrc":"7879:22:23","nodeType":"YulVariableDeclaration","src":"7879:22:23","value":{"arguments":[{"name":"_2","nativeSrc":"7894:2:23","nodeType":"YulIdentifier","src":"7894:2:23"},{"name":"_4","nativeSrc":"7898:2:23","nodeType":"YulIdentifier","src":"7898:2:23"}],"functionName":{"name":"add","nativeSrc":"7890:3:23","nodeType":"YulIdentifier","src":"7890:3:23"},"nativeSrc":"7890:11:23","nodeType":"YulFunctionCall","src":"7890:11:23"},"variables":[{"name":"src","nativeSrc":"7883:3:23","nodeType":"YulTypedName","src":"7883:3:23","type":""}]},{"body":{"nativeSrc":"7966:92:23","nodeType":"YulBlock","src":"7966:92:23","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"7987:3:23","nodeType":"YulIdentifier","src":"7987:3:23"},{"arguments":[{"name":"src","nativeSrc":"8011:3:23","nodeType":"YulIdentifier","src":"8011:3:23"}],"functionName":{"name":"abi_decode_address","nativeSrc":"7992:18:23","nodeType":"YulIdentifier","src":"7992:18:23"},"nativeSrc":"7992:23:23","nodeType":"YulFunctionCall","src":"7992:23:23"}],"functionName":{"name":"mstore","nativeSrc":"7980:6:23","nodeType":"YulIdentifier","src":"7980:6:23"},"nativeSrc":"7980:36:23","nodeType":"YulFunctionCall","src":"7980:36:23"},"nativeSrc":"7980:36:23","nodeType":"YulExpressionStatement","src":"7980:36:23"},{"nativeSrc":"8029:19:23","nodeType":"YulAssignment","src":"8029:19:23","value":{"arguments":[{"name":"dst","nativeSrc":"8040:3:23","nodeType":"YulIdentifier","src":"8040:3:23"},{"name":"_4","nativeSrc":"8045:2:23","nodeType":"YulIdentifier","src":"8045:2:23"}],"functionName":{"name":"add","nativeSrc":"8036:3:23","nodeType":"YulIdentifier","src":"8036:3:23"},"nativeSrc":"8036:12:23","nodeType":"YulFunctionCall","src":"8036:12:23"},"variableNames":[{"name":"dst","nativeSrc":"8029:3:23","nodeType":"YulIdentifier","src":"8029:3:23"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"7921:3:23","nodeType":"YulIdentifier","src":"7921:3:23"},{"name":"srcEnd","nativeSrc":"7926:6:23","nodeType":"YulIdentifier","src":"7926:6:23"}],"functionName":{"name":"lt","nativeSrc":"7918:2:23","nodeType":"YulIdentifier","src":"7918:2:23"},"nativeSrc":"7918:15:23","nodeType":"YulFunctionCall","src":"7918:15:23"},"nativeSrc":"7910:148:23","nodeType":"YulForLoop","post":{"nativeSrc":"7934:23:23","nodeType":"YulBlock","src":"7934:23:23","statements":[{"nativeSrc":"7936:19:23","nodeType":"YulAssignment","src":"7936:19:23","value":{"arguments":[{"name":"src","nativeSrc":"7947:3:23","nodeType":"YulIdentifier","src":"7947:3:23"},{"name":"_4","nativeSrc":"7952:2:23","nodeType":"YulIdentifier","src":"7952:2:23"}],"functionName":{"name":"add","nativeSrc":"7943:3:23","nodeType":"YulIdentifier","src":"7943:3:23"},"nativeSrc":"7943:12:23","nodeType":"YulFunctionCall","src":"7943:12:23"},"variableNames":[{"name":"src","nativeSrc":"7936:3:23","nodeType":"YulIdentifier","src":"7936:3:23"}]}]},"pre":{"nativeSrc":"7914:3:23","nodeType":"YulBlock","src":"7914:3:23","statements":[]},"src":"7910:148:23"},{"nativeSrc":"8067:15:23","nodeType":"YulAssignment","src":"8067:15:23","value":{"name":"dst_1","nativeSrc":"8077:5:23","nodeType":"YulIdentifier","src":"8077:5:23"},"variableNames":[{"name":"value0","nativeSrc":"8067:6:23","nodeType":"YulIdentifier","src":"8067:6:23"}]},{"nativeSrc":"8091:48:23","nodeType":"YulVariableDeclaration","src":"8091:48:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8124:9:23","nodeType":"YulIdentifier","src":"8124:9:23"},{"name":"_4","nativeSrc":"8135:2:23","nodeType":"YulIdentifier","src":"8135:2:23"}],"functionName":{"name":"add","nativeSrc":"8120:3:23","nodeType":"YulIdentifier","src":"8120:3:23"},"nativeSrc":"8120:18:23","nodeType":"YulFunctionCall","src":"8120:18:23"}],"functionName":{"name":"calldataload","nativeSrc":"8107:12:23","nodeType":"YulIdentifier","src":"8107:12:23"},"nativeSrc":"8107:32:23","nodeType":"YulFunctionCall","src":"8107:32:23"},"variables":[{"name":"offset_1","nativeSrc":"8095:8:23","nodeType":"YulTypedName","src":"8095:8:23","type":""}]},{"body":{"nativeSrc":"8168:16:23","nodeType":"YulBlock","src":"8168:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8177:1:23","nodeType":"YulLiteral","src":"8177:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"8180:1:23","nodeType":"YulLiteral","src":"8180:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8170:6:23","nodeType":"YulIdentifier","src":"8170:6:23"},"nativeSrc":"8170:12:23","nodeType":"YulFunctionCall","src":"8170:12:23"},"nativeSrc":"8170:12:23","nodeType":"YulExpressionStatement","src":"8170:12:23"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"8154:8:23","nodeType":"YulIdentifier","src":"8154:8:23"},{"name":"_1","nativeSrc":"8164:2:23","nodeType":"YulIdentifier","src":"8164:2:23"}],"functionName":{"name":"gt","nativeSrc":"8151:2:23","nodeType":"YulIdentifier","src":"8151:2:23"},"nativeSrc":"8151:16:23","nodeType":"YulFunctionCall","src":"8151:16:23"},"nativeSrc":"8148:36:23","nodeType":"YulIf","src":"8148:36:23"},{"nativeSrc":"8193:73:23","nodeType":"YulAssignment","src":"8193:73:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8236:9:23","nodeType":"YulIdentifier","src":"8236:9:23"},{"name":"offset_1","nativeSrc":"8247:8:23","nodeType":"YulIdentifier","src":"8247:8:23"}],"functionName":{"name":"add","nativeSrc":"8232:3:23","nodeType":"YulIdentifier","src":"8232:3:23"},"nativeSrc":"8232:24:23","nodeType":"YulFunctionCall","src":"8232:24:23"},{"name":"dataEnd","nativeSrc":"8258:7:23","nodeType":"YulIdentifier","src":"8258:7:23"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nativeSrc":"8203:28:23","nodeType":"YulIdentifier","src":"8203:28:23"},"nativeSrc":"8203:63:23","nodeType":"YulFunctionCall","src":"8203:63:23"},"variableNames":[{"name":"value1","nativeSrc":"8193:6:23","nodeType":"YulIdentifier","src":"8193:6:23"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nativeSrc":"7126:1146:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7221:9:23","nodeType":"YulTypedName","src":"7221:9:23","type":""},{"name":"dataEnd","nativeSrc":"7232:7:23","nodeType":"YulTypedName","src":"7232:7:23","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7244:6:23","nodeType":"YulTypedName","src":"7244:6:23","type":""},{"name":"value1","nativeSrc":"7252:6:23","nodeType":"YulTypedName","src":"7252:6:23","type":""}],"src":"7126:1146:23"},{"body":{"nativeSrc":"8338:378:23","nodeType":"YulBlock","src":"8338:378:23","statements":[{"nativeSrc":"8348:26:23","nodeType":"YulVariableDeclaration","src":"8348:26:23","value":{"arguments":[{"name":"value","nativeSrc":"8368:5:23","nodeType":"YulIdentifier","src":"8368:5:23"}],"functionName":{"name":"mload","nativeSrc":"8362:5:23","nodeType":"YulIdentifier","src":"8362:5:23"},"nativeSrc":"8362:12:23","nodeType":"YulFunctionCall","src":"8362:12:23"},"variables":[{"name":"length","nativeSrc":"8352:6:23","nodeType":"YulTypedName","src":"8352:6:23","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"8390:3:23","nodeType":"YulIdentifier","src":"8390:3:23"},{"name":"length","nativeSrc":"8395:6:23","nodeType":"YulIdentifier","src":"8395:6:23"}],"functionName":{"name":"mstore","nativeSrc":"8383:6:23","nodeType":"YulIdentifier","src":"8383:6:23"},"nativeSrc":"8383:19:23","nodeType":"YulFunctionCall","src":"8383:19:23"},"nativeSrc":"8383:19:23","nodeType":"YulExpressionStatement","src":"8383:19:23"},{"nativeSrc":"8411:14:23","nodeType":"YulVariableDeclaration","src":"8411:14:23","value":{"kind":"number","nativeSrc":"8421:4:23","nodeType":"YulLiteral","src":"8421:4:23","type":"","value":"0x20"},"variables":[{"name":"_1","nativeSrc":"8415:2:23","nodeType":"YulTypedName","src":"8415:2:23","type":""}]},{"nativeSrc":"8434:21:23","nodeType":"YulAssignment","src":"8434:21:23","value":{"arguments":[{"name":"pos","nativeSrc":"8445:3:23","nodeType":"YulIdentifier","src":"8445:3:23"},{"kind":"number","nativeSrc":"8450:4:23","nodeType":"YulLiteral","src":"8450:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8441:3:23","nodeType":"YulIdentifier","src":"8441:3:23"},"nativeSrc":"8441:14:23","nodeType":"YulFunctionCall","src":"8441:14:23"},"variableNames":[{"name":"pos","nativeSrc":"8434:3:23","nodeType":"YulIdentifier","src":"8434:3:23"}]},{"nativeSrc":"8464:30:23","nodeType":"YulVariableDeclaration","src":"8464:30:23","value":{"arguments":[{"name":"value","nativeSrc":"8482:5:23","nodeType":"YulIdentifier","src":"8482:5:23"},{"kind":"number","nativeSrc":"8489:4:23","nodeType":"YulLiteral","src":"8489:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8478:3:23","nodeType":"YulIdentifier","src":"8478:3:23"},"nativeSrc":"8478:16:23","nodeType":"YulFunctionCall","src":"8478:16:23"},"variables":[{"name":"srcPtr","nativeSrc":"8468:6:23","nodeType":"YulTypedName","src":"8468:6:23","type":""}]},{"nativeSrc":"8503:10:23","nodeType":"YulVariableDeclaration","src":"8503:10:23","value":{"kind":"number","nativeSrc":"8512:1:23","nodeType":"YulLiteral","src":"8512:1:23","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"8507:1:23","nodeType":"YulTypedName","src":"8507:1:23","type":""}]},{"body":{"nativeSrc":"8571:120:23","nodeType":"YulBlock","src":"8571:120:23","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"8592:3:23","nodeType":"YulIdentifier","src":"8592:3:23"},{"arguments":[{"name":"srcPtr","nativeSrc":"8603:6:23","nodeType":"YulIdentifier","src":"8603:6:23"}],"functionName":{"name":"mload","nativeSrc":"8597:5:23","nodeType":"YulIdentifier","src":"8597:5:23"},"nativeSrc":"8597:13:23","nodeType":"YulFunctionCall","src":"8597:13:23"}],"functionName":{"name":"mstore","nativeSrc":"8585:6:23","nodeType":"YulIdentifier","src":"8585:6:23"},"nativeSrc":"8585:26:23","nodeType":"YulFunctionCall","src":"8585:26:23"},"nativeSrc":"8585:26:23","nodeType":"YulExpressionStatement","src":"8585:26:23"},{"nativeSrc":"8624:19:23","nodeType":"YulAssignment","src":"8624:19:23","value":{"arguments":[{"name":"pos","nativeSrc":"8635:3:23","nodeType":"YulIdentifier","src":"8635:3:23"},{"name":"_1","nativeSrc":"8640:2:23","nodeType":"YulIdentifier","src":"8640:2:23"}],"functionName":{"name":"add","nativeSrc":"8631:3:23","nodeType":"YulIdentifier","src":"8631:3:23"},"nativeSrc":"8631:12:23","nodeType":"YulFunctionCall","src":"8631:12:23"},"variableNames":[{"name":"pos","nativeSrc":"8624:3:23","nodeType":"YulIdentifier","src":"8624:3:23"}]},{"nativeSrc":"8656:25:23","nodeType":"YulAssignment","src":"8656:25:23","value":{"arguments":[{"name":"srcPtr","nativeSrc":"8670:6:23","nodeType":"YulIdentifier","src":"8670:6:23"},{"name":"_1","nativeSrc":"8678:2:23","nodeType":"YulIdentifier","src":"8678:2:23"}],"functionName":{"name":"add","nativeSrc":"8666:3:23","nodeType":"YulIdentifier","src":"8666:3:23"},"nativeSrc":"8666:15:23","nodeType":"YulFunctionCall","src":"8666:15:23"},"variableNames":[{"name":"srcPtr","nativeSrc":"8656:6:23","nodeType":"YulIdentifier","src":"8656:6:23"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"8533:1:23","nodeType":"YulIdentifier","src":"8533:1:23"},{"name":"length","nativeSrc":"8536:6:23","nodeType":"YulIdentifier","src":"8536:6:23"}],"functionName":{"name":"lt","nativeSrc":"8530:2:23","nodeType":"YulIdentifier","src":"8530:2:23"},"nativeSrc":"8530:13:23","nodeType":"YulFunctionCall","src":"8530:13:23"},"nativeSrc":"8522:169:23","nodeType":"YulForLoop","post":{"nativeSrc":"8544:18:23","nodeType":"YulBlock","src":"8544:18:23","statements":[{"nativeSrc":"8546:14:23","nodeType":"YulAssignment","src":"8546:14:23","value":{"arguments":[{"name":"i","nativeSrc":"8555:1:23","nodeType":"YulIdentifier","src":"8555:1:23"},{"kind":"number","nativeSrc":"8558:1:23","nodeType":"YulLiteral","src":"8558:1:23","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"8551:3:23","nodeType":"YulIdentifier","src":"8551:3:23"},"nativeSrc":"8551:9:23","nodeType":"YulFunctionCall","src":"8551:9:23"},"variableNames":[{"name":"i","nativeSrc":"8546:1:23","nodeType":"YulIdentifier","src":"8546:1:23"}]}]},"pre":{"nativeSrc":"8526:3:23","nodeType":"YulBlock","src":"8526:3:23","statements":[]},"src":"8522:169:23"},{"nativeSrc":"8700:10:23","nodeType":"YulAssignment","src":"8700:10:23","value":{"name":"pos","nativeSrc":"8707:3:23","nodeType":"YulIdentifier","src":"8707:3:23"},"variableNames":[{"name":"end","nativeSrc":"8700:3:23","nodeType":"YulIdentifier","src":"8700:3:23"}]}]},"name":"abi_encode_array_uint256_dyn","nativeSrc":"8277:439:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"8315:5:23","nodeType":"YulTypedName","src":"8315:5:23","type":""},{"name":"pos","nativeSrc":"8322:3:23","nodeType":"YulTypedName","src":"8322:3:23","type":""}],"returnVariables":[{"name":"end","nativeSrc":"8330:3:23","nodeType":"YulTypedName","src":"8330:3:23","type":""}],"src":"8277:439:23"},{"body":{"nativeSrc":"8872:110:23","nodeType":"YulBlock","src":"8872:110:23","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8889:9:23","nodeType":"YulIdentifier","src":"8889:9:23"},{"kind":"number","nativeSrc":"8900:2:23","nodeType":"YulLiteral","src":"8900:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"8882:6:23","nodeType":"YulIdentifier","src":"8882:6:23"},"nativeSrc":"8882:21:23","nodeType":"YulFunctionCall","src":"8882:21:23"},"nativeSrc":"8882:21:23","nodeType":"YulExpressionStatement","src":"8882:21:23"},{"nativeSrc":"8912:64:23","nodeType":"YulAssignment","src":"8912:64:23","value":{"arguments":[{"name":"value0","nativeSrc":"8949:6:23","nodeType":"YulIdentifier","src":"8949:6:23"},{"arguments":[{"name":"headStart","nativeSrc":"8961:9:23","nodeType":"YulIdentifier","src":"8961:9:23"},{"kind":"number","nativeSrc":"8972:2:23","nodeType":"YulLiteral","src":"8972:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8957:3:23","nodeType":"YulIdentifier","src":"8957:3:23"},"nativeSrc":"8957:18:23","nodeType":"YulFunctionCall","src":"8957:18:23"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nativeSrc":"8920:28:23","nodeType":"YulIdentifier","src":"8920:28:23"},"nativeSrc":"8920:56:23","nodeType":"YulFunctionCall","src":"8920:56:23"},"variableNames":[{"name":"tail","nativeSrc":"8912:4:23","nodeType":"YulIdentifier","src":"8912:4:23"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"8721:261:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8841:9:23","nodeType":"YulTypedName","src":"8841:9:23","type":""},{"name":"value0","nativeSrc":"8852:6:23","nodeType":"YulTypedName","src":"8852:6:23","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8863:4:23","nodeType":"YulTypedName","src":"8863:4:23","type":""}],"src":"8721:261:23"},{"body":{"nativeSrc":"9118:395:23","nodeType":"YulBlock","src":"9118:395:23","statements":[{"body":{"nativeSrc":"9165:16:23","nodeType":"YulBlock","src":"9165:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9174:1:23","nodeType":"YulLiteral","src":"9174:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"9177:1:23","nodeType":"YulLiteral","src":"9177:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9167:6:23","nodeType":"YulIdentifier","src":"9167:6:23"},"nativeSrc":"9167:12:23","nodeType":"YulFunctionCall","src":"9167:12:23"},"nativeSrc":"9167:12:23","nodeType":"YulExpressionStatement","src":"9167:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9139:7:23","nodeType":"YulIdentifier","src":"9139:7:23"},{"name":"headStart","nativeSrc":"9148:9:23","nodeType":"YulIdentifier","src":"9148:9:23"}],"functionName":{"name":"sub","nativeSrc":"9135:3:23","nodeType":"YulIdentifier","src":"9135:3:23"},"nativeSrc":"9135:23:23","nodeType":"YulFunctionCall","src":"9135:23:23"},{"kind":"number","nativeSrc":"9160:3:23","nodeType":"YulLiteral","src":"9160:3:23","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"9131:3:23","nodeType":"YulIdentifier","src":"9131:3:23"},"nativeSrc":"9131:33:23","nodeType":"YulFunctionCall","src":"9131:33:23"},"nativeSrc":"9128:53:23","nodeType":"YulIf","src":"9128:53:23"},{"nativeSrc":"9190:37:23","nodeType":"YulVariableDeclaration","src":"9190:37:23","value":{"arguments":[{"name":"headStart","nativeSrc":"9217:9:23","nodeType":"YulIdentifier","src":"9217:9:23"}],"functionName":{"name":"calldataload","nativeSrc":"9204:12:23","nodeType":"YulIdentifier","src":"9204:12:23"},"nativeSrc":"9204:23:23","nodeType":"YulFunctionCall","src":"9204:23:23"},"variables":[{"name":"offset","nativeSrc":"9194:6:23","nodeType":"YulTypedName","src":"9194:6:23","type":""}]},{"body":{"nativeSrc":"9270:16:23","nodeType":"YulBlock","src":"9270:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9279:1:23","nodeType":"YulLiteral","src":"9279:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"9282:1:23","nodeType":"YulLiteral","src":"9282:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9272:6:23","nodeType":"YulIdentifier","src":"9272:6:23"},"nativeSrc":"9272:12:23","nodeType":"YulFunctionCall","src":"9272:12:23"},"nativeSrc":"9272:12:23","nodeType":"YulExpressionStatement","src":"9272:12:23"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"9242:6:23","nodeType":"YulIdentifier","src":"9242:6:23"},{"kind":"number","nativeSrc":"9250:18:23","nodeType":"YulLiteral","src":"9250:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"9239:2:23","nodeType":"YulIdentifier","src":"9239:2:23"},"nativeSrc":"9239:30:23","nodeType":"YulFunctionCall","src":"9239:30:23"},"nativeSrc":"9236:50:23","nodeType":"YulIf","src":"9236:50:23"},{"nativeSrc":"9295:59:23","nodeType":"YulAssignment","src":"9295:59:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9326:9:23","nodeType":"YulIdentifier","src":"9326:9:23"},{"name":"offset","nativeSrc":"9337:6:23","nodeType":"YulIdentifier","src":"9337:6:23"}],"functionName":{"name":"add","nativeSrc":"9322:3:23","nodeType":"YulIdentifier","src":"9322:3:23"},"nativeSrc":"9322:22:23","nodeType":"YulFunctionCall","src":"9322:22:23"},{"name":"dataEnd","nativeSrc":"9346:7:23","nodeType":"YulIdentifier","src":"9346:7:23"}],"functionName":{"name":"abi_decode_bytes","nativeSrc":"9305:16:23","nodeType":"YulIdentifier","src":"9305:16:23"},"nativeSrc":"9305:49:23","nodeType":"YulFunctionCall","src":"9305:49:23"},"variableNames":[{"name":"value0","nativeSrc":"9295:6:23","nodeType":"YulIdentifier","src":"9295:6:23"}]},{"nativeSrc":"9363:42:23","nodeType":"YulAssignment","src":"9363:42:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9390:9:23","nodeType":"YulIdentifier","src":"9390:9:23"},{"kind":"number","nativeSrc":"9401:2:23","nodeType":"YulLiteral","src":"9401:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9386:3:23","nodeType":"YulIdentifier","src":"9386:3:23"},"nativeSrc":"9386:18:23","nodeType":"YulFunctionCall","src":"9386:18:23"}],"functionName":{"name":"calldataload","nativeSrc":"9373:12:23","nodeType":"YulIdentifier","src":"9373:12:23"},"nativeSrc":"9373:32:23","nodeType":"YulFunctionCall","src":"9373:32:23"},"variableNames":[{"name":"value1","nativeSrc":"9363:6:23","nodeType":"YulIdentifier","src":"9363:6:23"}]},{"nativeSrc":"9414:42:23","nodeType":"YulAssignment","src":"9414:42:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9441:9:23","nodeType":"YulIdentifier","src":"9441:9:23"},{"kind":"number","nativeSrc":"9452:2:23","nodeType":"YulLiteral","src":"9452:2:23","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9437:3:23","nodeType":"YulIdentifier","src":"9437:3:23"},"nativeSrc":"9437:18:23","nodeType":"YulFunctionCall","src":"9437:18:23"}],"functionName":{"name":"calldataload","nativeSrc":"9424:12:23","nodeType":"YulIdentifier","src":"9424:12:23"},"nativeSrc":"9424:32:23","nodeType":"YulFunctionCall","src":"9424:32:23"},"variableNames":[{"name":"value2","nativeSrc":"9414:6:23","nodeType":"YulIdentifier","src":"9414:6:23"}]},{"nativeSrc":"9465:42:23","nodeType":"YulAssignment","src":"9465:42:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9492:9:23","nodeType":"YulIdentifier","src":"9492:9:23"},{"kind":"number","nativeSrc":"9503:2:23","nodeType":"YulLiteral","src":"9503:2:23","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9488:3:23","nodeType":"YulIdentifier","src":"9488:3:23"},"nativeSrc":"9488:18:23","nodeType":"YulFunctionCall","src":"9488:18:23"}],"functionName":{"name":"calldataload","nativeSrc":"9475:12:23","nodeType":"YulIdentifier","src":"9475:12:23"},"nativeSrc":"9475:32:23","nodeType":"YulFunctionCall","src":"9475:32:23"},"variableNames":[{"name":"value3","nativeSrc":"9465:6:23","nodeType":"YulIdentifier","src":"9465:6:23"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_uint256t_uint256t_uint256","nativeSrc":"8987:526:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9060:9:23","nodeType":"YulTypedName","src":"9060:9:23","type":""},{"name":"dataEnd","nativeSrc":"9071:7:23","nodeType":"YulTypedName","src":"9071:7:23","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"9083:6:23","nodeType":"YulTypedName","src":"9083:6:23","type":""},{"name":"value1","nativeSrc":"9091:6:23","nodeType":"YulTypedName","src":"9091:6:23","type":""},{"name":"value2","nativeSrc":"9099:6:23","nodeType":"YulTypedName","src":"9099:6:23","type":""},{"name":"value3","nativeSrc":"9107:6:23","nodeType":"YulTypedName","src":"9107:6:23","type":""}],"src":"8987:526:23"},{"body":{"nativeSrc":"9672:515:23","nodeType":"YulBlock","src":"9672:515:23","statements":[{"body":{"nativeSrc":"9718:16:23","nodeType":"YulBlock","src":"9718:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9727:1:23","nodeType":"YulLiteral","src":"9727:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"9730:1:23","nodeType":"YulLiteral","src":"9730:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9720:6:23","nodeType":"YulIdentifier","src":"9720:6:23"},"nativeSrc":"9720:12:23","nodeType":"YulFunctionCall","src":"9720:12:23"},"nativeSrc":"9720:12:23","nodeType":"YulExpressionStatement","src":"9720:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9693:7:23","nodeType":"YulIdentifier","src":"9693:7:23"},{"name":"headStart","nativeSrc":"9702:9:23","nodeType":"YulIdentifier","src":"9702:9:23"}],"functionName":{"name":"sub","nativeSrc":"9689:3:23","nodeType":"YulIdentifier","src":"9689:3:23"},"nativeSrc":"9689:23:23","nodeType":"YulFunctionCall","src":"9689:23:23"},{"kind":"number","nativeSrc":"9714:2:23","nodeType":"YulLiteral","src":"9714:2:23","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"9685:3:23","nodeType":"YulIdentifier","src":"9685:3:23"},"nativeSrc":"9685:32:23","nodeType":"YulFunctionCall","src":"9685:32:23"},"nativeSrc":"9682:52:23","nodeType":"YulIf","src":"9682:52:23"},{"nativeSrc":"9743:39:23","nodeType":"YulAssignment","src":"9743:39:23","value":{"arguments":[{"name":"headStart","nativeSrc":"9772:9:23","nodeType":"YulIdentifier","src":"9772:9:23"}],"functionName":{"name":"abi_decode_address","nativeSrc":"9753:18:23","nodeType":"YulIdentifier","src":"9753:18:23"},"nativeSrc":"9753:29:23","nodeType":"YulFunctionCall","src":"9753:29:23"},"variableNames":[{"name":"value0","nativeSrc":"9743:6:23","nodeType":"YulIdentifier","src":"9743:6:23"}]},{"nativeSrc":"9791:46:23","nodeType":"YulVariableDeclaration","src":"9791:46:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9822:9:23","nodeType":"YulIdentifier","src":"9822:9:23"},{"kind":"number","nativeSrc":"9833:2:23","nodeType":"YulLiteral","src":"9833:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9818:3:23","nodeType":"YulIdentifier","src":"9818:3:23"},"nativeSrc":"9818:18:23","nodeType":"YulFunctionCall","src":"9818:18:23"}],"functionName":{"name":"calldataload","nativeSrc":"9805:12:23","nodeType":"YulIdentifier","src":"9805:12:23"},"nativeSrc":"9805:32:23","nodeType":"YulFunctionCall","src":"9805:32:23"},"variables":[{"name":"offset","nativeSrc":"9795:6:23","nodeType":"YulTypedName","src":"9795:6:23","type":""}]},{"nativeSrc":"9846:28:23","nodeType":"YulVariableDeclaration","src":"9846:28:23","value":{"kind":"number","nativeSrc":"9856:18:23","nodeType":"YulLiteral","src":"9856:18:23","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"9850:2:23","nodeType":"YulTypedName","src":"9850:2:23","type":""}]},{"body":{"nativeSrc":"9901:16:23","nodeType":"YulBlock","src":"9901:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9910:1:23","nodeType":"YulLiteral","src":"9910:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"9913:1:23","nodeType":"YulLiteral","src":"9913:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9903:6:23","nodeType":"YulIdentifier","src":"9903:6:23"},"nativeSrc":"9903:12:23","nodeType":"YulFunctionCall","src":"9903:12:23"},"nativeSrc":"9903:12:23","nodeType":"YulExpressionStatement","src":"9903:12:23"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"9889:6:23","nodeType":"YulIdentifier","src":"9889:6:23"},{"name":"_1","nativeSrc":"9897:2:23","nodeType":"YulIdentifier","src":"9897:2:23"}],"functionName":{"name":"gt","nativeSrc":"9886:2:23","nodeType":"YulIdentifier","src":"9886:2:23"},"nativeSrc":"9886:14:23","nodeType":"YulFunctionCall","src":"9886:14:23"},"nativeSrc":"9883:34:23","nodeType":"YulIf","src":"9883:34:23"},{"nativeSrc":"9926:71:23","nodeType":"YulAssignment","src":"9926:71:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9969:9:23","nodeType":"YulIdentifier","src":"9969:9:23"},{"name":"offset","nativeSrc":"9980:6:23","nodeType":"YulIdentifier","src":"9980:6:23"}],"functionName":{"name":"add","nativeSrc":"9965:3:23","nodeType":"YulIdentifier","src":"9965:3:23"},"nativeSrc":"9965:22:23","nodeType":"YulFunctionCall","src":"9965:22:23"},{"name":"dataEnd","nativeSrc":"9989:7:23","nodeType":"YulIdentifier","src":"9989:7:23"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nativeSrc":"9936:28:23","nodeType":"YulIdentifier","src":"9936:28:23"},"nativeSrc":"9936:61:23","nodeType":"YulFunctionCall","src":"9936:61:23"},"variableNames":[{"name":"value1","nativeSrc":"9926:6:23","nodeType":"YulIdentifier","src":"9926:6:23"}]},{"nativeSrc":"10006:48:23","nodeType":"YulVariableDeclaration","src":"10006:48:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10039:9:23","nodeType":"YulIdentifier","src":"10039:9:23"},{"kind":"number","nativeSrc":"10050:2:23","nodeType":"YulLiteral","src":"10050:2:23","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10035:3:23","nodeType":"YulIdentifier","src":"10035:3:23"},"nativeSrc":"10035:18:23","nodeType":"YulFunctionCall","src":"10035:18:23"}],"functionName":{"name":"calldataload","nativeSrc":"10022:12:23","nodeType":"YulIdentifier","src":"10022:12:23"},"nativeSrc":"10022:32:23","nodeType":"YulFunctionCall","src":"10022:32:23"},"variables":[{"name":"offset_1","nativeSrc":"10010:8:23","nodeType":"YulTypedName","src":"10010:8:23","type":""}]},{"body":{"nativeSrc":"10083:16:23","nodeType":"YulBlock","src":"10083:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10092:1:23","nodeType":"YulLiteral","src":"10092:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"10095:1:23","nodeType":"YulLiteral","src":"10095:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10085:6:23","nodeType":"YulIdentifier","src":"10085:6:23"},"nativeSrc":"10085:12:23","nodeType":"YulFunctionCall","src":"10085:12:23"},"nativeSrc":"10085:12:23","nodeType":"YulExpressionStatement","src":"10085:12:23"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"10069:8:23","nodeType":"YulIdentifier","src":"10069:8:23"},{"name":"_1","nativeSrc":"10079:2:23","nodeType":"YulIdentifier","src":"10079:2:23"}],"functionName":{"name":"gt","nativeSrc":"10066:2:23","nodeType":"YulIdentifier","src":"10066:2:23"},"nativeSrc":"10066:16:23","nodeType":"YulFunctionCall","src":"10066:16:23"},"nativeSrc":"10063:36:23","nodeType":"YulIf","src":"10063:36:23"},{"nativeSrc":"10108:73:23","nodeType":"YulAssignment","src":"10108:73:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10151:9:23","nodeType":"YulIdentifier","src":"10151:9:23"},{"name":"offset_1","nativeSrc":"10162:8:23","nodeType":"YulIdentifier","src":"10162:8:23"}],"functionName":{"name":"add","nativeSrc":"10147:3:23","nodeType":"YulIdentifier","src":"10147:3:23"},"nativeSrc":"10147:24:23","nodeType":"YulFunctionCall","src":"10147:24:23"},{"name":"dataEnd","nativeSrc":"10173:7:23","nodeType":"YulIdentifier","src":"10173:7:23"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nativeSrc":"10118:28:23","nodeType":"YulIdentifier","src":"10118:28:23"},"nativeSrc":"10118:63:23","nodeType":"YulFunctionCall","src":"10118:63:23"},"variableNames":[{"name":"value2","nativeSrc":"10108:6:23","nodeType":"YulIdentifier","src":"10108:6:23"}]}]},"name":"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nativeSrc":"9518:669:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9622:9:23","nodeType":"YulTypedName","src":"9622:9:23","type":""},{"name":"dataEnd","nativeSrc":"9633:7:23","nodeType":"YulTypedName","src":"9633:7:23","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"9645:6:23","nodeType":"YulTypedName","src":"9645:6:23","type":""},{"name":"value1","nativeSrc":"9653:6:23","nodeType":"YulTypedName","src":"9653:6:23","type":""},{"name":"value2","nativeSrc":"9661:6:23","nodeType":"YulTypedName","src":"9661:6:23","type":""}],"src":"9518:669:23"},{"body":{"nativeSrc":"10293:102:23","nodeType":"YulBlock","src":"10293:102:23","statements":[{"nativeSrc":"10303:26:23","nodeType":"YulAssignment","src":"10303:26:23","value":{"arguments":[{"name":"headStart","nativeSrc":"10315:9:23","nodeType":"YulIdentifier","src":"10315:9:23"},{"kind":"number","nativeSrc":"10326:2:23","nodeType":"YulLiteral","src":"10326:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10311:3:23","nodeType":"YulIdentifier","src":"10311:3:23"},"nativeSrc":"10311:18:23","nodeType":"YulFunctionCall","src":"10311:18:23"},"variableNames":[{"name":"tail","nativeSrc":"10303:4:23","nodeType":"YulIdentifier","src":"10303:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10345:9:23","nodeType":"YulIdentifier","src":"10345:9:23"},{"arguments":[{"name":"value0","nativeSrc":"10360:6:23","nodeType":"YulIdentifier","src":"10360:6:23"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"10376:3:23","nodeType":"YulLiteral","src":"10376:3:23","type":"","value":"160"},{"kind":"number","nativeSrc":"10381:1:23","nodeType":"YulLiteral","src":"10381:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"10372:3:23","nodeType":"YulIdentifier","src":"10372:3:23"},"nativeSrc":"10372:11:23","nodeType":"YulFunctionCall","src":"10372:11:23"},{"kind":"number","nativeSrc":"10385:1:23","nodeType":"YulLiteral","src":"10385:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"10368:3:23","nodeType":"YulIdentifier","src":"10368:3:23"},"nativeSrc":"10368:19:23","nodeType":"YulFunctionCall","src":"10368:19:23"}],"functionName":{"name":"and","nativeSrc":"10356:3:23","nodeType":"YulIdentifier","src":"10356:3:23"},"nativeSrc":"10356:32:23","nodeType":"YulFunctionCall","src":"10356:32:23"}],"functionName":{"name":"mstore","nativeSrc":"10338:6:23","nodeType":"YulIdentifier","src":"10338:6:23"},"nativeSrc":"10338:51:23","nodeType":"YulFunctionCall","src":"10338:51:23"},"nativeSrc":"10338:51:23","nodeType":"YulExpressionStatement","src":"10338:51:23"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"10192:203:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10262:9:23","nodeType":"YulTypedName","src":"10262:9:23","type":""},{"name":"value0","nativeSrc":"10273:6:23","nodeType":"YulTypedName","src":"10273:6:23","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10284:4:23","nodeType":"YulTypedName","src":"10284:4:23","type":""}],"src":"10192:203:23"},{"body":{"nativeSrc":"10443:59:23","nodeType":"YulBlock","src":"10443:59:23","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"10460:3:23","nodeType":"YulIdentifier","src":"10460:3:23"},{"arguments":[{"name":"value","nativeSrc":"10469:5:23","nodeType":"YulIdentifier","src":"10469:5:23"},{"kind":"number","nativeSrc":"10476:18:23","nodeType":"YulLiteral","src":"10476:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"10465:3:23","nodeType":"YulIdentifier","src":"10465:3:23"},"nativeSrc":"10465:30:23","nodeType":"YulFunctionCall","src":"10465:30:23"}],"functionName":{"name":"mstore","nativeSrc":"10453:6:23","nodeType":"YulIdentifier","src":"10453:6:23"},"nativeSrc":"10453:43:23","nodeType":"YulFunctionCall","src":"10453:43:23"},"nativeSrc":"10453:43:23","nodeType":"YulExpressionStatement","src":"10453:43:23"}]},"name":"abi_encode_uint64","nativeSrc":"10400:102:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"10427:5:23","nodeType":"YulTypedName","src":"10427:5:23","type":""},{"name":"pos","nativeSrc":"10434:3:23","nodeType":"YulTypedName","src":"10434:3:23","type":""}],"src":"10400:102:23"},{"body":{"nativeSrc":"10606:101:23","nodeType":"YulBlock","src":"10606:101:23","statements":[{"nativeSrc":"10616:26:23","nodeType":"YulAssignment","src":"10616:26:23","value":{"arguments":[{"name":"headStart","nativeSrc":"10628:9:23","nodeType":"YulIdentifier","src":"10628:9:23"},{"kind":"number","nativeSrc":"10639:2:23","nodeType":"YulLiteral","src":"10639:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10624:3:23","nodeType":"YulIdentifier","src":"10624:3:23"},"nativeSrc":"10624:18:23","nodeType":"YulFunctionCall","src":"10624:18:23"},"variableNames":[{"name":"tail","nativeSrc":"10616:4:23","nodeType":"YulIdentifier","src":"10616:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10658:9:23","nodeType":"YulIdentifier","src":"10658:9:23"},{"arguments":[{"name":"value0","nativeSrc":"10673:6:23","nodeType":"YulIdentifier","src":"10673:6:23"},{"kind":"number","nativeSrc":"10681:18:23","nodeType":"YulLiteral","src":"10681:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"10669:3:23","nodeType":"YulIdentifier","src":"10669:3:23"},"nativeSrc":"10669:31:23","nodeType":"YulFunctionCall","src":"10669:31:23"}],"functionName":{"name":"mstore","nativeSrc":"10651:6:23","nodeType":"YulIdentifier","src":"10651:6:23"},"nativeSrc":"10651:50:23","nodeType":"YulFunctionCall","src":"10651:50:23"},"nativeSrc":"10651:50:23","nodeType":"YulExpressionStatement","src":"10651:50:23"}]},"name":"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed","nativeSrc":"10507:200:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10575:9:23","nodeType":"YulTypedName","src":"10575:9:23","type":""},{"name":"value0","nativeSrc":"10586:6:23","nodeType":"YulTypedName","src":"10586:6:23","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10597:4:23","nodeType":"YulTypedName","src":"10597:4:23","type":""}],"src":"10507:200:23"},{"body":{"nativeSrc":"10796:263:23","nodeType":"YulBlock","src":"10796:263:23","statements":[{"body":{"nativeSrc":"10842:16:23","nodeType":"YulBlock","src":"10842:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10851:1:23","nodeType":"YulLiteral","src":"10851:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"10854:1:23","nodeType":"YulLiteral","src":"10854:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10844:6:23","nodeType":"YulIdentifier","src":"10844:6:23"},"nativeSrc":"10844:12:23","nodeType":"YulFunctionCall","src":"10844:12:23"},"nativeSrc":"10844:12:23","nodeType":"YulExpressionStatement","src":"10844:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"10817:7:23","nodeType":"YulIdentifier","src":"10817:7:23"},{"name":"headStart","nativeSrc":"10826:9:23","nodeType":"YulIdentifier","src":"10826:9:23"}],"functionName":{"name":"sub","nativeSrc":"10813:3:23","nodeType":"YulIdentifier","src":"10813:3:23"},"nativeSrc":"10813:23:23","nodeType":"YulFunctionCall","src":"10813:23:23"},{"kind":"number","nativeSrc":"10838:2:23","nodeType":"YulLiteral","src":"10838:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"10809:3:23","nodeType":"YulIdentifier","src":"10809:3:23"},"nativeSrc":"10809:32:23","nodeType":"YulFunctionCall","src":"10809:32:23"},"nativeSrc":"10806:52:23","nodeType":"YulIf","src":"10806:52:23"},{"nativeSrc":"10867:39:23","nodeType":"YulAssignment","src":"10867:39:23","value":{"arguments":[{"name":"headStart","nativeSrc":"10896:9:23","nodeType":"YulIdentifier","src":"10896:9:23"}],"functionName":{"name":"abi_decode_address","nativeSrc":"10877:18:23","nodeType":"YulIdentifier","src":"10877:18:23"},"nativeSrc":"10877:29:23","nodeType":"YulFunctionCall","src":"10877:29:23"},"variableNames":[{"name":"value0","nativeSrc":"10867:6:23","nodeType":"YulIdentifier","src":"10867:6:23"}]},{"nativeSrc":"10915:45:23","nodeType":"YulVariableDeclaration","src":"10915:45:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10945:9:23","nodeType":"YulIdentifier","src":"10945:9:23"},{"kind":"number","nativeSrc":"10956:2:23","nodeType":"YulLiteral","src":"10956:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10941:3:23","nodeType":"YulIdentifier","src":"10941:3:23"},"nativeSrc":"10941:18:23","nodeType":"YulFunctionCall","src":"10941:18:23"}],"functionName":{"name":"calldataload","nativeSrc":"10928:12:23","nodeType":"YulIdentifier","src":"10928:12:23"},"nativeSrc":"10928:32:23","nodeType":"YulFunctionCall","src":"10928:32:23"},"variables":[{"name":"value","nativeSrc":"10919:5:23","nodeType":"YulTypedName","src":"10919:5:23","type":""}]},{"body":{"nativeSrc":"11013:16:23","nodeType":"YulBlock","src":"11013:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11022:1:23","nodeType":"YulLiteral","src":"11022:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"11025:1:23","nodeType":"YulLiteral","src":"11025:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11015:6:23","nodeType":"YulIdentifier","src":"11015:6:23"},"nativeSrc":"11015:12:23","nodeType":"YulFunctionCall","src":"11015:12:23"},"nativeSrc":"11015:12:23","nodeType":"YulExpressionStatement","src":"11015:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"10982:5:23","nodeType":"YulIdentifier","src":"10982:5:23"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"11003:5:23","nodeType":"YulIdentifier","src":"11003:5:23"}],"functionName":{"name":"iszero","nativeSrc":"10996:6:23","nodeType":"YulIdentifier","src":"10996:6:23"},"nativeSrc":"10996:13:23","nodeType":"YulFunctionCall","src":"10996:13:23"}],"functionName":{"name":"iszero","nativeSrc":"10989:6:23","nodeType":"YulIdentifier","src":"10989:6:23"},"nativeSrc":"10989:21:23","nodeType":"YulFunctionCall","src":"10989:21:23"}],"functionName":{"name":"eq","nativeSrc":"10979:2:23","nodeType":"YulIdentifier","src":"10979:2:23"},"nativeSrc":"10979:32:23","nodeType":"YulFunctionCall","src":"10979:32:23"}],"functionName":{"name":"iszero","nativeSrc":"10972:6:23","nodeType":"YulIdentifier","src":"10972:6:23"},"nativeSrc":"10972:40:23","nodeType":"YulFunctionCall","src":"10972:40:23"},"nativeSrc":"10969:60:23","nodeType":"YulIf","src":"10969:60:23"},{"nativeSrc":"11038:15:23","nodeType":"YulAssignment","src":"11038:15:23","value":{"name":"value","nativeSrc":"11048:5:23","nodeType":"YulIdentifier","src":"11048:5:23"},"variableNames":[{"name":"value1","nativeSrc":"11038:6:23","nodeType":"YulIdentifier","src":"11038:6:23"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nativeSrc":"10712:347:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10754:9:23","nodeType":"YulTypedName","src":"10754:9:23","type":""},{"name":"dataEnd","nativeSrc":"10765:7:23","nodeType":"YulTypedName","src":"10765:7:23","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"10777:6:23","nodeType":"YulTypedName","src":"10777:6:23","type":""},{"name":"value1","nativeSrc":"10785:6:23","nodeType":"YulTypedName","src":"10785:6:23","type":""}],"src":"10712:347:23"},{"body":{"nativeSrc":"11176:102:23","nodeType":"YulBlock","src":"11176:102:23","statements":[{"nativeSrc":"11186:26:23","nodeType":"YulAssignment","src":"11186:26:23","value":{"arguments":[{"name":"headStart","nativeSrc":"11198:9:23","nodeType":"YulIdentifier","src":"11198:9:23"},{"kind":"number","nativeSrc":"11209:2:23","nodeType":"YulLiteral","src":"11209:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11194:3:23","nodeType":"YulIdentifier","src":"11194:3:23"},"nativeSrc":"11194:18:23","nodeType":"YulFunctionCall","src":"11194:18:23"},"variableNames":[{"name":"tail","nativeSrc":"11186:4:23","nodeType":"YulIdentifier","src":"11186:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11228:9:23","nodeType":"YulIdentifier","src":"11228:9:23"},{"arguments":[{"name":"value0","nativeSrc":"11243:6:23","nodeType":"YulIdentifier","src":"11243:6:23"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"11259:3:23","nodeType":"YulLiteral","src":"11259:3:23","type":"","value":"160"},{"kind":"number","nativeSrc":"11264:1:23","nodeType":"YulLiteral","src":"11264:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"11255:3:23","nodeType":"YulIdentifier","src":"11255:3:23"},"nativeSrc":"11255:11:23","nodeType":"YulFunctionCall","src":"11255:11:23"},{"kind":"number","nativeSrc":"11268:1:23","nodeType":"YulLiteral","src":"11268:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"11251:3:23","nodeType":"YulIdentifier","src":"11251:3:23"},"nativeSrc":"11251:19:23","nodeType":"YulFunctionCall","src":"11251:19:23"}],"functionName":{"name":"and","nativeSrc":"11239:3:23","nodeType":"YulIdentifier","src":"11239:3:23"},"nativeSrc":"11239:32:23","nodeType":"YulFunctionCall","src":"11239:32:23"}],"functionName":{"name":"mstore","nativeSrc":"11221:6:23","nodeType":"YulIdentifier","src":"11221:6:23"},"nativeSrc":"11221:51:23","nodeType":"YulFunctionCall","src":"11221:51:23"},"nativeSrc":"11221:51:23","nodeType":"YulExpressionStatement","src":"11221:51:23"}]},"name":"abi_encode_tuple_t_contract$_ISP_$495__to_t_address__fromStack_reversed","nativeSrc":"11064:214:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11145:9:23","nodeType":"YulTypedName","src":"11145:9:23","type":""},{"name":"value0","nativeSrc":"11156:6:23","nodeType":"YulTypedName","src":"11156:6:23","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11167:4:23","nodeType":"YulTypedName","src":"11167:4:23","type":""}],"src":"11064:214:23"},{"body":{"nativeSrc":"11370:173:23","nodeType":"YulBlock","src":"11370:173:23","statements":[{"body":{"nativeSrc":"11416:16:23","nodeType":"YulBlock","src":"11416:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11425:1:23","nodeType":"YulLiteral","src":"11425:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"11428:1:23","nodeType":"YulLiteral","src":"11428:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11418:6:23","nodeType":"YulIdentifier","src":"11418:6:23"},"nativeSrc":"11418:12:23","nodeType":"YulFunctionCall","src":"11418:12:23"},"nativeSrc":"11418:12:23","nodeType":"YulExpressionStatement","src":"11418:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"11391:7:23","nodeType":"YulIdentifier","src":"11391:7:23"},{"name":"headStart","nativeSrc":"11400:9:23","nodeType":"YulIdentifier","src":"11400:9:23"}],"functionName":{"name":"sub","nativeSrc":"11387:3:23","nodeType":"YulIdentifier","src":"11387:3:23"},"nativeSrc":"11387:23:23","nodeType":"YulFunctionCall","src":"11387:23:23"},{"kind":"number","nativeSrc":"11412:2:23","nodeType":"YulLiteral","src":"11412:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"11383:3:23","nodeType":"YulIdentifier","src":"11383:3:23"},"nativeSrc":"11383:32:23","nodeType":"YulFunctionCall","src":"11383:32:23"},"nativeSrc":"11380:52:23","nodeType":"YulIf","src":"11380:52:23"},{"nativeSrc":"11441:39:23","nodeType":"YulAssignment","src":"11441:39:23","value":{"arguments":[{"name":"headStart","nativeSrc":"11470:9:23","nodeType":"YulIdentifier","src":"11470:9:23"}],"functionName":{"name":"abi_decode_address","nativeSrc":"11451:18:23","nodeType":"YulIdentifier","src":"11451:18:23"},"nativeSrc":"11451:29:23","nodeType":"YulFunctionCall","src":"11451:29:23"},"variableNames":[{"name":"value0","nativeSrc":"11441:6:23","nodeType":"YulIdentifier","src":"11441:6:23"}]},{"nativeSrc":"11489:48:23","nodeType":"YulAssignment","src":"11489:48:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11522:9:23","nodeType":"YulIdentifier","src":"11522:9:23"},{"kind":"number","nativeSrc":"11533:2:23","nodeType":"YulLiteral","src":"11533:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11518:3:23","nodeType":"YulIdentifier","src":"11518:3:23"},"nativeSrc":"11518:18:23","nodeType":"YulFunctionCall","src":"11518:18:23"}],"functionName":{"name":"abi_decode_address","nativeSrc":"11499:18:23","nodeType":"YulIdentifier","src":"11499:18:23"},"nativeSrc":"11499:38:23","nodeType":"YulFunctionCall","src":"11499:38:23"},"variableNames":[{"name":"value1","nativeSrc":"11489:6:23","nodeType":"YulIdentifier","src":"11489:6:23"}]}]},"name":"abi_decode_tuple_t_addresst_address","nativeSrc":"11283:260:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11328:9:23","nodeType":"YulTypedName","src":"11328:9:23","type":""},{"name":"dataEnd","nativeSrc":"11339:7:23","nodeType":"YulTypedName","src":"11339:7:23","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"11351:6:23","nodeType":"YulTypedName","src":"11351:6:23","type":""},{"name":"value1","nativeSrc":"11359:6:23","nodeType":"YulTypedName","src":"11359:6:23","type":""}],"src":"11283:260:23"},{"body":{"nativeSrc":"11695:459:23","nodeType":"YulBlock","src":"11695:459:23","statements":[{"body":{"nativeSrc":"11742:16:23","nodeType":"YulBlock","src":"11742:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11751:1:23","nodeType":"YulLiteral","src":"11751:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"11754:1:23","nodeType":"YulLiteral","src":"11754:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11744:6:23","nodeType":"YulIdentifier","src":"11744:6:23"},"nativeSrc":"11744:12:23","nodeType":"YulFunctionCall","src":"11744:12:23"},"nativeSrc":"11744:12:23","nodeType":"YulExpressionStatement","src":"11744:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"11716:7:23","nodeType":"YulIdentifier","src":"11716:7:23"},{"name":"headStart","nativeSrc":"11725:9:23","nodeType":"YulIdentifier","src":"11725:9:23"}],"functionName":{"name":"sub","nativeSrc":"11712:3:23","nodeType":"YulIdentifier","src":"11712:3:23"},"nativeSrc":"11712:23:23","nodeType":"YulFunctionCall","src":"11712:23:23"},{"kind":"number","nativeSrc":"11737:3:23","nodeType":"YulLiteral","src":"11737:3:23","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"11708:3:23","nodeType":"YulIdentifier","src":"11708:3:23"},"nativeSrc":"11708:33:23","nodeType":"YulFunctionCall","src":"11708:33:23"},"nativeSrc":"11705:53:23","nodeType":"YulIf","src":"11705:53:23"},{"nativeSrc":"11767:39:23","nodeType":"YulAssignment","src":"11767:39:23","value":{"arguments":[{"name":"headStart","nativeSrc":"11796:9:23","nodeType":"YulIdentifier","src":"11796:9:23"}],"functionName":{"name":"abi_decode_address","nativeSrc":"11777:18:23","nodeType":"YulIdentifier","src":"11777:18:23"},"nativeSrc":"11777:29:23","nodeType":"YulFunctionCall","src":"11777:29:23"},"variableNames":[{"name":"value0","nativeSrc":"11767:6:23","nodeType":"YulIdentifier","src":"11767:6:23"}]},{"nativeSrc":"11815:48:23","nodeType":"YulAssignment","src":"11815:48:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11848:9:23","nodeType":"YulIdentifier","src":"11848:9:23"},{"kind":"number","nativeSrc":"11859:2:23","nodeType":"YulLiteral","src":"11859:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11844:3:23","nodeType":"YulIdentifier","src":"11844:3:23"},"nativeSrc":"11844:18:23","nodeType":"YulFunctionCall","src":"11844:18:23"}],"functionName":{"name":"abi_decode_address","nativeSrc":"11825:18:23","nodeType":"YulIdentifier","src":"11825:18:23"},"nativeSrc":"11825:38:23","nodeType":"YulFunctionCall","src":"11825:38:23"},"variableNames":[{"name":"value1","nativeSrc":"11815:6:23","nodeType":"YulIdentifier","src":"11815:6:23"}]},{"nativeSrc":"11872:42:23","nodeType":"YulAssignment","src":"11872:42:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11899:9:23","nodeType":"YulIdentifier","src":"11899:9:23"},{"kind":"number","nativeSrc":"11910:2:23","nodeType":"YulLiteral","src":"11910:2:23","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11895:3:23","nodeType":"YulIdentifier","src":"11895:3:23"},"nativeSrc":"11895:18:23","nodeType":"YulFunctionCall","src":"11895:18:23"}],"functionName":{"name":"calldataload","nativeSrc":"11882:12:23","nodeType":"YulIdentifier","src":"11882:12:23"},"nativeSrc":"11882:32:23","nodeType":"YulFunctionCall","src":"11882:32:23"},"variableNames":[{"name":"value2","nativeSrc":"11872:6:23","nodeType":"YulIdentifier","src":"11872:6:23"}]},{"nativeSrc":"11923:42:23","nodeType":"YulAssignment","src":"11923:42:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11950:9:23","nodeType":"YulIdentifier","src":"11950:9:23"},{"kind":"number","nativeSrc":"11961:2:23","nodeType":"YulLiteral","src":"11961:2:23","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11946:3:23","nodeType":"YulIdentifier","src":"11946:3:23"},"nativeSrc":"11946:18:23","nodeType":"YulFunctionCall","src":"11946:18:23"}],"functionName":{"name":"calldataload","nativeSrc":"11933:12:23","nodeType":"YulIdentifier","src":"11933:12:23"},"nativeSrc":"11933:32:23","nodeType":"YulFunctionCall","src":"11933:32:23"},"variableNames":[{"name":"value3","nativeSrc":"11923:6:23","nodeType":"YulIdentifier","src":"11923:6:23"}]},{"nativeSrc":"11974:47:23","nodeType":"YulVariableDeclaration","src":"11974:47:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12005:9:23","nodeType":"YulIdentifier","src":"12005:9:23"},{"kind":"number","nativeSrc":"12016:3:23","nodeType":"YulLiteral","src":"12016:3:23","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"12001:3:23","nodeType":"YulIdentifier","src":"12001:3:23"},"nativeSrc":"12001:19:23","nodeType":"YulFunctionCall","src":"12001:19:23"}],"functionName":{"name":"calldataload","nativeSrc":"11988:12:23","nodeType":"YulIdentifier","src":"11988:12:23"},"nativeSrc":"11988:33:23","nodeType":"YulFunctionCall","src":"11988:33:23"},"variables":[{"name":"offset","nativeSrc":"11978:6:23","nodeType":"YulTypedName","src":"11978:6:23","type":""}]},{"body":{"nativeSrc":"12064:16:23","nodeType":"YulBlock","src":"12064:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12073:1:23","nodeType":"YulLiteral","src":"12073:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"12076:1:23","nodeType":"YulLiteral","src":"12076:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"12066:6:23","nodeType":"YulIdentifier","src":"12066:6:23"},"nativeSrc":"12066:12:23","nodeType":"YulFunctionCall","src":"12066:12:23"},"nativeSrc":"12066:12:23","nodeType":"YulExpressionStatement","src":"12066:12:23"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"12036:6:23","nodeType":"YulIdentifier","src":"12036:6:23"},{"kind":"number","nativeSrc":"12044:18:23","nodeType":"YulLiteral","src":"12044:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"12033:2:23","nodeType":"YulIdentifier","src":"12033:2:23"},"nativeSrc":"12033:30:23","nodeType":"YulFunctionCall","src":"12033:30:23"},"nativeSrc":"12030:50:23","nodeType":"YulIf","src":"12030:50:23"},{"nativeSrc":"12089:59:23","nodeType":"YulAssignment","src":"12089:59:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12120:9:23","nodeType":"YulIdentifier","src":"12120:9:23"},{"name":"offset","nativeSrc":"12131:6:23","nodeType":"YulIdentifier","src":"12131:6:23"}],"functionName":{"name":"add","nativeSrc":"12116:3:23","nodeType":"YulIdentifier","src":"12116:3:23"},"nativeSrc":"12116:22:23","nodeType":"YulFunctionCall","src":"12116:22:23"},{"name":"dataEnd","nativeSrc":"12140:7:23","nodeType":"YulIdentifier","src":"12140:7:23"}],"functionName":{"name":"abi_decode_bytes","nativeSrc":"12099:16:23","nodeType":"YulIdentifier","src":"12099:16:23"},"nativeSrc":"12099:49:23","nodeType":"YulFunctionCall","src":"12099:49:23"},"variableNames":[{"name":"value4","nativeSrc":"12089:6:23","nodeType":"YulIdentifier","src":"12089:6:23"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr","nativeSrc":"11548:606:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11629:9:23","nodeType":"YulTypedName","src":"11629:9:23","type":""},{"name":"dataEnd","nativeSrc":"11640:7:23","nodeType":"YulTypedName","src":"11640:7:23","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"11652:6:23","nodeType":"YulTypedName","src":"11652:6:23","type":""},{"name":"value1","nativeSrc":"11660:6:23","nodeType":"YulTypedName","src":"11660:6:23","type":""},{"name":"value2","nativeSrc":"11668:6:23","nodeType":"YulTypedName","src":"11668:6:23","type":""},{"name":"value3","nativeSrc":"11676:6:23","nodeType":"YulTypedName","src":"11676:6:23","type":""},{"name":"value4","nativeSrc":"11684:6:23","nodeType":"YulTypedName","src":"11684:6:23","type":""}],"src":"11548:606:23"},{"body":{"nativeSrc":"12263:218:23","nodeType":"YulBlock","src":"12263:218:23","statements":[{"body":{"nativeSrc":"12309:16:23","nodeType":"YulBlock","src":"12309:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12318:1:23","nodeType":"YulLiteral","src":"12318:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"12321:1:23","nodeType":"YulLiteral","src":"12321:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"12311:6:23","nodeType":"YulIdentifier","src":"12311:6:23"},"nativeSrc":"12311:12:23","nodeType":"YulFunctionCall","src":"12311:12:23"},"nativeSrc":"12311:12:23","nodeType":"YulExpressionStatement","src":"12311:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"12284:7:23","nodeType":"YulIdentifier","src":"12284:7:23"},{"name":"headStart","nativeSrc":"12293:9:23","nodeType":"YulIdentifier","src":"12293:9:23"}],"functionName":{"name":"sub","nativeSrc":"12280:3:23","nodeType":"YulIdentifier","src":"12280:3:23"},"nativeSrc":"12280:23:23","nodeType":"YulFunctionCall","src":"12280:23:23"},{"kind":"number","nativeSrc":"12305:2:23","nodeType":"YulLiteral","src":"12305:2:23","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"12276:3:23","nodeType":"YulIdentifier","src":"12276:3:23"},"nativeSrc":"12276:32:23","nodeType":"YulFunctionCall","src":"12276:32:23"},"nativeSrc":"12273:52:23","nodeType":"YulIf","src":"12273:52:23"},{"nativeSrc":"12334:39:23","nodeType":"YulAssignment","src":"12334:39:23","value":{"arguments":[{"name":"headStart","nativeSrc":"12363:9:23","nodeType":"YulIdentifier","src":"12363:9:23"}],"functionName":{"name":"abi_decode_address","nativeSrc":"12344:18:23","nodeType":"YulIdentifier","src":"12344:18:23"},"nativeSrc":"12344:29:23","nodeType":"YulFunctionCall","src":"12344:29:23"},"variableNames":[{"name":"value0","nativeSrc":"12334:6:23","nodeType":"YulIdentifier","src":"12334:6:23"}]},{"nativeSrc":"12382:42:23","nodeType":"YulAssignment","src":"12382:42:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12409:9:23","nodeType":"YulIdentifier","src":"12409:9:23"},{"kind":"number","nativeSrc":"12420:2:23","nodeType":"YulLiteral","src":"12420:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12405:3:23","nodeType":"YulIdentifier","src":"12405:3:23"},"nativeSrc":"12405:18:23","nodeType":"YulFunctionCall","src":"12405:18:23"}],"functionName":{"name":"calldataload","nativeSrc":"12392:12:23","nodeType":"YulIdentifier","src":"12392:12:23"},"nativeSrc":"12392:32:23","nodeType":"YulFunctionCall","src":"12392:32:23"},"variableNames":[{"name":"value1","nativeSrc":"12382:6:23","nodeType":"YulIdentifier","src":"12382:6:23"}]},{"nativeSrc":"12433:42:23","nodeType":"YulAssignment","src":"12433:42:23","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12460:9:23","nodeType":"YulIdentifier","src":"12460:9:23"},{"kind":"number","nativeSrc":"12471:2:23","nodeType":"YulLiteral","src":"12471:2:23","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12456:3:23","nodeType":"YulIdentifier","src":"12456:3:23"},"nativeSrc":"12456:18:23","nodeType":"YulFunctionCall","src":"12456:18:23"}],"functionName":{"name":"calldataload","nativeSrc":"12443:12:23","nodeType":"YulIdentifier","src":"12443:12:23"},"nativeSrc":"12443:32:23","nodeType":"YulFunctionCall","src":"12443:32:23"},"variableNames":[{"name":"value2","nativeSrc":"12433:6:23","nodeType":"YulIdentifier","src":"12433:6:23"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_uint256","nativeSrc":"12159:322:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12213:9:23","nodeType":"YulTypedName","src":"12213:9:23","type":""},{"name":"dataEnd","nativeSrc":"12224:7:23","nodeType":"YulTypedName","src":"12224:7:23","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"12236:6:23","nodeType":"YulTypedName","src":"12236:6:23","type":""},{"name":"value1","nativeSrc":"12244:6:23","nodeType":"YulTypedName","src":"12244:6:23","type":""},{"name":"value2","nativeSrc":"12252:6:23","nodeType":"YulTypedName","src":"12252:6:23","type":""}],"src":"12159:322:23"},{"body":{"nativeSrc":"12541:325:23","nodeType":"YulBlock","src":"12541:325:23","statements":[{"nativeSrc":"12551:22:23","nodeType":"YulAssignment","src":"12551:22:23","value":{"arguments":[{"kind":"number","nativeSrc":"12565:1:23","nodeType":"YulLiteral","src":"12565:1:23","type":"","value":"1"},{"name":"data","nativeSrc":"12568:4:23","nodeType":"YulIdentifier","src":"12568:4:23"}],"functionName":{"name":"shr","nativeSrc":"12561:3:23","nodeType":"YulIdentifier","src":"12561:3:23"},"nativeSrc":"12561:12:23","nodeType":"YulFunctionCall","src":"12561:12:23"},"variableNames":[{"name":"length","nativeSrc":"12551:6:23","nodeType":"YulIdentifier","src":"12551:6:23"}]},{"nativeSrc":"12582:38:23","nodeType":"YulVariableDeclaration","src":"12582:38:23","value":{"arguments":[{"name":"data","nativeSrc":"12612:4:23","nodeType":"YulIdentifier","src":"12612:4:23"},{"kind":"number","nativeSrc":"12618:1:23","nodeType":"YulLiteral","src":"12618:1:23","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"12608:3:23","nodeType":"YulIdentifier","src":"12608:3:23"},"nativeSrc":"12608:12:23","nodeType":"YulFunctionCall","src":"12608:12:23"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"12586:18:23","nodeType":"YulTypedName","src":"12586:18:23","type":""}]},{"body":{"nativeSrc":"12659:31:23","nodeType":"YulBlock","src":"12659:31:23","statements":[{"nativeSrc":"12661:27:23","nodeType":"YulAssignment","src":"12661:27:23","value":{"arguments":[{"name":"length","nativeSrc":"12675:6:23","nodeType":"YulIdentifier","src":"12675:6:23"},{"kind":"number","nativeSrc":"12683:4:23","nodeType":"YulLiteral","src":"12683:4:23","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"12671:3:23","nodeType":"YulIdentifier","src":"12671:3:23"},"nativeSrc":"12671:17:23","nodeType":"YulFunctionCall","src":"12671:17:23"},"variableNames":[{"name":"length","nativeSrc":"12661:6:23","nodeType":"YulIdentifier","src":"12661:6:23"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"12639:18:23","nodeType":"YulIdentifier","src":"12639:18:23"}],"functionName":{"name":"iszero","nativeSrc":"12632:6:23","nodeType":"YulIdentifier","src":"12632:6:23"},"nativeSrc":"12632:26:23","nodeType":"YulFunctionCall","src":"12632:26:23"},"nativeSrc":"12629:61:23","nodeType":"YulIf","src":"12629:61:23"},{"body":{"nativeSrc":"12749:111:23","nodeType":"YulBlock","src":"12749:111:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12770:1:23","nodeType":"YulLiteral","src":"12770:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"12777:3:23","nodeType":"YulLiteral","src":"12777:3:23","type":"","value":"224"},{"kind":"number","nativeSrc":"12782:10:23","nodeType":"YulLiteral","src":"12782:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"12773:3:23","nodeType":"YulIdentifier","src":"12773:3:23"},"nativeSrc":"12773:20:23","nodeType":"YulFunctionCall","src":"12773:20:23"}],"functionName":{"name":"mstore","nativeSrc":"12763:6:23","nodeType":"YulIdentifier","src":"12763:6:23"},"nativeSrc":"12763:31:23","nodeType":"YulFunctionCall","src":"12763:31:23"},"nativeSrc":"12763:31:23","nodeType":"YulExpressionStatement","src":"12763:31:23"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"12814:1:23","nodeType":"YulLiteral","src":"12814:1:23","type":"","value":"4"},{"kind":"number","nativeSrc":"12817:4:23","nodeType":"YulLiteral","src":"12817:4:23","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"12807:6:23","nodeType":"YulIdentifier","src":"12807:6:23"},"nativeSrc":"12807:15:23","nodeType":"YulFunctionCall","src":"12807:15:23"},"nativeSrc":"12807:15:23","nodeType":"YulExpressionStatement","src":"12807:15:23"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"12842:1:23","nodeType":"YulLiteral","src":"12842:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"12845:4:23","nodeType":"YulLiteral","src":"12845:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"12835:6:23","nodeType":"YulIdentifier","src":"12835:6:23"},"nativeSrc":"12835:15:23","nodeType":"YulFunctionCall","src":"12835:15:23"},"nativeSrc":"12835:15:23","nodeType":"YulExpressionStatement","src":"12835:15:23"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"12705:18:23","nodeType":"YulIdentifier","src":"12705:18:23"},{"arguments":[{"name":"length","nativeSrc":"12728:6:23","nodeType":"YulIdentifier","src":"12728:6:23"},{"kind":"number","nativeSrc":"12736:2:23","nodeType":"YulLiteral","src":"12736:2:23","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"12725:2:23","nodeType":"YulIdentifier","src":"12725:2:23"},"nativeSrc":"12725:14:23","nodeType":"YulFunctionCall","src":"12725:14:23"}],"functionName":{"name":"eq","nativeSrc":"12702:2:23","nodeType":"YulIdentifier","src":"12702:2:23"},"nativeSrc":"12702:38:23","nodeType":"YulFunctionCall","src":"12702:38:23"},"nativeSrc":"12699:161:23","nodeType":"YulIf","src":"12699:161:23"}]},"name":"extract_byte_array_length","nativeSrc":"12486:380:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"12521:4:23","nodeType":"YulTypedName","src":"12521:4:23","type":""}],"returnVariables":[{"name":"length","nativeSrc":"12530:6:23","nodeType":"YulTypedName","src":"12530:6:23","type":""}],"src":"12486:380:23"},{"body":{"nativeSrc":"13000:175:23","nodeType":"YulBlock","src":"13000:175:23","statements":[{"nativeSrc":"13010:26:23","nodeType":"YulAssignment","src":"13010:26:23","value":{"arguments":[{"name":"headStart","nativeSrc":"13022:9:23","nodeType":"YulIdentifier","src":"13022:9:23"},{"kind":"number","nativeSrc":"13033:2:23","nodeType":"YulLiteral","src":"13033:2:23","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13018:3:23","nodeType":"YulIdentifier","src":"13018:3:23"},"nativeSrc":"13018:18:23","nodeType":"YulFunctionCall","src":"13018:18:23"},"variableNames":[{"name":"tail","nativeSrc":"13010:4:23","nodeType":"YulIdentifier","src":"13010:4:23"}]},{"nativeSrc":"13045:29:23","nodeType":"YulVariableDeclaration","src":"13045:29:23","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"13063:3:23","nodeType":"YulLiteral","src":"13063:3:23","type":"","value":"160"},{"kind":"number","nativeSrc":"13068:1:23","nodeType":"YulLiteral","src":"13068:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"13059:3:23","nodeType":"YulIdentifier","src":"13059:3:23"},"nativeSrc":"13059:11:23","nodeType":"YulFunctionCall","src":"13059:11:23"},{"kind":"number","nativeSrc":"13072:1:23","nodeType":"YulLiteral","src":"13072:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"13055:3:23","nodeType":"YulIdentifier","src":"13055:3:23"},"nativeSrc":"13055:19:23","nodeType":"YulFunctionCall","src":"13055:19:23"},"variables":[{"name":"_1","nativeSrc":"13049:2:23","nodeType":"YulTypedName","src":"13049:2:23","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13090:9:23","nodeType":"YulIdentifier","src":"13090:9:23"},{"arguments":[{"name":"value0","nativeSrc":"13105:6:23","nodeType":"YulIdentifier","src":"13105:6:23"},{"name":"_1","nativeSrc":"13113:2:23","nodeType":"YulIdentifier","src":"13113:2:23"}],"functionName":{"name":"and","nativeSrc":"13101:3:23","nodeType":"YulIdentifier","src":"13101:3:23"},"nativeSrc":"13101:15:23","nodeType":"YulFunctionCall","src":"13101:15:23"}],"functionName":{"name":"mstore","nativeSrc":"13083:6:23","nodeType":"YulIdentifier","src":"13083:6:23"},"nativeSrc":"13083:34:23","nodeType":"YulFunctionCall","src":"13083:34:23"},"nativeSrc":"13083:34:23","nodeType":"YulExpressionStatement","src":"13083:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13137:9:23","nodeType":"YulIdentifier","src":"13137:9:23"},{"kind":"number","nativeSrc":"13148:2:23","nodeType":"YulLiteral","src":"13148:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13133:3:23","nodeType":"YulIdentifier","src":"13133:3:23"},"nativeSrc":"13133:18:23","nodeType":"YulFunctionCall","src":"13133:18:23"},{"arguments":[{"name":"value1","nativeSrc":"13157:6:23","nodeType":"YulIdentifier","src":"13157:6:23"},{"name":"_1","nativeSrc":"13165:2:23","nodeType":"YulIdentifier","src":"13165:2:23"}],"functionName":{"name":"and","nativeSrc":"13153:3:23","nodeType":"YulIdentifier","src":"13153:3:23"},"nativeSrc":"13153:15:23","nodeType":"YulFunctionCall","src":"13153:15:23"}],"functionName":{"name":"mstore","nativeSrc":"13126:6:23","nodeType":"YulIdentifier","src":"13126:6:23"},"nativeSrc":"13126:43:23","nodeType":"YulFunctionCall","src":"13126:43:23"},"nativeSrc":"13126:43:23","nodeType":"YulExpressionStatement","src":"13126:43:23"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"12871:304:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12961:9:23","nodeType":"YulTypedName","src":"12961:9:23","type":""},{"name":"value1","nativeSrc":"12972:6:23","nodeType":"YulTypedName","src":"12972:6:23","type":""},{"name":"value0","nativeSrc":"12980:6:23","nodeType":"YulTypedName","src":"12980:6:23","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12991:4:23","nodeType":"YulTypedName","src":"12991:4:23","type":""}],"src":"12871:304:23"},{"body":{"nativeSrc":"13354:233:23","nodeType":"YulBlock","src":"13354:233:23","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13371:9:23","nodeType":"YulIdentifier","src":"13371:9:23"},{"kind":"number","nativeSrc":"13382:2:23","nodeType":"YulLiteral","src":"13382:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"13364:6:23","nodeType":"YulIdentifier","src":"13364:6:23"},"nativeSrc":"13364:21:23","nodeType":"YulFunctionCall","src":"13364:21:23"},"nativeSrc":"13364:21:23","nodeType":"YulExpressionStatement","src":"13364:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13405:9:23","nodeType":"YulIdentifier","src":"13405:9:23"},{"kind":"number","nativeSrc":"13416:2:23","nodeType":"YulLiteral","src":"13416:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13401:3:23","nodeType":"YulIdentifier","src":"13401:3:23"},"nativeSrc":"13401:18:23","nodeType":"YulFunctionCall","src":"13401:18:23"},{"kind":"number","nativeSrc":"13421:2:23","nodeType":"YulLiteral","src":"13421:2:23","type":"","value":"43"}],"functionName":{"name":"mstore","nativeSrc":"13394:6:23","nodeType":"YulIdentifier","src":"13394:6:23"},"nativeSrc":"13394:30:23","nodeType":"YulFunctionCall","src":"13394:30:23"},"nativeSrc":"13394:30:23","nodeType":"YulExpressionStatement","src":"13394:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13444:9:23","nodeType":"YulIdentifier","src":"13444:9:23"},{"kind":"number","nativeSrc":"13455:2:23","nodeType":"YulLiteral","src":"13455:2:23","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13440:3:23","nodeType":"YulIdentifier","src":"13440:3:23"},"nativeSrc":"13440:18:23","nodeType":"YulFunctionCall","src":"13440:18:23"},{"hexValue":"43616c6c6572206d757374206265206f776e6572206f72207665726966696564","kind":"string","nativeSrc":"13460:34:23","nodeType":"YulLiteral","src":"13460:34:23","type":"","value":"Caller must be owner or verified"}],"functionName":{"name":"mstore","nativeSrc":"13433:6:23","nodeType":"YulIdentifier","src":"13433:6:23"},"nativeSrc":"13433:62:23","nodeType":"YulFunctionCall","src":"13433:62:23"},"nativeSrc":"13433:62:23","nodeType":"YulExpressionStatement","src":"13433:62:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13515:9:23","nodeType":"YulIdentifier","src":"13515:9:23"},{"kind":"number","nativeSrc":"13526:2:23","nodeType":"YulLiteral","src":"13526:2:23","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"13511:3:23","nodeType":"YulIdentifier","src":"13511:3:23"},"nativeSrc":"13511:18:23","nodeType":"YulFunctionCall","src":"13511:18:23"},{"hexValue":"2072657365617263686572","kind":"string","nativeSrc":"13531:13:23","nodeType":"YulLiteral","src":"13531:13:23","type":"","value":" researcher"}],"functionName":{"name":"mstore","nativeSrc":"13504:6:23","nodeType":"YulIdentifier","src":"13504:6:23"},"nativeSrc":"13504:41:23","nodeType":"YulFunctionCall","src":"13504:41:23"},"nativeSrc":"13504:41:23","nodeType":"YulExpressionStatement","src":"13504:41:23"},{"nativeSrc":"13554:27:23","nodeType":"YulAssignment","src":"13554:27:23","value":{"arguments":[{"name":"headStart","nativeSrc":"13566:9:23","nodeType":"YulIdentifier","src":"13566:9:23"},{"kind":"number","nativeSrc":"13577:3:23","nodeType":"YulLiteral","src":"13577:3:23","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"13562:3:23","nodeType":"YulIdentifier","src":"13562:3:23"},"nativeSrc":"13562:19:23","nodeType":"YulFunctionCall","src":"13562:19:23"},"variableNames":[{"name":"tail","nativeSrc":"13554:4:23","nodeType":"YulIdentifier","src":"13554:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_bfa583a8d2598f5edd72edfde6db9a2b6010ae7161d27686b20babdb1d529b4f__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"13180:407:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13331:9:23","nodeType":"YulTypedName","src":"13331:9:23","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13345:4:23","nodeType":"YulTypedName","src":"13345:4:23","type":""}],"src":"13180:407:23"},{"body":{"nativeSrc":"13766:173:23","nodeType":"YulBlock","src":"13766:173:23","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13783:9:23","nodeType":"YulIdentifier","src":"13783:9:23"},{"kind":"number","nativeSrc":"13794:2:23","nodeType":"YulLiteral","src":"13794:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"13776:6:23","nodeType":"YulIdentifier","src":"13776:6:23"},"nativeSrc":"13776:21:23","nodeType":"YulFunctionCall","src":"13776:21:23"},"nativeSrc":"13776:21:23","nodeType":"YulExpressionStatement","src":"13776:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13817:9:23","nodeType":"YulIdentifier","src":"13817:9:23"},{"kind":"number","nativeSrc":"13828:2:23","nodeType":"YulLiteral","src":"13828:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13813:3:23","nodeType":"YulIdentifier","src":"13813:3:23"},"nativeSrc":"13813:18:23","nodeType":"YulFunctionCall","src":"13813:18:23"},{"kind":"number","nativeSrc":"13833:2:23","nodeType":"YulLiteral","src":"13833:2:23","type":"","value":"23"}],"functionName":{"name":"mstore","nativeSrc":"13806:6:23","nodeType":"YulIdentifier","src":"13806:6:23"},"nativeSrc":"13806:30:23","nodeType":"YulFunctionCall","src":"13806:30:23"},"nativeSrc":"13806:30:23","nodeType":"YulExpressionStatement","src":"13806:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13856:9:23","nodeType":"YulIdentifier","src":"13856:9:23"},{"kind":"number","nativeSrc":"13867:2:23","nodeType":"YulLiteral","src":"13867:2:23","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13852:3:23","nodeType":"YulIdentifier","src":"13852:3:23"},"nativeSrc":"13852:18:23","nodeType":"YulFunctionCall","src":"13852:18:23"},{"hexValue":"526573656172636820646f6573206e6f74206578697374","kind":"string","nativeSrc":"13872:25:23","nodeType":"YulLiteral","src":"13872:25:23","type":"","value":"Research does not exist"}],"functionName":{"name":"mstore","nativeSrc":"13845:6:23","nodeType":"YulIdentifier","src":"13845:6:23"},"nativeSrc":"13845:53:23","nodeType":"YulFunctionCall","src":"13845:53:23"},"nativeSrc":"13845:53:23","nodeType":"YulExpressionStatement","src":"13845:53:23"},{"nativeSrc":"13907:26:23","nodeType":"YulAssignment","src":"13907:26:23","value":{"arguments":[{"name":"headStart","nativeSrc":"13919:9:23","nodeType":"YulIdentifier","src":"13919:9:23"},{"kind":"number","nativeSrc":"13930:2:23","nodeType":"YulLiteral","src":"13930:2:23","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"13915:3:23","nodeType":"YulIdentifier","src":"13915:3:23"},"nativeSrc":"13915:18:23","nodeType":"YulFunctionCall","src":"13915:18:23"},"variableNames":[{"name":"tail","nativeSrc":"13907:4:23","nodeType":"YulIdentifier","src":"13907:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_48567b562a28c744dba76ce6943cf1c17ec4b60da09661342613b80a5b797077__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"13592:347:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13743:9:23","nodeType":"YulTypedName","src":"13743:9:23","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13757:4:23","nodeType":"YulTypedName","src":"13757:4:23","type":""}],"src":"13592:347:23"},{"body":{"nativeSrc":"14093:168:23","nodeType":"YulBlock","src":"14093:168:23","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14110:9:23","nodeType":"YulIdentifier","src":"14110:9:23"},{"kind":"number","nativeSrc":"14121:2:23","nodeType":"YulLiteral","src":"14121:2:23","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"14103:6:23","nodeType":"YulIdentifier","src":"14103:6:23"},"nativeSrc":"14103:21:23","nodeType":"YulFunctionCall","src":"14103:21:23"},"nativeSrc":"14103:21:23","nodeType":"YulExpressionStatement","src":"14103:21:23"},{"nativeSrc":"14133:53:23","nodeType":"YulAssignment","src":"14133:53:23","value":{"arguments":[{"name":"value0","nativeSrc":"14159:6:23","nodeType":"YulIdentifier","src":"14159:6:23"},{"arguments":[{"name":"headStart","nativeSrc":"14171:9:23","nodeType":"YulIdentifier","src":"14171:9:23"},{"kind":"number","nativeSrc":"14182:2:23","nodeType":"YulLiteral","src":"14182:2:23","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14167:3:23","nodeType":"YulIdentifier","src":"14167:3:23"},"nativeSrc":"14167:18:23","nodeType":"YulFunctionCall","src":"14167:18:23"}],"functionName":{"name":"abi_encode_string","nativeSrc":"14141:17:23","nodeType":"YulIdentifier","src":"14141:17:23"},"nativeSrc":"14141:45:23","nodeType":"YulFunctionCall","src":"14141:45:23"},"variableNames":[{"name":"tail","nativeSrc":"14133:4:23","nodeType":"YulIdentifier","src":"14133:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14206:9:23","nodeType":"YulIdentifier","src":"14206:9:23"},{"kind":"number","nativeSrc":"14217:2:23","nodeType":"YulLiteral","src":"14217:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14202:3:23","nodeType":"YulIdentifier","src":"14202:3:23"},"nativeSrc":"14202:18:23","nodeType":"YulFunctionCall","src":"14202:18:23"},{"arguments":[{"name":"value1","nativeSrc":"14226:6:23","nodeType":"YulIdentifier","src":"14226:6:23"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"14242:3:23","nodeType":"YulLiteral","src":"14242:3:23","type":"","value":"160"},{"kind":"number","nativeSrc":"14247:1:23","nodeType":"YulLiteral","src":"14247:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"14238:3:23","nodeType":"YulIdentifier","src":"14238:3:23"},"nativeSrc":"14238:11:23","nodeType":"YulFunctionCall","src":"14238:11:23"},{"kind":"number","nativeSrc":"14251:1:23","nodeType":"YulLiteral","src":"14251:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"14234:3:23","nodeType":"YulIdentifier","src":"14234:3:23"},"nativeSrc":"14234:19:23","nodeType":"YulFunctionCall","src":"14234:19:23"}],"functionName":{"name":"and","nativeSrc":"14222:3:23","nodeType":"YulIdentifier","src":"14222:3:23"},"nativeSrc":"14222:32:23","nodeType":"YulFunctionCall","src":"14222:32:23"}],"functionName":{"name":"mstore","nativeSrc":"14195:6:23","nodeType":"YulIdentifier","src":"14195:6:23"},"nativeSrc":"14195:60:23","nodeType":"YulFunctionCall","src":"14195:60:23"},"nativeSrc":"14195:60:23","nodeType":"YulExpressionStatement","src":"14195:60:23"}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_address__to_t_string_memory_ptr_t_address__fromStack_reversed","nativeSrc":"13944:317:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14054:9:23","nodeType":"YulTypedName","src":"14054:9:23","type":""},{"name":"value1","nativeSrc":"14065:6:23","nodeType":"YulTypedName","src":"14065:6:23","type":""},{"name":"value0","nativeSrc":"14073:6:23","nodeType":"YulTypedName","src":"14073:6:23","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14084:4:23","nodeType":"YulTypedName","src":"14084:4:23","type":""}],"src":"13944:317:23"},{"body":{"nativeSrc":"14298:95:23","nodeType":"YulBlock","src":"14298:95:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14315:1:23","nodeType":"YulLiteral","src":"14315:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"14322:3:23","nodeType":"YulLiteral","src":"14322:3:23","type":"","value":"224"},{"kind":"number","nativeSrc":"14327:10:23","nodeType":"YulLiteral","src":"14327:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"14318:3:23","nodeType":"YulIdentifier","src":"14318:3:23"},"nativeSrc":"14318:20:23","nodeType":"YulFunctionCall","src":"14318:20:23"}],"functionName":{"name":"mstore","nativeSrc":"14308:6:23","nodeType":"YulIdentifier","src":"14308:6:23"},"nativeSrc":"14308:31:23","nodeType":"YulFunctionCall","src":"14308:31:23"},"nativeSrc":"14308:31:23","nodeType":"YulExpressionStatement","src":"14308:31:23"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"14355:1:23","nodeType":"YulLiteral","src":"14355:1:23","type":"","value":"4"},{"kind":"number","nativeSrc":"14358:4:23","nodeType":"YulLiteral","src":"14358:4:23","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"14348:6:23","nodeType":"YulIdentifier","src":"14348:6:23"},"nativeSrc":"14348:15:23","nodeType":"YulFunctionCall","src":"14348:15:23"},"nativeSrc":"14348:15:23","nodeType":"YulExpressionStatement","src":"14348:15:23"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"14379:1:23","nodeType":"YulLiteral","src":"14379:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"14382:4:23","nodeType":"YulLiteral","src":"14382:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"14372:6:23","nodeType":"YulIdentifier","src":"14372:6:23"},"nativeSrc":"14372:15:23","nodeType":"YulFunctionCall","src":"14372:15:23"},"nativeSrc":"14372:15:23","nodeType":"YulExpressionStatement","src":"14372:15:23"}]},"name":"panic_error_0x32","nativeSrc":"14266:127:23","nodeType":"YulFunctionDefinition","src":"14266:127:23"},{"body":{"nativeSrc":"14452:89:23","nodeType":"YulBlock","src":"14452:89:23","statements":[{"body":{"nativeSrc":"14486:22:23","nodeType":"YulBlock","src":"14486:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x21","nativeSrc":"14488:16:23","nodeType":"YulIdentifier","src":"14488:16:23"},"nativeSrc":"14488:18:23","nodeType":"YulFunctionCall","src":"14488:18:23"},"nativeSrc":"14488:18:23","nodeType":"YulExpressionStatement","src":"14488:18:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"14475:5:23","nodeType":"YulIdentifier","src":"14475:5:23"},{"kind":"number","nativeSrc":"14482:1:23","nodeType":"YulLiteral","src":"14482:1:23","type":"","value":"4"}],"functionName":{"name":"lt","nativeSrc":"14472:2:23","nodeType":"YulIdentifier","src":"14472:2:23"},"nativeSrc":"14472:12:23","nodeType":"YulFunctionCall","src":"14472:12:23"}],"functionName":{"name":"iszero","nativeSrc":"14465:6:23","nodeType":"YulIdentifier","src":"14465:6:23"},"nativeSrc":"14465:20:23","nodeType":"YulFunctionCall","src":"14465:20:23"},"nativeSrc":"14462:46:23","nodeType":"YulIf","src":"14462:46:23"},{"expression":{"arguments":[{"name":"pos","nativeSrc":"14524:3:23","nodeType":"YulIdentifier","src":"14524:3:23"},{"name":"value","nativeSrc":"14529:5:23","nodeType":"YulIdentifier","src":"14529:5:23"}],"functionName":{"name":"mstore","nativeSrc":"14517:6:23","nodeType":"YulIdentifier","src":"14517:6:23"},"nativeSrc":"14517:18:23","nodeType":"YulFunctionCall","src":"14517:18:23"},"nativeSrc":"14517:18:23","nodeType":"YulExpressionStatement","src":"14517:18:23"}]},"name":"abi_encode_enum_DataLocation","nativeSrc":"14398:143:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"14436:5:23","nodeType":"YulTypedName","src":"14436:5:23","type":""},{"name":"pos","nativeSrc":"14443:3:23","nodeType":"YulTypedName","src":"14443:3:23","type":""}],"src":"14398:143:23"},{"body":{"nativeSrc":"14605:538:23","nodeType":"YulBlock","src":"14605:538:23","statements":[{"nativeSrc":"14615:16:23","nodeType":"YulVariableDeclaration","src":"14615:16:23","value":{"name":"pos","nativeSrc":"14628:3:23","nodeType":"YulIdentifier","src":"14628:3:23"},"variables":[{"name":"pos_1","nativeSrc":"14619:5:23","nodeType":"YulTypedName","src":"14619:5:23","type":""}]},{"nativeSrc":"14640:26:23","nodeType":"YulVariableDeclaration","src":"14640:26:23","value":{"arguments":[{"name":"value","nativeSrc":"14660:5:23","nodeType":"YulIdentifier","src":"14660:5:23"}],"functionName":{"name":"mload","nativeSrc":"14654:5:23","nodeType":"YulIdentifier","src":"14654:5:23"},"nativeSrc":"14654:12:23","nodeType":"YulFunctionCall","src":"14654:12:23"},"variables":[{"name":"length","nativeSrc":"14644:6:23","nodeType":"YulTypedName","src":"14644:6:23","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"14682:3:23","nodeType":"YulIdentifier","src":"14682:3:23"},{"name":"length","nativeSrc":"14687:6:23","nodeType":"YulIdentifier","src":"14687:6:23"}],"functionName":{"name":"mstore","nativeSrc":"14675:6:23","nodeType":"YulIdentifier","src":"14675:6:23"},"nativeSrc":"14675:19:23","nodeType":"YulFunctionCall","src":"14675:19:23"},"nativeSrc":"14675:19:23","nodeType":"YulExpressionStatement","src":"14675:19:23"},{"nativeSrc":"14703:14:23","nodeType":"YulVariableDeclaration","src":"14703:14:23","value":{"kind":"number","nativeSrc":"14713:4:23","nodeType":"YulLiteral","src":"14713:4:23","type":"","value":"0x20"},"variables":[{"name":"_1","nativeSrc":"14707:2:23","nodeType":"YulTypedName","src":"14707:2:23","type":""}]},{"nativeSrc":"14726:21:23","nodeType":"YulAssignment","src":"14726:21:23","value":{"arguments":[{"name":"pos","nativeSrc":"14737:3:23","nodeType":"YulIdentifier","src":"14737:3:23"},{"kind":"number","nativeSrc":"14742:4:23","nodeType":"YulLiteral","src":"14742:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"14733:3:23","nodeType":"YulIdentifier","src":"14733:3:23"},"nativeSrc":"14733:14:23","nodeType":"YulFunctionCall","src":"14733:14:23"},"variableNames":[{"name":"pos","nativeSrc":"14726:3:23","nodeType":"YulIdentifier","src":"14726:3:23"}]},{"nativeSrc":"14756:49:23","nodeType":"YulVariableDeclaration","src":"14756:49:23","value":{"arguments":[{"arguments":[{"name":"pos_1","nativeSrc":"14776:5:23","nodeType":"YulIdentifier","src":"14776:5:23"},{"arguments":[{"kind":"number","nativeSrc":"14787:1:23","nodeType":"YulLiteral","src":"14787:1:23","type":"","value":"5"},{"name":"length","nativeSrc":"14790:6:23","nodeType":"YulIdentifier","src":"14790:6:23"}],"functionName":{"name":"shl","nativeSrc":"14783:3:23","nodeType":"YulIdentifier","src":"14783:3:23"},"nativeSrc":"14783:14:23","nodeType":"YulFunctionCall","src":"14783:14:23"}],"functionName":{"name":"add","nativeSrc":"14772:3:23","nodeType":"YulIdentifier","src":"14772:3:23"},"nativeSrc":"14772:26:23","nodeType":"YulFunctionCall","src":"14772:26:23"},{"kind":"number","nativeSrc":"14800:4:23","nodeType":"YulLiteral","src":"14800:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"14768:3:23","nodeType":"YulIdentifier","src":"14768:3:23"},"nativeSrc":"14768:37:23","nodeType":"YulFunctionCall","src":"14768:37:23"},"variables":[{"name":"tail","nativeSrc":"14760:4:23","nodeType":"YulTypedName","src":"14760:4:23","type":""}]},{"nativeSrc":"14814:30:23","nodeType":"YulVariableDeclaration","src":"14814:30:23","value":{"arguments":[{"name":"value","nativeSrc":"14832:5:23","nodeType":"YulIdentifier","src":"14832:5:23"},{"kind":"number","nativeSrc":"14839:4:23","nodeType":"YulLiteral","src":"14839:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"14828:3:23","nodeType":"YulIdentifier","src":"14828:3:23"},"nativeSrc":"14828:16:23","nodeType":"YulFunctionCall","src":"14828:16:23"},"variables":[{"name":"srcPtr","nativeSrc":"14818:6:23","nodeType":"YulTypedName","src":"14818:6:23","type":""}]},{"nativeSrc":"14853:10:23","nodeType":"YulVariableDeclaration","src":"14853:10:23","value":{"kind":"number","nativeSrc":"14862:1:23","nodeType":"YulLiteral","src":"14862:1:23","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"14857:1:23","nodeType":"YulTypedName","src":"14857:1:23","type":""}]},{"body":{"nativeSrc":"14921:196:23","nodeType":"YulBlock","src":"14921:196:23","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"14942:3:23","nodeType":"YulIdentifier","src":"14942:3:23"},{"arguments":[{"arguments":[{"name":"tail","nativeSrc":"14955:4:23","nodeType":"YulIdentifier","src":"14955:4:23"},{"name":"pos_1","nativeSrc":"14961:5:23","nodeType":"YulIdentifier","src":"14961:5:23"}],"functionName":{"name":"sub","nativeSrc":"14951:3:23","nodeType":"YulIdentifier","src":"14951:3:23"},"nativeSrc":"14951:16:23","nodeType":"YulFunctionCall","src":"14951:16:23"},{"arguments":[{"kind":"number","nativeSrc":"14973:2:23","nodeType":"YulLiteral","src":"14973:2:23","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"14969:3:23","nodeType":"YulIdentifier","src":"14969:3:23"},"nativeSrc":"14969:7:23","nodeType":"YulFunctionCall","src":"14969:7:23"}],"functionName":{"name":"add","nativeSrc":"14947:3:23","nodeType":"YulIdentifier","src":"14947:3:23"},"nativeSrc":"14947:30:23","nodeType":"YulFunctionCall","src":"14947:30:23"}],"functionName":{"name":"mstore","nativeSrc":"14935:6:23","nodeType":"YulIdentifier","src":"14935:6:23"},"nativeSrc":"14935:43:23","nodeType":"YulFunctionCall","src":"14935:43:23"},"nativeSrc":"14935:43:23","nodeType":"YulExpressionStatement","src":"14935:43:23"},{"nativeSrc":"14991:46:23","nodeType":"YulAssignment","src":"14991:46:23","value":{"arguments":[{"arguments":[{"name":"srcPtr","nativeSrc":"15023:6:23","nodeType":"YulIdentifier","src":"15023:6:23"}],"functionName":{"name":"mload","nativeSrc":"15017:5:23","nodeType":"YulIdentifier","src":"15017:5:23"},"nativeSrc":"15017:13:23","nodeType":"YulFunctionCall","src":"15017:13:23"},{"name":"tail","nativeSrc":"15032:4:23","nodeType":"YulIdentifier","src":"15032:4:23"}],"functionName":{"name":"abi_encode_string","nativeSrc":"14999:17:23","nodeType":"YulIdentifier","src":"14999:17:23"},"nativeSrc":"14999:38:23","nodeType":"YulFunctionCall","src":"14999:38:23"},"variableNames":[{"name":"tail","nativeSrc":"14991:4:23","nodeType":"YulIdentifier","src":"14991:4:23"}]},{"nativeSrc":"15050:25:23","nodeType":"YulAssignment","src":"15050:25:23","value":{"arguments":[{"name":"srcPtr","nativeSrc":"15064:6:23","nodeType":"YulIdentifier","src":"15064:6:23"},{"name":"_1","nativeSrc":"15072:2:23","nodeType":"YulIdentifier","src":"15072:2:23"}],"functionName":{"name":"add","nativeSrc":"15060:3:23","nodeType":"YulIdentifier","src":"15060:3:23"},"nativeSrc":"15060:15:23","nodeType":"YulFunctionCall","src":"15060:15:23"},"variableNames":[{"name":"srcPtr","nativeSrc":"15050:6:23","nodeType":"YulIdentifier","src":"15050:6:23"}]},{"nativeSrc":"15088:19:23","nodeType":"YulAssignment","src":"15088:19:23","value":{"arguments":[{"name":"pos","nativeSrc":"15099:3:23","nodeType":"YulIdentifier","src":"15099:3:23"},{"name":"_1","nativeSrc":"15104:2:23","nodeType":"YulIdentifier","src":"15104:2:23"}],"functionName":{"name":"add","nativeSrc":"15095:3:23","nodeType":"YulIdentifier","src":"15095:3:23"},"nativeSrc":"15095:12:23","nodeType":"YulFunctionCall","src":"15095:12:23"},"variableNames":[{"name":"pos","nativeSrc":"15088:3:23","nodeType":"YulIdentifier","src":"15088:3:23"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"14883:1:23","nodeType":"YulIdentifier","src":"14883:1:23"},{"name":"length","nativeSrc":"14886:6:23","nodeType":"YulIdentifier","src":"14886:6:23"}],"functionName":{"name":"lt","nativeSrc":"14880:2:23","nodeType":"YulIdentifier","src":"14880:2:23"},"nativeSrc":"14880:13:23","nodeType":"YulFunctionCall","src":"14880:13:23"},"nativeSrc":"14872:245:23","nodeType":"YulForLoop","post":{"nativeSrc":"14894:18:23","nodeType":"YulBlock","src":"14894:18:23","statements":[{"nativeSrc":"14896:14:23","nodeType":"YulAssignment","src":"14896:14:23","value":{"arguments":[{"name":"i","nativeSrc":"14905:1:23","nodeType":"YulIdentifier","src":"14905:1:23"},{"kind":"number","nativeSrc":"14908:1:23","nodeType":"YulLiteral","src":"14908:1:23","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"14901:3:23","nodeType":"YulIdentifier","src":"14901:3:23"},"nativeSrc":"14901:9:23","nodeType":"YulFunctionCall","src":"14901:9:23"},"variableNames":[{"name":"i","nativeSrc":"14896:1:23","nodeType":"YulIdentifier","src":"14896:1:23"}]}]},"pre":{"nativeSrc":"14876:3:23","nodeType":"YulBlock","src":"14876:3:23","statements":[]},"src":"14872:245:23"},{"nativeSrc":"15126:11:23","nodeType":"YulAssignment","src":"15126:11:23","value":{"name":"tail","nativeSrc":"15133:4:23","nodeType":"YulIdentifier","src":"15133:4:23"},"variableNames":[{"name":"end","nativeSrc":"15126:3:23","nodeType":"YulIdentifier","src":"15126:3:23"}]}]},"name":"abi_encode_array_bytes_dyn","nativeSrc":"14546:597:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"14582:5:23","nodeType":"YulTypedName","src":"14582:5:23","type":""},{"name":"pos","nativeSrc":"14589:3:23","nodeType":"YulTypedName","src":"14589:3:23","type":""}],"returnVariables":[{"name":"end","nativeSrc":"14597:3:23","nodeType":"YulTypedName","src":"14597:3:23","type":""}],"src":"14546:597:23"},{"body":{"nativeSrc":"15606:1731:23","nodeType":"YulBlock","src":"15606:1731:23","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"15623:9:23","nodeType":"YulIdentifier","src":"15623:9:23"},{"kind":"number","nativeSrc":"15634:3:23","nodeType":"YulLiteral","src":"15634:3:23","type":"","value":"128"}],"functionName":{"name":"mstore","nativeSrc":"15616:6:23","nodeType":"YulIdentifier","src":"15616:6:23"},"nativeSrc":"15616:22:23","nodeType":"YulFunctionCall","src":"15616:22:23"},"nativeSrc":"15616:22:23","nodeType":"YulExpressionStatement","src":"15616:22:23"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"15671:6:23","nodeType":"YulIdentifier","src":"15671:6:23"}],"functionName":{"name":"mload","nativeSrc":"15665:5:23","nodeType":"YulIdentifier","src":"15665:5:23"},"nativeSrc":"15665:13:23","nodeType":"YulFunctionCall","src":"15665:13:23"},{"arguments":[{"name":"headStart","nativeSrc":"15684:9:23","nodeType":"YulIdentifier","src":"15684:9:23"},{"kind":"number","nativeSrc":"15695:3:23","nodeType":"YulLiteral","src":"15695:3:23","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"15680:3:23","nodeType":"YulIdentifier","src":"15680:3:23"},"nativeSrc":"15680:19:23","nodeType":"YulFunctionCall","src":"15680:19:23"}],"functionName":{"name":"abi_encode_uint64","nativeSrc":"15647:17:23","nodeType":"YulIdentifier","src":"15647:17:23"},"nativeSrc":"15647:53:23","nodeType":"YulFunctionCall","src":"15647:53:23"},"nativeSrc":"15647:53:23","nodeType":"YulExpressionStatement","src":"15647:53:23"},{"nativeSrc":"15709:44:23","nodeType":"YulVariableDeclaration","src":"15709:44:23","value":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"15739:6:23","nodeType":"YulIdentifier","src":"15739:6:23"},{"kind":"number","nativeSrc":"15747:4:23","nodeType":"YulLiteral","src":"15747:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"15735:3:23","nodeType":"YulIdentifier","src":"15735:3:23"},"nativeSrc":"15735:17:23","nodeType":"YulFunctionCall","src":"15735:17:23"}],"functionName":{"name":"mload","nativeSrc":"15729:5:23","nodeType":"YulIdentifier","src":"15729:5:23"},"nativeSrc":"15729:24:23","nodeType":"YulFunctionCall","src":"15729:24:23"},"variables":[{"name":"memberValue0","nativeSrc":"15713:12:23","nodeType":"YulTypedName","src":"15713:12:23","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nativeSrc":"15780:12:23","nodeType":"YulIdentifier","src":"15780:12:23"},{"arguments":[{"name":"headStart","nativeSrc":"15798:9:23","nodeType":"YulIdentifier","src":"15798:9:23"},{"kind":"number","nativeSrc":"15809:3:23","nodeType":"YulLiteral","src":"15809:3:23","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"15794:3:23","nodeType":"YulIdentifier","src":"15794:3:23"},"nativeSrc":"15794:19:23","nodeType":"YulFunctionCall","src":"15794:19:23"}],"functionName":{"name":"abi_encode_uint64","nativeSrc":"15762:17:23","nodeType":"YulIdentifier","src":"15762:17:23"},"nativeSrc":"15762:52:23","nodeType":"YulFunctionCall","src":"15762:52:23"},"nativeSrc":"15762:52:23","nodeType":"YulExpressionStatement","src":"15762:52:23"},{"nativeSrc":"15823:46:23","nodeType":"YulVariableDeclaration","src":"15823:46:23","value":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"15855:6:23","nodeType":"YulIdentifier","src":"15855:6:23"},{"kind":"number","nativeSrc":"15863:4:23","nodeType":"YulLiteral","src":"15863:4:23","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"15851:3:23","nodeType":"YulIdentifier","src":"15851:3:23"},"nativeSrc":"15851:17:23","nodeType":"YulFunctionCall","src":"15851:17:23"}],"functionName":{"name":"mload","nativeSrc":"15845:5:23","nodeType":"YulIdentifier","src":"15845:5:23"},"nativeSrc":"15845:24:23","nodeType":"YulFunctionCall","src":"15845:24:23"},"variables":[{"name":"memberValue0_1","nativeSrc":"15827:14:23","nodeType":"YulTypedName","src":"15827:14:23","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_1","nativeSrc":"15896:14:23","nodeType":"YulIdentifier","src":"15896:14:23"},{"arguments":[{"name":"headStart","nativeSrc":"15916:9:23","nodeType":"YulIdentifier","src":"15916:9:23"},{"kind":"number","nativeSrc":"15927:3:23","nodeType":"YulLiteral","src":"15927:3:23","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"15912:3:23","nodeType":"YulIdentifier","src":"15912:3:23"},"nativeSrc":"15912:19:23","nodeType":"YulFunctionCall","src":"15912:19:23"}],"functionName":{"name":"abi_encode_uint64","nativeSrc":"15878:17:23","nodeType":"YulIdentifier","src":"15878:17:23"},"nativeSrc":"15878:54:23","nodeType":"YulFunctionCall","src":"15878:54:23"},"nativeSrc":"15878:54:23","nodeType":"YulExpressionStatement","src":"15878:54:23"},{"nativeSrc":"15941:46:23","nodeType":"YulVariableDeclaration","src":"15941:46:23","value":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"15973:6:23","nodeType":"YulIdentifier","src":"15973:6:23"},{"kind":"number","nativeSrc":"15981:4:23","nodeType":"YulLiteral","src":"15981:4:23","type":"","value":"0x60"}],"functionName":{"name":"add","nativeSrc":"15969:3:23","nodeType":"YulIdentifier","src":"15969:3:23"},"nativeSrc":"15969:17:23","nodeType":"YulFunctionCall","src":"15969:17:23"}],"functionName":{"name":"mload","nativeSrc":"15963:5:23","nodeType":"YulIdentifier","src":"15963:5:23"},"nativeSrc":"15963:24:23","nodeType":"YulFunctionCall","src":"15963:24:23"},"variables":[{"name":"memberValue0_2","nativeSrc":"15945:14:23","nodeType":"YulTypedName","src":"15945:14:23","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_2","nativeSrc":"16014:14:23","nodeType":"YulIdentifier","src":"16014:14:23"},{"arguments":[{"name":"headStart","nativeSrc":"16034:9:23","nodeType":"YulIdentifier","src":"16034:9:23"},{"kind":"number","nativeSrc":"16045:3:23","nodeType":"YulLiteral","src":"16045:3:23","type":"","value":"224"}],"functionName":{"name":"add","nativeSrc":"16030:3:23","nodeType":"YulIdentifier","src":"16030:3:23"},"nativeSrc":"16030:19:23","nodeType":"YulFunctionCall","src":"16030:19:23"}],"functionName":{"name":"abi_encode_uint64","nativeSrc":"15996:17:23","nodeType":"YulIdentifier","src":"15996:17:23"},"nativeSrc":"15996:54:23","nodeType":"YulFunctionCall","src":"15996:54:23"},"nativeSrc":"15996:54:23","nodeType":"YulExpressionStatement","src":"15996:54:23"},{"nativeSrc":"16059:45:23","nodeType":"YulVariableDeclaration","src":"16059:45:23","value":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"16091:6:23","nodeType":"YulIdentifier","src":"16091:6:23"},{"kind":"number","nativeSrc":"16099:3:23","nodeType":"YulLiteral","src":"16099:3:23","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"16087:3:23","nodeType":"YulIdentifier","src":"16087:3:23"},"nativeSrc":"16087:16:23","nodeType":"YulFunctionCall","src":"16087:16:23"}],"functionName":{"name":"mload","nativeSrc":"16081:5:23","nodeType":"YulIdentifier","src":"16081:5:23"},"nativeSrc":"16081:23:23","nodeType":"YulFunctionCall","src":"16081:23:23"},"variables":[{"name":"memberValue0_3","nativeSrc":"16063:14:23","nodeType":"YulTypedName","src":"16063:14:23","type":""}]},{"nativeSrc":"16113:13:23","nodeType":"YulVariableDeclaration","src":"16113:13:23","value":{"kind":"number","nativeSrc":"16123:3:23","nodeType":"YulLiteral","src":"16123:3:23","type":"","value":"256"},"variables":[{"name":"_1","nativeSrc":"16117:2:23","nodeType":"YulTypedName","src":"16117:2:23","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_3","nativeSrc":"16154:14:23","nodeType":"YulIdentifier","src":"16154:14:23"},{"arguments":[{"name":"headStart","nativeSrc":"16174:9:23","nodeType":"YulIdentifier","src":"16174:9:23"},{"name":"_1","nativeSrc":"16185:2:23","nodeType":"YulIdentifier","src":"16185:2:23"}],"functionName":{"name":"add","nativeSrc":"16170:3:23","nodeType":"YulIdentifier","src":"16170:3:23"},"nativeSrc":"16170:18:23","nodeType":"YulFunctionCall","src":"16170:18:23"}],"functionName":{"name":"abi_encode_address","nativeSrc":"16135:18:23","nodeType":"YulIdentifier","src":"16135:18:23"},"nativeSrc":"16135:54:23","nodeType":"YulFunctionCall","src":"16135:54:23"},"nativeSrc":"16135:54:23","nodeType":"YulExpressionStatement","src":"16135:54:23"},{"nativeSrc":"16198:45:23","nodeType":"YulVariableDeclaration","src":"16198:45:23","value":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"16230:6:23","nodeType":"YulIdentifier","src":"16230:6:23"},{"kind":"number","nativeSrc":"16238:3:23","nodeType":"YulLiteral","src":"16238:3:23","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"16226:3:23","nodeType":"YulIdentifier","src":"16226:3:23"},"nativeSrc":"16226:16:23","nodeType":"YulFunctionCall","src":"16226:16:23"}],"functionName":{"name":"mload","nativeSrc":"16220:5:23","nodeType":"YulIdentifier","src":"16220:5:23"},"nativeSrc":"16220:23:23","nodeType":"YulFunctionCall","src":"16220:23:23"},"variables":[{"name":"memberValue0_4","nativeSrc":"16202:14:23","nodeType":"YulTypedName","src":"16202:14:23","type":""}]},{"nativeSrc":"16252:13:23","nodeType":"YulVariableDeclaration","src":"16252:13:23","value":{"kind":"number","nativeSrc":"16262:3:23","nodeType":"YulLiteral","src":"16262:3:23","type":"","value":"288"},"variables":[{"name":"_2","nativeSrc":"16256:2:23","nodeType":"YulTypedName","src":"16256:2:23","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_4","nativeSrc":"16292:14:23","nodeType":"YulIdentifier","src":"16292:14:23"},{"arguments":[{"name":"headStart","nativeSrc":"16312:9:23","nodeType":"YulIdentifier","src":"16312:9:23"},{"name":"_2","nativeSrc":"16323:2:23","nodeType":"YulIdentifier","src":"16323:2:23"}],"functionName":{"name":"add","nativeSrc":"16308:3:23","nodeType":"YulIdentifier","src":"16308:3:23"},"nativeSrc":"16308:18:23","nodeType":"YulFunctionCall","src":"16308:18:23"}],"functionName":{"name":"abi_encode_uint64","nativeSrc":"16274:17:23","nodeType":"YulIdentifier","src":"16274:17:23"},"nativeSrc":"16274:53:23","nodeType":"YulFunctionCall","src":"16274:53:23"},"nativeSrc":"16274:53:23","nodeType":"YulExpressionStatement","src":"16274:53:23"},{"nativeSrc":"16336:45:23","nodeType":"YulVariableDeclaration","src":"16336:45:23","value":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"16368:6:23","nodeType":"YulIdentifier","src":"16368:6:23"},{"kind":"number","nativeSrc":"16376:3:23","nodeType":"YulLiteral","src":"16376:3:23","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"16364:3:23","nodeType":"YulIdentifier","src":"16364:3:23"},"nativeSrc":"16364:16:23","nodeType":"YulFunctionCall","src":"16364:16:23"}],"functionName":{"name":"mload","nativeSrc":"16358:5:23","nodeType":"YulIdentifier","src":"16358:5:23"},"nativeSrc":"16358:23:23","nodeType":"YulFunctionCall","src":"16358:23:23"},"variables":[{"name":"memberValue0_5","nativeSrc":"16340:14:23","nodeType":"YulTypedName","src":"16340:14:23","type":""}]},{"nativeSrc":"16390:16:23","nodeType":"YulVariableDeclaration","src":"16390:16:23","value":{"kind":"number","nativeSrc":"16400:6:23","nodeType":"YulLiteral","src":"16400:6:23","type":"","value":"0x0140"},"variables":[{"name":"_3","nativeSrc":"16394:2:23","nodeType":"YulTypedName","src":"16394:2:23","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_5","nativeSrc":"16444:14:23","nodeType":"YulIdentifier","src":"16444:14:23"},{"arguments":[{"name":"headStart","nativeSrc":"16464:9:23","nodeType":"YulIdentifier","src":"16464:9:23"},{"name":"_3","nativeSrc":"16475:2:23","nodeType":"YulIdentifier","src":"16475:2:23"}],"functionName":{"name":"add","nativeSrc":"16460:3:23","nodeType":"YulIdentifier","src":"16460:3:23"},"nativeSrc":"16460:18:23","nodeType":"YulFunctionCall","src":"16460:18:23"}],"functionName":{"name":"abi_encode_enum_DataLocation","nativeSrc":"16415:28:23","nodeType":"YulIdentifier","src":"16415:28:23"},"nativeSrc":"16415:64:23","nodeType":"YulFunctionCall","src":"16415:64:23"},"nativeSrc":"16415:64:23","nodeType":"YulExpressionStatement","src":"16415:64:23"},{"nativeSrc":"16488:45:23","nodeType":"YulVariableDeclaration","src":"16488:45:23","value":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"16520:6:23","nodeType":"YulIdentifier","src":"16520:6:23"},{"kind":"number","nativeSrc":"16528:3:23","nodeType":"YulLiteral","src":"16528:3:23","type":"","value":"224"}],"functionName":{"name":"add","nativeSrc":"16516:3:23","nodeType":"YulIdentifier","src":"16516:3:23"},"nativeSrc":"16516:16:23","nodeType":"YulFunctionCall","src":"16516:16:23"}],"functionName":{"name":"mload","nativeSrc":"16510:5:23","nodeType":"YulIdentifier","src":"16510:5:23"},"nativeSrc":"16510:23:23","nodeType":"YulFunctionCall","src":"16510:23:23"},"variables":[{"name":"memberValue0_6","nativeSrc":"16492:14:23","nodeType":"YulTypedName","src":"16492:14:23","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_6","nativeSrc":"16558:14:23","nodeType":"YulIdentifier","src":"16558:14:23"},{"arguments":[{"name":"headStart","nativeSrc":"16578:9:23","nodeType":"YulIdentifier","src":"16578:9:23"},{"kind":"number","nativeSrc":"16589:3:23","nodeType":"YulLiteral","src":"16589:3:23","type":"","value":"352"}],"functionName":{"name":"add","nativeSrc":"16574:3:23","nodeType":"YulIdentifier","src":"16574:3:23"},"nativeSrc":"16574:19:23","nodeType":"YulFunctionCall","src":"16574:19:23"}],"functionName":{"name":"abi_encode_bool","nativeSrc":"16542:15:23","nodeType":"YulIdentifier","src":"16542:15:23"},"nativeSrc":"16542:52:23","nodeType":"YulFunctionCall","src":"16542:52:23"},"nativeSrc":"16542:52:23","nodeType":"YulExpressionStatement","src":"16542:52:23"},{"nativeSrc":"16603:44:23","nodeType":"YulVariableDeclaration","src":"16603:44:23","value":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"16635:6:23","nodeType":"YulIdentifier","src":"16635:6:23"},{"name":"_1","nativeSrc":"16643:2:23","nodeType":"YulIdentifier","src":"16643:2:23"}],"functionName":{"name":"add","nativeSrc":"16631:3:23","nodeType":"YulIdentifier","src":"16631:3:23"},"nativeSrc":"16631:15:23","nodeType":"YulFunctionCall","src":"16631:15:23"}],"functionName":{"name":"mload","nativeSrc":"16625:5:23","nodeType":"YulIdentifier","src":"16625:5:23"},"nativeSrc":"16625:22:23","nodeType":"YulFunctionCall","src":"16625:22:23"},"variables":[{"name":"memberValue0_7","nativeSrc":"16607:14:23","nodeType":"YulTypedName","src":"16607:14:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16667:9:23","nodeType":"YulIdentifier","src":"16667:9:23"},{"kind":"number","nativeSrc":"16678:3:23","nodeType":"YulLiteral","src":"16678:3:23","type":"","value":"384"}],"functionName":{"name":"add","nativeSrc":"16663:3:23","nodeType":"YulIdentifier","src":"16663:3:23"},"nativeSrc":"16663:19:23","nodeType":"YulFunctionCall","src":"16663:19:23"},{"name":"_3","nativeSrc":"16684:2:23","nodeType":"YulIdentifier","src":"16684:2:23"}],"functionName":{"name":"mstore","nativeSrc":"16656:6:23","nodeType":"YulIdentifier","src":"16656:6:23"},"nativeSrc":"16656:31:23","nodeType":"YulFunctionCall","src":"16656:31:23"},"nativeSrc":"16656:31:23","nodeType":"YulExpressionStatement","src":"16656:31:23"},{"nativeSrc":"16696:77:23","nodeType":"YulVariableDeclaration","src":"16696:77:23","value":{"arguments":[{"name":"memberValue0_7","nativeSrc":"16737:14:23","nodeType":"YulIdentifier","src":"16737:14:23"},{"arguments":[{"name":"headStart","nativeSrc":"16757:9:23","nodeType":"YulIdentifier","src":"16757:9:23"},{"kind":"number","nativeSrc":"16768:3:23","nodeType":"YulLiteral","src":"16768:3:23","type":"","value":"448"}],"functionName":{"name":"add","nativeSrc":"16753:3:23","nodeType":"YulIdentifier","src":"16753:3:23"},"nativeSrc":"16753:19:23","nodeType":"YulFunctionCall","src":"16753:19:23"}],"functionName":{"name":"abi_encode_array_bytes_dyn","nativeSrc":"16710:26:23","nodeType":"YulIdentifier","src":"16710:26:23"},"nativeSrc":"16710:63:23","nodeType":"YulFunctionCall","src":"16710:63:23"},"variables":[{"name":"tail_1","nativeSrc":"16700:6:23","nodeType":"YulTypedName","src":"16700:6:23","type":""}]},{"nativeSrc":"16782:44:23","nodeType":"YulVariableDeclaration","src":"16782:44:23","value":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"16814:6:23","nodeType":"YulIdentifier","src":"16814:6:23"},{"name":"_2","nativeSrc":"16822:2:23","nodeType":"YulIdentifier","src":"16822:2:23"}],"functionName":{"name":"add","nativeSrc":"16810:3:23","nodeType":"YulIdentifier","src":"16810:3:23"},"nativeSrc":"16810:15:23","nodeType":"YulFunctionCall","src":"16810:15:23"}],"functionName":{"name":"mload","nativeSrc":"16804:5:23","nodeType":"YulIdentifier","src":"16804:5:23"},"nativeSrc":"16804:22:23","nodeType":"YulFunctionCall","src":"16804:22:23"},"variables":[{"name":"memberValue0_8","nativeSrc":"16786:14:23","nodeType":"YulTypedName","src":"16786:14:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16846:9:23","nodeType":"YulIdentifier","src":"16846:9:23"},{"kind":"number","nativeSrc":"16857:3:23","nodeType":"YulLiteral","src":"16857:3:23","type":"","value":"416"}],"functionName":{"name":"add","nativeSrc":"16842:3:23","nodeType":"YulIdentifier","src":"16842:3:23"},"nativeSrc":"16842:19:23","nodeType":"YulFunctionCall","src":"16842:19:23"},{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"16871:6:23","nodeType":"YulIdentifier","src":"16871:6:23"},{"name":"headStart","nativeSrc":"16879:9:23","nodeType":"YulIdentifier","src":"16879:9:23"}],"functionName":{"name":"sub","nativeSrc":"16867:3:23","nodeType":"YulIdentifier","src":"16867:3:23"},"nativeSrc":"16867:22:23","nodeType":"YulFunctionCall","src":"16867:22:23"},{"arguments":[{"kind":"number","nativeSrc":"16895:3:23","nodeType":"YulLiteral","src":"16895:3:23","type":"","value":"127"}],"functionName":{"name":"not","nativeSrc":"16891:3:23","nodeType":"YulIdentifier","src":"16891:3:23"},"nativeSrc":"16891:8:23","nodeType":"YulFunctionCall","src":"16891:8:23"}],"functionName":{"name":"add","nativeSrc":"16863:3:23","nodeType":"YulIdentifier","src":"16863:3:23"},"nativeSrc":"16863:37:23","nodeType":"YulFunctionCall","src":"16863:37:23"}],"functionName":{"name":"mstore","nativeSrc":"16835:6:23","nodeType":"YulIdentifier","src":"16835:6:23"},"nativeSrc":"16835:66:23","nodeType":"YulFunctionCall","src":"16835:66:23"},"nativeSrc":"16835:66:23","nodeType":"YulExpressionStatement","src":"16835:66:23"},{"nativeSrc":"16910:52:23","nodeType":"YulVariableDeclaration","src":"16910:52:23","value":{"arguments":[{"name":"memberValue0_8","nativeSrc":"16939:14:23","nodeType":"YulIdentifier","src":"16939:14:23"},{"name":"tail_1","nativeSrc":"16955:6:23","nodeType":"YulIdentifier","src":"16955:6:23"}],"functionName":{"name":"abi_encode_string","nativeSrc":"16921:17:23","nodeType":"YulIdentifier","src":"16921:17:23"},"nativeSrc":"16921:41:23","nodeType":"YulFunctionCall","src":"16921:41:23"},"variables":[{"name":"end","nativeSrc":"16914:3:23","nodeType":"YulTypedName","src":"16914:3:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16982:9:23","nodeType":"YulIdentifier","src":"16982:9:23"},{"kind":"number","nativeSrc":"16993:4:23","nodeType":"YulLiteral","src":"16993:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"16978:3:23","nodeType":"YulIdentifier","src":"16978:3:23"},"nativeSrc":"16978:20:23","nodeType":"YulFunctionCall","src":"16978:20:23"},{"arguments":[{"name":"end","nativeSrc":"17004:3:23","nodeType":"YulIdentifier","src":"17004:3:23"},{"name":"headStart","nativeSrc":"17009:9:23","nodeType":"YulIdentifier","src":"17009:9:23"}],"functionName":{"name":"sub","nativeSrc":"17000:3:23","nodeType":"YulIdentifier","src":"17000:3:23"},"nativeSrc":"17000:19:23","nodeType":"YulFunctionCall","src":"17000:19:23"}],"functionName":{"name":"mstore","nativeSrc":"16971:6:23","nodeType":"YulIdentifier","src":"16971:6:23"},"nativeSrc":"16971:49:23","nodeType":"YulFunctionCall","src":"16971:49:23"},"nativeSrc":"16971:49:23","nodeType":"YulExpressionStatement","src":"16971:49:23"},{"nativeSrc":"17029:54:23","nodeType":"YulVariableDeclaration","src":"17029:54:23","value":{"arguments":[{"name":"end","nativeSrc":"17079:3:23","nodeType":"YulIdentifier","src":"17079:3:23"}],"functionName":{"name":"array_storeLengthForEncoding_string","nativeSrc":"17043:35:23","nodeType":"YulIdentifier","src":"17043:35:23"},"nativeSrc":"17043:40:23","nodeType":"YulFunctionCall","src":"17043:40:23"},"variables":[{"name":"tail_2","nativeSrc":"17033:6:23","nodeType":"YulTypedName","src":"17033:6:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17103:9:23","nodeType":"YulIdentifier","src":"17103:9:23"},{"kind":"number","nativeSrc":"17114:4:23","nodeType":"YulLiteral","src":"17114:4:23","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"17099:3:23","nodeType":"YulIdentifier","src":"17099:3:23"},"nativeSrc":"17099:20:23","nodeType":"YulFunctionCall","src":"17099:20:23"},{"arguments":[{"name":"tail_2","nativeSrc":"17125:6:23","nodeType":"YulIdentifier","src":"17125:6:23"},{"name":"headStart","nativeSrc":"17133:9:23","nodeType":"YulIdentifier","src":"17133:9:23"}],"functionName":{"name":"sub","nativeSrc":"17121:3:23","nodeType":"YulIdentifier","src":"17121:3:23"},"nativeSrc":"17121:22:23","nodeType":"YulFunctionCall","src":"17121:22:23"}],"functionName":{"name":"mstore","nativeSrc":"17092:6:23","nodeType":"YulIdentifier","src":"17092:6:23"},"nativeSrc":"17092:52:23","nodeType":"YulFunctionCall","src":"17092:52:23"},"nativeSrc":"17092:52:23","nodeType":"YulExpressionStatement","src":"17092:52:23"},{"nativeSrc":"17153:57:23","nodeType":"YulVariableDeclaration","src":"17153:57:23","value":{"arguments":[{"name":"tail_2","nativeSrc":"17203:6:23","nodeType":"YulIdentifier","src":"17203:6:23"}],"functionName":{"name":"array_storeLengthForEncoding_string","nativeSrc":"17167:35:23","nodeType":"YulIdentifier","src":"17167:35:23"},"nativeSrc":"17167:43:23","nodeType":"YulFunctionCall","src":"17167:43:23"},"variables":[{"name":"tail_3","nativeSrc":"17157:6:23","nodeType":"YulTypedName","src":"17157:6:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17230:9:23","nodeType":"YulIdentifier","src":"17230:9:23"},{"kind":"number","nativeSrc":"17241:4:23","nodeType":"YulLiteral","src":"17241:4:23","type":"","value":"0x60"}],"functionName":{"name":"add","nativeSrc":"17226:3:23","nodeType":"YulIdentifier","src":"17226:3:23"},"nativeSrc":"17226:20:23","nodeType":"YulFunctionCall","src":"17226:20:23"},{"arguments":[{"name":"tail_3","nativeSrc":"17252:6:23","nodeType":"YulIdentifier","src":"17252:6:23"},{"name":"headStart","nativeSrc":"17260:9:23","nodeType":"YulIdentifier","src":"17260:9:23"}],"functionName":{"name":"sub","nativeSrc":"17248:3:23","nodeType":"YulIdentifier","src":"17248:3:23"},"nativeSrc":"17248:22:23","nodeType":"YulFunctionCall","src":"17248:22:23"}],"functionName":{"name":"mstore","nativeSrc":"17219:6:23","nodeType":"YulIdentifier","src":"17219:6:23"},"nativeSrc":"17219:52:23","nodeType":"YulFunctionCall","src":"17219:52:23"},"nativeSrc":"17219:52:23","nodeType":"YulExpressionStatement","src":"17219:52:23"},{"nativeSrc":"17280:51:23","nodeType":"YulAssignment","src":"17280:51:23","value":{"arguments":[{"name":"tail_3","nativeSrc":"17324:6:23","nodeType":"YulIdentifier","src":"17324:6:23"}],"functionName":{"name":"array_storeLengthForEncoding_string","nativeSrc":"17288:35:23","nodeType":"YulIdentifier","src":"17288:35:23"},"nativeSrc":"17288:43:23","nodeType":"YulFunctionCall","src":"17288:43:23"},"variableNames":[{"name":"tail","nativeSrc":"17280:4:23","nodeType":"YulIdentifier","src":"17280:4:23"}]}]},"name":"abi_encode_tuple_t_struct$_Attestation_$592_memory_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_struct$_Attestation_$592_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"15148:2189:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15575:9:23","nodeType":"YulTypedName","src":"15575:9:23","type":""},{"name":"value0","nativeSrc":"15586:6:23","nodeType":"YulTypedName","src":"15586:6:23","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"15597:4:23","nodeType":"YulTypedName","src":"15597:4:23","type":""}],"src":"15148:2189:23"},{"body":{"nativeSrc":"17422:169:23","nodeType":"YulBlock","src":"17422:169:23","statements":[{"body":{"nativeSrc":"17468:16:23","nodeType":"YulBlock","src":"17468:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"17477:1:23","nodeType":"YulLiteral","src":"17477:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"17480:1:23","nodeType":"YulLiteral","src":"17480:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"17470:6:23","nodeType":"YulIdentifier","src":"17470:6:23"},"nativeSrc":"17470:12:23","nodeType":"YulFunctionCall","src":"17470:12:23"},"nativeSrc":"17470:12:23","nodeType":"YulExpressionStatement","src":"17470:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"17443:7:23","nodeType":"YulIdentifier","src":"17443:7:23"},{"name":"headStart","nativeSrc":"17452:9:23","nodeType":"YulIdentifier","src":"17452:9:23"}],"functionName":{"name":"sub","nativeSrc":"17439:3:23","nodeType":"YulIdentifier","src":"17439:3:23"},"nativeSrc":"17439:23:23","nodeType":"YulFunctionCall","src":"17439:23:23"},{"kind":"number","nativeSrc":"17464:2:23","nodeType":"YulLiteral","src":"17464:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"17435:3:23","nodeType":"YulIdentifier","src":"17435:3:23"},"nativeSrc":"17435:32:23","nodeType":"YulFunctionCall","src":"17435:32:23"},"nativeSrc":"17432:52:23","nodeType":"YulIf","src":"17432:52:23"},{"nativeSrc":"17493:29:23","nodeType":"YulVariableDeclaration","src":"17493:29:23","value":{"arguments":[{"name":"headStart","nativeSrc":"17512:9:23","nodeType":"YulIdentifier","src":"17512:9:23"}],"functionName":{"name":"mload","nativeSrc":"17506:5:23","nodeType":"YulIdentifier","src":"17506:5:23"},"nativeSrc":"17506:16:23","nodeType":"YulFunctionCall","src":"17506:16:23"},"variables":[{"name":"value","nativeSrc":"17497:5:23","nodeType":"YulTypedName","src":"17497:5:23","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"17555:5:23","nodeType":"YulIdentifier","src":"17555:5:23"}],"functionName":{"name":"validator_revert_uint64","nativeSrc":"17531:23:23","nodeType":"YulIdentifier","src":"17531:23:23"},"nativeSrc":"17531:30:23","nodeType":"YulFunctionCall","src":"17531:30:23"},"nativeSrc":"17531:30:23","nodeType":"YulExpressionStatement","src":"17531:30:23"},{"nativeSrc":"17570:15:23","nodeType":"YulAssignment","src":"17570:15:23","value":{"name":"value","nativeSrc":"17580:5:23","nodeType":"YulIdentifier","src":"17580:5:23"},"variableNames":[{"name":"value0","nativeSrc":"17570:6:23","nodeType":"YulIdentifier","src":"17570:6:23"}]}]},"name":"abi_decode_tuple_t_uint64_fromMemory","nativeSrc":"17342:249:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17388:9:23","nodeType":"YulTypedName","src":"17388:9:23","type":""},{"name":"dataEnd","nativeSrc":"17399:7:23","nodeType":"YulTypedName","src":"17399:7:23","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"17411:6:23","nodeType":"YulTypedName","src":"17411:6:23","type":""}],"src":"17342:249:23"},{"body":{"nativeSrc":"17725:119:23","nodeType":"YulBlock","src":"17725:119:23","statements":[{"nativeSrc":"17735:26:23","nodeType":"YulAssignment","src":"17735:26:23","value":{"arguments":[{"name":"headStart","nativeSrc":"17747:9:23","nodeType":"YulIdentifier","src":"17747:9:23"},{"kind":"number","nativeSrc":"17758:2:23","nodeType":"YulLiteral","src":"17758:2:23","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17743:3:23","nodeType":"YulIdentifier","src":"17743:3:23"},"nativeSrc":"17743:18:23","nodeType":"YulFunctionCall","src":"17743:18:23"},"variableNames":[{"name":"tail","nativeSrc":"17735:4:23","nodeType":"YulIdentifier","src":"17735:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"17777:9:23","nodeType":"YulIdentifier","src":"17777:9:23"},{"name":"value0","nativeSrc":"17788:6:23","nodeType":"YulIdentifier","src":"17788:6:23"}],"functionName":{"name":"mstore","nativeSrc":"17770:6:23","nodeType":"YulIdentifier","src":"17770:6:23"},"nativeSrc":"17770:25:23","nodeType":"YulFunctionCall","src":"17770:25:23"},"nativeSrc":"17770:25:23","nodeType":"YulExpressionStatement","src":"17770:25:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17815:9:23","nodeType":"YulIdentifier","src":"17815:9:23"},{"kind":"number","nativeSrc":"17826:2:23","nodeType":"YulLiteral","src":"17826:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17811:3:23","nodeType":"YulIdentifier","src":"17811:3:23"},"nativeSrc":"17811:18:23","nodeType":"YulFunctionCall","src":"17811:18:23"},{"name":"value1","nativeSrc":"17831:6:23","nodeType":"YulIdentifier","src":"17831:6:23"}],"functionName":{"name":"mstore","nativeSrc":"17804:6:23","nodeType":"YulIdentifier","src":"17804:6:23"},"nativeSrc":"17804:34:23","nodeType":"YulFunctionCall","src":"17804:34:23"},"nativeSrc":"17804:34:23","nodeType":"YulExpressionStatement","src":"17804:34:23"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"17596:248:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17686:9:23","nodeType":"YulTypedName","src":"17686:9:23","type":""},{"name":"value1","nativeSrc":"17697:6:23","nodeType":"YulTypedName","src":"17697:6:23","type":""},{"name":"value0","nativeSrc":"17705:6:23","nodeType":"YulTypedName","src":"17705:6:23","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17716:4:23","nodeType":"YulTypedName","src":"17716:4:23","type":""}],"src":"17596:248:23"},{"body":{"nativeSrc":"17881:95:23","nodeType":"YulBlock","src":"17881:95:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"17898:1:23","nodeType":"YulLiteral","src":"17898:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"17905:3:23","nodeType":"YulLiteral","src":"17905:3:23","type":"","value":"224"},{"kind":"number","nativeSrc":"17910:10:23","nodeType":"YulLiteral","src":"17910:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"17901:3:23","nodeType":"YulIdentifier","src":"17901:3:23"},"nativeSrc":"17901:20:23","nodeType":"YulFunctionCall","src":"17901:20:23"}],"functionName":{"name":"mstore","nativeSrc":"17891:6:23","nodeType":"YulIdentifier","src":"17891:6:23"},"nativeSrc":"17891:31:23","nodeType":"YulFunctionCall","src":"17891:31:23"},"nativeSrc":"17891:31:23","nodeType":"YulExpressionStatement","src":"17891:31:23"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"17938:1:23","nodeType":"YulLiteral","src":"17938:1:23","type":"","value":"4"},{"kind":"number","nativeSrc":"17941:4:23","nodeType":"YulLiteral","src":"17941:4:23","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"17931:6:23","nodeType":"YulIdentifier","src":"17931:6:23"},"nativeSrc":"17931:15:23","nodeType":"YulFunctionCall","src":"17931:15:23"},"nativeSrc":"17931:15:23","nodeType":"YulExpressionStatement","src":"17931:15:23"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"17962:1:23","nodeType":"YulLiteral","src":"17962:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"17965:4:23","nodeType":"YulLiteral","src":"17965:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"17955:6:23","nodeType":"YulIdentifier","src":"17955:6:23"},"nativeSrc":"17955:15:23","nodeType":"YulFunctionCall","src":"17955:15:23"},"nativeSrc":"17955:15:23","nodeType":"YulExpressionStatement","src":"17955:15:23"}]},"name":"panic_error_0x11","nativeSrc":"17849:127:23","nodeType":"YulFunctionDefinition","src":"17849:127:23"},{"body":{"nativeSrc":"18027:171:23","nodeType":"YulBlock","src":"18027:171:23","statements":[{"body":{"nativeSrc":"18058:111:23","nodeType":"YulBlock","src":"18058:111:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"18079:1:23","nodeType":"YulLiteral","src":"18079:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"18086:3:23","nodeType":"YulLiteral","src":"18086:3:23","type":"","value":"224"},{"kind":"number","nativeSrc":"18091:10:23","nodeType":"YulLiteral","src":"18091:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"18082:3:23","nodeType":"YulIdentifier","src":"18082:3:23"},"nativeSrc":"18082:20:23","nodeType":"YulFunctionCall","src":"18082:20:23"}],"functionName":{"name":"mstore","nativeSrc":"18072:6:23","nodeType":"YulIdentifier","src":"18072:6:23"},"nativeSrc":"18072:31:23","nodeType":"YulFunctionCall","src":"18072:31:23"},"nativeSrc":"18072:31:23","nodeType":"YulExpressionStatement","src":"18072:31:23"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"18123:1:23","nodeType":"YulLiteral","src":"18123:1:23","type":"","value":"4"},{"kind":"number","nativeSrc":"18126:4:23","nodeType":"YulLiteral","src":"18126:4:23","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"18116:6:23","nodeType":"YulIdentifier","src":"18116:6:23"},"nativeSrc":"18116:15:23","nodeType":"YulFunctionCall","src":"18116:15:23"},"nativeSrc":"18116:15:23","nodeType":"YulExpressionStatement","src":"18116:15:23"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"18151:1:23","nodeType":"YulLiteral","src":"18151:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"18154:4:23","nodeType":"YulLiteral","src":"18154:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"18144:6:23","nodeType":"YulIdentifier","src":"18144:6:23"},"nativeSrc":"18144:15:23","nodeType":"YulFunctionCall","src":"18144:15:23"},"nativeSrc":"18144:15:23","nodeType":"YulExpressionStatement","src":"18144:15:23"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"18047:1:23","nodeType":"YulIdentifier","src":"18047:1:23"}],"functionName":{"name":"iszero","nativeSrc":"18040:6:23","nodeType":"YulIdentifier","src":"18040:6:23"},"nativeSrc":"18040:9:23","nodeType":"YulFunctionCall","src":"18040:9:23"},"nativeSrc":"18037:132:23","nodeType":"YulIf","src":"18037:132:23"},{"nativeSrc":"18178:14:23","nodeType":"YulAssignment","src":"18178:14:23","value":{"arguments":[{"name":"x","nativeSrc":"18187:1:23","nodeType":"YulIdentifier","src":"18187:1:23"},{"name":"y","nativeSrc":"18190:1:23","nodeType":"YulIdentifier","src":"18190:1:23"}],"functionName":{"name":"div","nativeSrc":"18183:3:23","nodeType":"YulIdentifier","src":"18183:3:23"},"nativeSrc":"18183:9:23","nodeType":"YulFunctionCall","src":"18183:9:23"},"variableNames":[{"name":"r","nativeSrc":"18178:1:23","nodeType":"YulIdentifier","src":"18178:1:23"}]}]},"name":"checked_div_t_uint256","nativeSrc":"17981:217:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"18012:1:23","nodeType":"YulTypedName","src":"18012:1:23","type":""},{"name":"y","nativeSrc":"18015:1:23","nodeType":"YulTypedName","src":"18015:1:23","type":""}],"returnVariables":[{"name":"r","nativeSrc":"18021:1:23","nodeType":"YulTypedName","src":"18021:1:23","type":""}],"src":"17981:217:23"},{"body":{"nativeSrc":"18259:65:23","nodeType":"YulBlock","src":"18259:65:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"18276:1:23","nodeType":"YulLiteral","src":"18276:1:23","type":"","value":"0"},{"name":"ptr","nativeSrc":"18279:3:23","nodeType":"YulIdentifier","src":"18279:3:23"}],"functionName":{"name":"mstore","nativeSrc":"18269:6:23","nodeType":"YulIdentifier","src":"18269:6:23"},"nativeSrc":"18269:14:23","nodeType":"YulFunctionCall","src":"18269:14:23"},"nativeSrc":"18269:14:23","nodeType":"YulExpressionStatement","src":"18269:14:23"},{"nativeSrc":"18292:26:23","nodeType":"YulAssignment","src":"18292:26:23","value":{"arguments":[{"kind":"number","nativeSrc":"18310:1:23","nodeType":"YulLiteral","src":"18310:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"18313:4:23","nodeType":"YulLiteral","src":"18313:4:23","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"18300:9:23","nodeType":"YulIdentifier","src":"18300:9:23"},"nativeSrc":"18300:18:23","nodeType":"YulFunctionCall","src":"18300:18:23"},"variableNames":[{"name":"data","nativeSrc":"18292:4:23","nodeType":"YulIdentifier","src":"18292:4:23"}]}]},"name":"array_dataslot_string_storage","nativeSrc":"18203:121:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"18242:3:23","nodeType":"YulTypedName","src":"18242:3:23","type":""}],"returnVariables":[{"name":"data","nativeSrc":"18250:4:23","nodeType":"YulTypedName","src":"18250:4:23","type":""}],"src":"18203:121:23"},{"body":{"nativeSrc":"18410:462:23","nodeType":"YulBlock","src":"18410:462:23","statements":[{"body":{"nativeSrc":"18443:423:23","nodeType":"YulBlock","src":"18443:423:23","statements":[{"nativeSrc":"18457:11:23","nodeType":"YulVariableDeclaration","src":"18457:11:23","value":{"kind":"number","nativeSrc":"18467:1:23","nodeType":"YulLiteral","src":"18467:1:23","type":"","value":"0"},"variables":[{"name":"_1","nativeSrc":"18461:2:23","nodeType":"YulTypedName","src":"18461:2:23","type":""}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"18488:1:23","nodeType":"YulLiteral","src":"18488:1:23","type":"","value":"0"},{"name":"array","nativeSrc":"18491:5:23","nodeType":"YulIdentifier","src":"18491:5:23"}],"functionName":{"name":"mstore","nativeSrc":"18481:6:23","nodeType":"YulIdentifier","src":"18481:6:23"},"nativeSrc":"18481:16:23","nodeType":"YulFunctionCall","src":"18481:16:23"},"nativeSrc":"18481:16:23","nodeType":"YulExpressionStatement","src":"18481:16:23"},{"nativeSrc":"18510:30:23","nodeType":"YulVariableDeclaration","src":"18510:30:23","value":{"arguments":[{"kind":"number","nativeSrc":"18532:1:23","nodeType":"YulLiteral","src":"18532:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"18535:4:23","nodeType":"YulLiteral","src":"18535:4:23","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"18522:9:23","nodeType":"YulIdentifier","src":"18522:9:23"},"nativeSrc":"18522:18:23","nodeType":"YulFunctionCall","src":"18522:18:23"},"variables":[{"name":"data","nativeSrc":"18514:4:23","nodeType":"YulTypedName","src":"18514:4:23","type":""}]},{"nativeSrc":"18553:57:23","nodeType":"YulVariableDeclaration","src":"18553:57:23","value":{"arguments":[{"name":"data","nativeSrc":"18576:4:23","nodeType":"YulIdentifier","src":"18576:4:23"},{"arguments":[{"kind":"number","nativeSrc":"18586:1:23","nodeType":"YulLiteral","src":"18586:1:23","type":"","value":"5"},{"arguments":[{"name":"startIndex","nativeSrc":"18593:10:23","nodeType":"YulIdentifier","src":"18593:10:23"},{"kind":"number","nativeSrc":"18605:2:23","nodeType":"YulLiteral","src":"18605:2:23","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"18589:3:23","nodeType":"YulIdentifier","src":"18589:3:23"},"nativeSrc":"18589:19:23","nodeType":"YulFunctionCall","src":"18589:19:23"}],"functionName":{"name":"shr","nativeSrc":"18582:3:23","nodeType":"YulIdentifier","src":"18582:3:23"},"nativeSrc":"18582:27:23","nodeType":"YulFunctionCall","src":"18582:27:23"}],"functionName":{"name":"add","nativeSrc":"18572:3:23","nodeType":"YulIdentifier","src":"18572:3:23"},"nativeSrc":"18572:38:23","nodeType":"YulFunctionCall","src":"18572:38:23"},"variables":[{"name":"deleteStart","nativeSrc":"18557:11:23","nodeType":"YulTypedName","src":"18557:11:23","type":""}]},{"body":{"nativeSrc":"18647:23:23","nodeType":"YulBlock","src":"18647:23:23","statements":[{"nativeSrc":"18649:19:23","nodeType":"YulAssignment","src":"18649:19:23","value":{"name":"data","nativeSrc":"18664:4:23","nodeType":"YulIdentifier","src":"18664:4:23"},"variableNames":[{"name":"deleteStart","nativeSrc":"18649:11:23","nodeType":"YulIdentifier","src":"18649:11:23"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"18629:10:23","nodeType":"YulIdentifier","src":"18629:10:23"},{"kind":"number","nativeSrc":"18641:4:23","nodeType":"YulLiteral","src":"18641:4:23","type":"","value":"0x20"}],"functionName":{"name":"lt","nativeSrc":"18626:2:23","nodeType":"YulIdentifier","src":"18626:2:23"},"nativeSrc":"18626:20:23","nodeType":"YulFunctionCall","src":"18626:20:23"},"nativeSrc":"18623:47:23","nodeType":"YulIf","src":"18623:47:23"},{"nativeSrc":"18683:41:23","nodeType":"YulVariableDeclaration","src":"18683:41:23","value":{"arguments":[{"name":"data","nativeSrc":"18697:4:23","nodeType":"YulIdentifier","src":"18697:4:23"},{"arguments":[{"kind":"number","nativeSrc":"18707:1:23","nodeType":"YulLiteral","src":"18707:1:23","type":"","value":"5"},{"arguments":[{"name":"len","nativeSrc":"18714:3:23","nodeType":"YulIdentifier","src":"18714:3:23"},{"kind":"number","nativeSrc":"18719:2:23","nodeType":"YulLiteral","src":"18719:2:23","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"18710:3:23","nodeType":"YulIdentifier","src":"18710:3:23"},"nativeSrc":"18710:12:23","nodeType":"YulFunctionCall","src":"18710:12:23"}],"functionName":{"name":"shr","nativeSrc":"18703:3:23","nodeType":"YulIdentifier","src":"18703:3:23"},"nativeSrc":"18703:20:23","nodeType":"YulFunctionCall","src":"18703:20:23"}],"functionName":{"name":"add","nativeSrc":"18693:3:23","nodeType":"YulIdentifier","src":"18693:3:23"},"nativeSrc":"18693:31:23","nodeType":"YulFunctionCall","src":"18693:31:23"},"variables":[{"name":"_2","nativeSrc":"18687:2:23","nodeType":"YulTypedName","src":"18687:2:23","type":""}]},{"nativeSrc":"18737:24:23","nodeType":"YulVariableDeclaration","src":"18737:24:23","value":{"name":"deleteStart","nativeSrc":"18750:11:23","nodeType":"YulIdentifier","src":"18750:11:23"},"variables":[{"name":"start","nativeSrc":"18741:5:23","nodeType":"YulTypedName","src":"18741:5:23","type":""}]},{"body":{"nativeSrc":"18835:21:23","nodeType":"YulBlock","src":"18835:21:23","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"18844:5:23","nodeType":"YulIdentifier","src":"18844:5:23"},{"name":"_1","nativeSrc":"18851:2:23","nodeType":"YulIdentifier","src":"18851:2:23"}],"functionName":{"name":"sstore","nativeSrc":"18837:6:23","nodeType":"YulIdentifier","src":"18837:6:23"},"nativeSrc":"18837:17:23","nodeType":"YulFunctionCall","src":"18837:17:23"},"nativeSrc":"18837:17:23","nodeType":"YulExpressionStatement","src":"18837:17:23"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"18785:5:23","nodeType":"YulIdentifier","src":"18785:5:23"},{"name":"_2","nativeSrc":"18792:2:23","nodeType":"YulIdentifier","src":"18792:2:23"}],"functionName":{"name":"lt","nativeSrc":"18782:2:23","nodeType":"YulIdentifier","src":"18782:2:23"},"nativeSrc":"18782:13:23","nodeType":"YulFunctionCall","src":"18782:13:23"},"nativeSrc":"18774:82:23","nodeType":"YulForLoop","post":{"nativeSrc":"18796:26:23","nodeType":"YulBlock","src":"18796:26:23","statements":[{"nativeSrc":"18798:22:23","nodeType":"YulAssignment","src":"18798:22:23","value":{"arguments":[{"name":"start","nativeSrc":"18811:5:23","nodeType":"YulIdentifier","src":"18811:5:23"},{"kind":"number","nativeSrc":"18818:1:23","nodeType":"YulLiteral","src":"18818:1:23","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"18807:3:23","nodeType":"YulIdentifier","src":"18807:3:23"},"nativeSrc":"18807:13:23","nodeType":"YulFunctionCall","src":"18807:13:23"},"variableNames":[{"name":"start","nativeSrc":"18798:5:23","nodeType":"YulIdentifier","src":"18798:5:23"}]}]},"pre":{"nativeSrc":"18778:3:23","nodeType":"YulBlock","src":"18778:3:23","statements":[]},"src":"18774:82:23"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"18426:3:23","nodeType":"YulIdentifier","src":"18426:3:23"},{"kind":"number","nativeSrc":"18431:2:23","nodeType":"YulLiteral","src":"18431:2:23","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"18423:2:23","nodeType":"YulIdentifier","src":"18423:2:23"},"nativeSrc":"18423:11:23","nodeType":"YulFunctionCall","src":"18423:11:23"},"nativeSrc":"18420:446:23","nodeType":"YulIf","src":"18420:446:23"}]},"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"18329:543:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"18382:5:23","nodeType":"YulTypedName","src":"18382:5:23","type":""},{"name":"len","nativeSrc":"18389:3:23","nodeType":"YulTypedName","src":"18389:3:23","type":""},{"name":"startIndex","nativeSrc":"18394:10:23","nodeType":"YulTypedName","src":"18394:10:23","type":""}],"src":"18329:543:23"},{"body":{"nativeSrc":"18962:81:23","nodeType":"YulBlock","src":"18962:81:23","statements":[{"nativeSrc":"18972:65:23","nodeType":"YulAssignment","src":"18972:65:23","value":{"arguments":[{"arguments":[{"name":"data","nativeSrc":"18987:4:23","nodeType":"YulIdentifier","src":"18987:4:23"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"19005:1:23","nodeType":"YulLiteral","src":"19005:1:23","type":"","value":"3"},{"name":"len","nativeSrc":"19008:3:23","nodeType":"YulIdentifier","src":"19008:3:23"}],"functionName":{"name":"shl","nativeSrc":"19001:3:23","nodeType":"YulIdentifier","src":"19001:3:23"},"nativeSrc":"19001:11:23","nodeType":"YulFunctionCall","src":"19001:11:23"},{"arguments":[{"kind":"number","nativeSrc":"19018:1:23","nodeType":"YulLiteral","src":"19018:1:23","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"19014:3:23","nodeType":"YulIdentifier","src":"19014:3:23"},"nativeSrc":"19014:6:23","nodeType":"YulFunctionCall","src":"19014:6:23"}],"functionName":{"name":"shr","nativeSrc":"18997:3:23","nodeType":"YulIdentifier","src":"18997:3:23"},"nativeSrc":"18997:24:23","nodeType":"YulFunctionCall","src":"18997:24:23"}],"functionName":{"name":"not","nativeSrc":"18993:3:23","nodeType":"YulIdentifier","src":"18993:3:23"},"nativeSrc":"18993:29:23","nodeType":"YulFunctionCall","src":"18993:29:23"}],"functionName":{"name":"and","nativeSrc":"18983:3:23","nodeType":"YulIdentifier","src":"18983:3:23"},"nativeSrc":"18983:40:23","nodeType":"YulFunctionCall","src":"18983:40:23"},{"arguments":[{"kind":"number","nativeSrc":"19029:1:23","nodeType":"YulLiteral","src":"19029:1:23","type":"","value":"1"},{"name":"len","nativeSrc":"19032:3:23","nodeType":"YulIdentifier","src":"19032:3:23"}],"functionName":{"name":"shl","nativeSrc":"19025:3:23","nodeType":"YulIdentifier","src":"19025:3:23"},"nativeSrc":"19025:11:23","nodeType":"YulFunctionCall","src":"19025:11:23"}],"functionName":{"name":"or","nativeSrc":"18980:2:23","nodeType":"YulIdentifier","src":"18980:2:23"},"nativeSrc":"18980:57:23","nodeType":"YulFunctionCall","src":"18980:57:23"},"variableNames":[{"name":"used","nativeSrc":"18972:4:23","nodeType":"YulIdentifier","src":"18972:4:23"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"18877:166:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"18939:4:23","nodeType":"YulTypedName","src":"18939:4:23","type":""},{"name":"len","nativeSrc":"18945:3:23","nodeType":"YulTypedName","src":"18945:3:23","type":""}],"returnVariables":[{"name":"used","nativeSrc":"18953:4:23","nodeType":"YulTypedName","src":"18953:4:23","type":""}],"src":"18877:166:23"},{"body":{"nativeSrc":"19144:1249:23","nodeType":"YulBlock","src":"19144:1249:23","statements":[{"nativeSrc":"19154:24:23","nodeType":"YulVariableDeclaration","src":"19154:24:23","value":{"arguments":[{"name":"src","nativeSrc":"19174:3:23","nodeType":"YulIdentifier","src":"19174:3:23"}],"functionName":{"name":"mload","nativeSrc":"19168:5:23","nodeType":"YulIdentifier","src":"19168:5:23"},"nativeSrc":"19168:10:23","nodeType":"YulFunctionCall","src":"19168:10:23"},"variables":[{"name":"newLen","nativeSrc":"19158:6:23","nodeType":"YulTypedName","src":"19158:6:23","type":""}]},{"body":{"nativeSrc":"19221:22:23","nodeType":"YulBlock","src":"19221:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"19223:16:23","nodeType":"YulIdentifier","src":"19223:16:23"},"nativeSrc":"19223:18:23","nodeType":"YulFunctionCall","src":"19223:18:23"},"nativeSrc":"19223:18:23","nodeType":"YulExpressionStatement","src":"19223:18:23"}]},"condition":{"arguments":[{"name":"newLen","nativeSrc":"19193:6:23","nodeType":"YulIdentifier","src":"19193:6:23"},{"kind":"number","nativeSrc":"19201:18:23","nodeType":"YulLiteral","src":"19201:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"19190:2:23","nodeType":"YulIdentifier","src":"19190:2:23"},"nativeSrc":"19190:30:23","nodeType":"YulFunctionCall","src":"19190:30:23"},"nativeSrc":"19187:56:23","nodeType":"YulIf","src":"19187:56:23"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"19296:4:23","nodeType":"YulIdentifier","src":"19296:4:23"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"19334:4:23","nodeType":"YulIdentifier","src":"19334:4:23"}],"functionName":{"name":"sload","nativeSrc":"19328:5:23","nodeType":"YulIdentifier","src":"19328:5:23"},"nativeSrc":"19328:11:23","nodeType":"YulFunctionCall","src":"19328:11:23"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"19302:25:23","nodeType":"YulIdentifier","src":"19302:25:23"},"nativeSrc":"19302:38:23","nodeType":"YulFunctionCall","src":"19302:38:23"},{"name":"newLen","nativeSrc":"19342:6:23","nodeType":"YulIdentifier","src":"19342:6:23"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"19252:43:23","nodeType":"YulIdentifier","src":"19252:43:23"},"nativeSrc":"19252:97:23","nodeType":"YulFunctionCall","src":"19252:97:23"},"nativeSrc":"19252:97:23","nodeType":"YulExpressionStatement","src":"19252:97:23"},{"nativeSrc":"19358:18:23","nodeType":"YulVariableDeclaration","src":"19358:18:23","value":{"kind":"number","nativeSrc":"19375:1:23","nodeType":"YulLiteral","src":"19375:1:23","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"19362:9:23","nodeType":"YulTypedName","src":"19362:9:23","type":""}]},{"nativeSrc":"19385:23:23","nodeType":"YulVariableDeclaration","src":"19385:23:23","value":{"kind":"number","nativeSrc":"19404:4:23","nodeType":"YulLiteral","src":"19404:4:23","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nativeSrc":"19389:11:23","nodeType":"YulTypedName","src":"19389:11:23","type":""}]},{"nativeSrc":"19417:17:23","nodeType":"YulAssignment","src":"19417:17:23","value":{"kind":"number","nativeSrc":"19430:4:23","nodeType":"YulLiteral","src":"19430:4:23","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nativeSrc":"19417:9:23","nodeType":"YulIdentifier","src":"19417:9:23"}]},{"cases":[{"body":{"nativeSrc":"19480:656:23","nodeType":"YulBlock","src":"19480:656:23","statements":[{"nativeSrc":"19494:35:23","nodeType":"YulVariableDeclaration","src":"19494:35:23","value":{"arguments":[{"name":"newLen","nativeSrc":"19513:6:23","nodeType":"YulIdentifier","src":"19513:6:23"},{"arguments":[{"kind":"number","nativeSrc":"19525:2:23","nodeType":"YulLiteral","src":"19525:2:23","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"19521:3:23","nodeType":"YulIdentifier","src":"19521:3:23"},"nativeSrc":"19521:7:23","nodeType":"YulFunctionCall","src":"19521:7:23"}],"functionName":{"name":"and","nativeSrc":"19509:3:23","nodeType":"YulIdentifier","src":"19509:3:23"},"nativeSrc":"19509:20:23","nodeType":"YulFunctionCall","src":"19509:20:23"},"variables":[{"name":"loopEnd","nativeSrc":"19498:7:23","nodeType":"YulTypedName","src":"19498:7:23","type":""}]},{"nativeSrc":"19542:49:23","nodeType":"YulVariableDeclaration","src":"19542:49:23","value":{"arguments":[{"name":"slot","nativeSrc":"19586:4:23","nodeType":"YulIdentifier","src":"19586:4:23"}],"functionName":{"name":"array_dataslot_string_storage","nativeSrc":"19556:29:23","nodeType":"YulIdentifier","src":"19556:29:23"},"nativeSrc":"19556:35:23","nodeType":"YulFunctionCall","src":"19556:35:23"},"variables":[{"name":"dstPtr","nativeSrc":"19546:6:23","nodeType":"YulTypedName","src":"19546:6:23","type":""}]},{"nativeSrc":"19604:10:23","nodeType":"YulVariableDeclaration","src":"19604:10:23","value":{"kind":"number","nativeSrc":"19613:1:23","nodeType":"YulLiteral","src":"19613:1:23","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"19608:1:23","nodeType":"YulTypedName","src":"19608:1:23","type":""}]},{"body":{"nativeSrc":"19691:172:23","nodeType":"YulBlock","src":"19691:172:23","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"19716:6:23","nodeType":"YulIdentifier","src":"19716:6:23"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"19734:3:23","nodeType":"YulIdentifier","src":"19734:3:23"},{"name":"srcOffset","nativeSrc":"19739:9:23","nodeType":"YulIdentifier","src":"19739:9:23"}],"functionName":{"name":"add","nativeSrc":"19730:3:23","nodeType":"YulIdentifier","src":"19730:3:23"},"nativeSrc":"19730:19:23","nodeType":"YulFunctionCall","src":"19730:19:23"}],"functionName":{"name":"mload","nativeSrc":"19724:5:23","nodeType":"YulIdentifier","src":"19724:5:23"},"nativeSrc":"19724:26:23","nodeType":"YulFunctionCall","src":"19724:26:23"}],"functionName":{"name":"sstore","nativeSrc":"19709:6:23","nodeType":"YulIdentifier","src":"19709:6:23"},"nativeSrc":"19709:42:23","nodeType":"YulFunctionCall","src":"19709:42:23"},"nativeSrc":"19709:42:23","nodeType":"YulExpressionStatement","src":"19709:42:23"},{"nativeSrc":"19768:24:23","nodeType":"YulAssignment","src":"19768:24:23","value":{"arguments":[{"name":"dstPtr","nativeSrc":"19782:6:23","nodeType":"YulIdentifier","src":"19782:6:23"},{"kind":"number","nativeSrc":"19790:1:23","nodeType":"YulLiteral","src":"19790:1:23","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"19778:3:23","nodeType":"YulIdentifier","src":"19778:3:23"},"nativeSrc":"19778:14:23","nodeType":"YulFunctionCall","src":"19778:14:23"},"variableNames":[{"name":"dstPtr","nativeSrc":"19768:6:23","nodeType":"YulIdentifier","src":"19768:6:23"}]},{"nativeSrc":"19809:40:23","nodeType":"YulAssignment","src":"19809:40:23","value":{"arguments":[{"name":"srcOffset","nativeSrc":"19826:9:23","nodeType":"YulIdentifier","src":"19826:9:23"},{"name":"srcOffset_1","nativeSrc":"19837:11:23","nodeType":"YulIdentifier","src":"19837:11:23"}],"functionName":{"name":"add","nativeSrc":"19822:3:23","nodeType":"YulIdentifier","src":"19822:3:23"},"nativeSrc":"19822:27:23","nodeType":"YulFunctionCall","src":"19822:27:23"},"variableNames":[{"name":"srcOffset","nativeSrc":"19809:9:23","nodeType":"YulIdentifier","src":"19809:9:23"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"19638:1:23","nodeType":"YulIdentifier","src":"19638:1:23"},{"name":"loopEnd","nativeSrc":"19641:7:23","nodeType":"YulIdentifier","src":"19641:7:23"}],"functionName":{"name":"lt","nativeSrc":"19635:2:23","nodeType":"YulIdentifier","src":"19635:2:23"},"nativeSrc":"19635:14:23","nodeType":"YulFunctionCall","src":"19635:14:23"},"nativeSrc":"19627:236:23","nodeType":"YulForLoop","post":{"nativeSrc":"19650:28:23","nodeType":"YulBlock","src":"19650:28:23","statements":[{"nativeSrc":"19652:24:23","nodeType":"YulAssignment","src":"19652:24:23","value":{"arguments":[{"name":"i","nativeSrc":"19661:1:23","nodeType":"YulIdentifier","src":"19661:1:23"},{"name":"srcOffset_1","nativeSrc":"19664:11:23","nodeType":"YulIdentifier","src":"19664:11:23"}],"functionName":{"name":"add","nativeSrc":"19657:3:23","nodeType":"YulIdentifier","src":"19657:3:23"},"nativeSrc":"19657:19:23","nodeType":"YulFunctionCall","src":"19657:19:23"},"variableNames":[{"name":"i","nativeSrc":"19652:1:23","nodeType":"YulIdentifier","src":"19652:1:23"}]}]},"pre":{"nativeSrc":"19631:3:23","nodeType":"YulBlock","src":"19631:3:23","statements":[]},"src":"19627:236:23"},{"body":{"nativeSrc":"19911:166:23","nodeType":"YulBlock","src":"19911:166:23","statements":[{"nativeSrc":"19929:43:23","nodeType":"YulVariableDeclaration","src":"19929:43:23","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"19956:3:23","nodeType":"YulIdentifier","src":"19956:3:23"},{"name":"srcOffset","nativeSrc":"19961:9:23","nodeType":"YulIdentifier","src":"19961:9:23"}],"functionName":{"name":"add","nativeSrc":"19952:3:23","nodeType":"YulIdentifier","src":"19952:3:23"},"nativeSrc":"19952:19:23","nodeType":"YulFunctionCall","src":"19952:19:23"}],"functionName":{"name":"mload","nativeSrc":"19946:5:23","nodeType":"YulIdentifier","src":"19946:5:23"},"nativeSrc":"19946:26:23","nodeType":"YulFunctionCall","src":"19946:26:23"},"variables":[{"name":"lastValue","nativeSrc":"19933:9:23","nodeType":"YulTypedName","src":"19933:9:23","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"19996:6:23","nodeType":"YulIdentifier","src":"19996:6:23"},{"arguments":[{"name":"lastValue","nativeSrc":"20008:9:23","nodeType":"YulIdentifier","src":"20008:9:23"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"20035:1:23","nodeType":"YulLiteral","src":"20035:1:23","type":"","value":"3"},{"name":"newLen","nativeSrc":"20038:6:23","nodeType":"YulIdentifier","src":"20038:6:23"}],"functionName":{"name":"shl","nativeSrc":"20031:3:23","nodeType":"YulIdentifier","src":"20031:3:23"},"nativeSrc":"20031:14:23","nodeType":"YulFunctionCall","src":"20031:14:23"},{"kind":"number","nativeSrc":"20047:3:23","nodeType":"YulLiteral","src":"20047:3:23","type":"","value":"248"}],"functionName":{"name":"and","nativeSrc":"20027:3:23","nodeType":"YulIdentifier","src":"20027:3:23"},"nativeSrc":"20027:24:23","nodeType":"YulFunctionCall","src":"20027:24:23"},{"arguments":[{"kind":"number","nativeSrc":"20057:1:23","nodeType":"YulLiteral","src":"20057:1:23","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"20053:3:23","nodeType":"YulIdentifier","src":"20053:3:23"},"nativeSrc":"20053:6:23","nodeType":"YulFunctionCall","src":"20053:6:23"}],"functionName":{"name":"shr","nativeSrc":"20023:3:23","nodeType":"YulIdentifier","src":"20023:3:23"},"nativeSrc":"20023:37:23","nodeType":"YulFunctionCall","src":"20023:37:23"}],"functionName":{"name":"not","nativeSrc":"20019:3:23","nodeType":"YulIdentifier","src":"20019:3:23"},"nativeSrc":"20019:42:23","nodeType":"YulFunctionCall","src":"20019:42:23"}],"functionName":{"name":"and","nativeSrc":"20004:3:23","nodeType":"YulIdentifier","src":"20004:3:23"},"nativeSrc":"20004:58:23","nodeType":"YulFunctionCall","src":"20004:58:23"}],"functionName":{"name":"sstore","nativeSrc":"19989:6:23","nodeType":"YulIdentifier","src":"19989:6:23"},"nativeSrc":"19989:74:23","nodeType":"YulFunctionCall","src":"19989:74:23"},"nativeSrc":"19989:74:23","nodeType":"YulExpressionStatement","src":"19989:74:23"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"19882:7:23","nodeType":"YulIdentifier","src":"19882:7:23"},{"name":"newLen","nativeSrc":"19891:6:23","nodeType":"YulIdentifier","src":"19891:6:23"}],"functionName":{"name":"lt","nativeSrc":"19879:2:23","nodeType":"YulIdentifier","src":"19879:2:23"},"nativeSrc":"19879:19:23","nodeType":"YulFunctionCall","src":"19879:19:23"},"nativeSrc":"19876:201:23","nodeType":"YulIf","src":"19876:201:23"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"20097:4:23","nodeType":"YulIdentifier","src":"20097:4:23"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"20111:1:23","nodeType":"YulLiteral","src":"20111:1:23","type":"","value":"1"},{"name":"newLen","nativeSrc":"20114:6:23","nodeType":"YulIdentifier","src":"20114:6:23"}],"functionName":{"name":"shl","nativeSrc":"20107:3:23","nodeType":"YulIdentifier","src":"20107:3:23"},"nativeSrc":"20107:14:23","nodeType":"YulFunctionCall","src":"20107:14:23"},{"kind":"number","nativeSrc":"20123:1:23","nodeType":"YulLiteral","src":"20123:1:23","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"20103:3:23","nodeType":"YulIdentifier","src":"20103:3:23"},"nativeSrc":"20103:22:23","nodeType":"YulFunctionCall","src":"20103:22:23"}],"functionName":{"name":"sstore","nativeSrc":"20090:6:23","nodeType":"YulIdentifier","src":"20090:6:23"},"nativeSrc":"20090:36:23","nodeType":"YulFunctionCall","src":"20090:36:23"},"nativeSrc":"20090:36:23","nodeType":"YulExpressionStatement","src":"20090:36:23"}]},"nativeSrc":"19473:663:23","nodeType":"YulCase","src":"19473:663:23","value":{"kind":"number","nativeSrc":"19478:1:23","nodeType":"YulLiteral","src":"19478:1:23","type":"","value":"1"}},{"body":{"nativeSrc":"20153:234:23","nodeType":"YulBlock","src":"20153:234:23","statements":[{"nativeSrc":"20167:14:23","nodeType":"YulVariableDeclaration","src":"20167:14:23","value":{"kind":"number","nativeSrc":"20180:1:23","nodeType":"YulLiteral","src":"20180:1:23","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"20171:5:23","nodeType":"YulTypedName","src":"20171:5:23","type":""}]},{"body":{"nativeSrc":"20216:67:23","nodeType":"YulBlock","src":"20216:67:23","statements":[{"nativeSrc":"20234:35:23","nodeType":"YulAssignment","src":"20234:35:23","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"20253:3:23","nodeType":"YulIdentifier","src":"20253:3:23"},{"name":"srcOffset","nativeSrc":"20258:9:23","nodeType":"YulIdentifier","src":"20258:9:23"}],"functionName":{"name":"add","nativeSrc":"20249:3:23","nodeType":"YulIdentifier","src":"20249:3:23"},"nativeSrc":"20249:19:23","nodeType":"YulFunctionCall","src":"20249:19:23"}],"functionName":{"name":"mload","nativeSrc":"20243:5:23","nodeType":"YulIdentifier","src":"20243:5:23"},"nativeSrc":"20243:26:23","nodeType":"YulFunctionCall","src":"20243:26:23"},"variableNames":[{"name":"value","nativeSrc":"20234:5:23","nodeType":"YulIdentifier","src":"20234:5:23"}]}]},"condition":{"name":"newLen","nativeSrc":"20197:6:23","nodeType":"YulIdentifier","src":"20197:6:23"},"nativeSrc":"20194:89:23","nodeType":"YulIf","src":"20194:89:23"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"20303:4:23","nodeType":"YulIdentifier","src":"20303:4:23"},{"arguments":[{"name":"value","nativeSrc":"20362:5:23","nodeType":"YulIdentifier","src":"20362:5:23"},{"name":"newLen","nativeSrc":"20369:6:23","nodeType":"YulIdentifier","src":"20369:6:23"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"20309:52:23","nodeType":"YulIdentifier","src":"20309:52:23"},"nativeSrc":"20309:67:23","nodeType":"YulFunctionCall","src":"20309:67:23"}],"functionName":{"name":"sstore","nativeSrc":"20296:6:23","nodeType":"YulIdentifier","src":"20296:6:23"},"nativeSrc":"20296:81:23","nodeType":"YulFunctionCall","src":"20296:81:23"},"nativeSrc":"20296:81:23","nodeType":"YulExpressionStatement","src":"20296:81:23"}]},"nativeSrc":"20145:242:23","nodeType":"YulCase","src":"20145:242:23","value":"default"}],"expression":{"arguments":[{"name":"newLen","nativeSrc":"19453:6:23","nodeType":"YulIdentifier","src":"19453:6:23"},{"kind":"number","nativeSrc":"19461:2:23","nodeType":"YulLiteral","src":"19461:2:23","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"19450:2:23","nodeType":"YulIdentifier","src":"19450:2:23"},"nativeSrc":"19450:14:23","nodeType":"YulFunctionCall","src":"19450:14:23"},"nativeSrc":"19443:944:23","nodeType":"YulSwitch","src":"19443:944:23"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nativeSrc":"19048:1345:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"19129:4:23","nodeType":"YulTypedName","src":"19129:4:23","type":""},{"name":"src","nativeSrc":"19135:3:23","nodeType":"YulTypedName","src":"19135:3:23","type":""}],"src":"19048:1345:23"},{"body":{"nativeSrc":"20527:145:23","nodeType":"YulBlock","src":"20527:145:23","statements":[{"nativeSrc":"20537:26:23","nodeType":"YulAssignment","src":"20537:26:23","value":{"arguments":[{"name":"headStart","nativeSrc":"20549:9:23","nodeType":"YulIdentifier","src":"20549:9:23"},{"kind":"number","nativeSrc":"20560:2:23","nodeType":"YulLiteral","src":"20560:2:23","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20545:3:23","nodeType":"YulIdentifier","src":"20545:3:23"},"nativeSrc":"20545:18:23","nodeType":"YulFunctionCall","src":"20545:18:23"},"variableNames":[{"name":"tail","nativeSrc":"20537:4:23","nodeType":"YulIdentifier","src":"20537:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"20579:9:23","nodeType":"YulIdentifier","src":"20579:9:23"},{"name":"value0","nativeSrc":"20590:6:23","nodeType":"YulIdentifier","src":"20590:6:23"}],"functionName":{"name":"mstore","nativeSrc":"20572:6:23","nodeType":"YulIdentifier","src":"20572:6:23"},"nativeSrc":"20572:25:23","nodeType":"YulFunctionCall","src":"20572:25:23"},"nativeSrc":"20572:25:23","nodeType":"YulExpressionStatement","src":"20572:25:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20617:9:23","nodeType":"YulIdentifier","src":"20617:9:23"},{"kind":"number","nativeSrc":"20628:2:23","nodeType":"YulLiteral","src":"20628:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20613:3:23","nodeType":"YulIdentifier","src":"20613:3:23"},"nativeSrc":"20613:18:23","nodeType":"YulFunctionCall","src":"20613:18:23"},{"arguments":[{"name":"value1","nativeSrc":"20637:6:23","nodeType":"YulIdentifier","src":"20637:6:23"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"20653:3:23","nodeType":"YulLiteral","src":"20653:3:23","type":"","value":"160"},{"kind":"number","nativeSrc":"20658:1:23","nodeType":"YulLiteral","src":"20658:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"20649:3:23","nodeType":"YulIdentifier","src":"20649:3:23"},"nativeSrc":"20649:11:23","nodeType":"YulFunctionCall","src":"20649:11:23"},{"kind":"number","nativeSrc":"20662:1:23","nodeType":"YulLiteral","src":"20662:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"20645:3:23","nodeType":"YulIdentifier","src":"20645:3:23"},"nativeSrc":"20645:19:23","nodeType":"YulFunctionCall","src":"20645:19:23"}],"functionName":{"name":"and","nativeSrc":"20633:3:23","nodeType":"YulIdentifier","src":"20633:3:23"},"nativeSrc":"20633:32:23","nodeType":"YulFunctionCall","src":"20633:32:23"}],"functionName":{"name":"mstore","nativeSrc":"20606:6:23","nodeType":"YulIdentifier","src":"20606:6:23"},"nativeSrc":"20606:60:23","nodeType":"YulFunctionCall","src":"20606:60:23"},"nativeSrc":"20606:60:23","nodeType":"YulExpressionStatement","src":"20606:60:23"}]},"name":"abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed","nativeSrc":"20398:274:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"20488:9:23","nodeType":"YulTypedName","src":"20488:9:23","type":""},{"name":"value1","nativeSrc":"20499:6:23","nodeType":"YulTypedName","src":"20499:6:23","type":""},{"name":"value0","nativeSrc":"20507:6:23","nodeType":"YulTypedName","src":"20507:6:23","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"20518:4:23","nodeType":"YulTypedName","src":"20518:4:23","type":""}],"src":"20398:274:23"},{"body":{"nativeSrc":"20724:88:23","nodeType":"YulBlock","src":"20724:88:23","statements":[{"body":{"nativeSrc":"20755:22:23","nodeType":"YulBlock","src":"20755:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"20757:16:23","nodeType":"YulIdentifier","src":"20757:16:23"},"nativeSrc":"20757:18:23","nodeType":"YulFunctionCall","src":"20757:18:23"},"nativeSrc":"20757:18:23","nodeType":"YulExpressionStatement","src":"20757:18:23"}]},"condition":{"arguments":[{"name":"value","nativeSrc":"20740:5:23","nodeType":"YulIdentifier","src":"20740:5:23"},{"arguments":[{"kind":"number","nativeSrc":"20751:1:23","nodeType":"YulLiteral","src":"20751:1:23","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"20747:3:23","nodeType":"YulIdentifier","src":"20747:3:23"},"nativeSrc":"20747:6:23","nodeType":"YulFunctionCall","src":"20747:6:23"}],"functionName":{"name":"eq","nativeSrc":"20737:2:23","nodeType":"YulIdentifier","src":"20737:2:23"},"nativeSrc":"20737:17:23","nodeType":"YulFunctionCall","src":"20737:17:23"},"nativeSrc":"20734:43:23","nodeType":"YulIf","src":"20734:43:23"},{"nativeSrc":"20786:20:23","nodeType":"YulAssignment","src":"20786:20:23","value":{"arguments":[{"name":"value","nativeSrc":"20797:5:23","nodeType":"YulIdentifier","src":"20797:5:23"},{"kind":"number","nativeSrc":"20804:1:23","nodeType":"YulLiteral","src":"20804:1:23","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"20793:3:23","nodeType":"YulIdentifier","src":"20793:3:23"},"nativeSrc":"20793:13:23","nodeType":"YulFunctionCall","src":"20793:13:23"},"variableNames":[{"name":"ret","nativeSrc":"20786:3:23","nodeType":"YulIdentifier","src":"20786:3:23"}]}]},"name":"increment_t_uint256","nativeSrc":"20677:135:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"20706:5:23","nodeType":"YulTypedName","src":"20706:5:23","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"20716:3:23","nodeType":"YulTypedName","src":"20716:3:23","type":""}],"src":"20677:135:23"},{"body":{"nativeSrc":"20940:161:23","nodeType":"YulBlock","src":"20940:161:23","statements":[{"nativeSrc":"20950:26:23","nodeType":"YulAssignment","src":"20950:26:23","value":{"arguments":[{"name":"headStart","nativeSrc":"20962:9:23","nodeType":"YulIdentifier","src":"20962:9:23"},{"kind":"number","nativeSrc":"20973:2:23","nodeType":"YulLiteral","src":"20973:2:23","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20958:3:23","nodeType":"YulIdentifier","src":"20958:3:23"},"nativeSrc":"20958:18:23","nodeType":"YulFunctionCall","src":"20958:18:23"},"variableNames":[{"name":"tail","nativeSrc":"20950:4:23","nodeType":"YulIdentifier","src":"20950:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"20992:9:23","nodeType":"YulIdentifier","src":"20992:9:23"},{"arguments":[{"name":"value0","nativeSrc":"21007:6:23","nodeType":"YulIdentifier","src":"21007:6:23"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"21023:3:23","nodeType":"YulLiteral","src":"21023:3:23","type":"","value":"160"},{"kind":"number","nativeSrc":"21028:1:23","nodeType":"YulLiteral","src":"21028:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"21019:3:23","nodeType":"YulIdentifier","src":"21019:3:23"},"nativeSrc":"21019:11:23","nodeType":"YulFunctionCall","src":"21019:11:23"},{"kind":"number","nativeSrc":"21032:1:23","nodeType":"YulLiteral","src":"21032:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"21015:3:23","nodeType":"YulIdentifier","src":"21015:3:23"},"nativeSrc":"21015:19:23","nodeType":"YulFunctionCall","src":"21015:19:23"}],"functionName":{"name":"and","nativeSrc":"21003:3:23","nodeType":"YulIdentifier","src":"21003:3:23"},"nativeSrc":"21003:32:23","nodeType":"YulFunctionCall","src":"21003:32:23"}],"functionName":{"name":"mstore","nativeSrc":"20985:6:23","nodeType":"YulIdentifier","src":"20985:6:23"},"nativeSrc":"20985:51:23","nodeType":"YulFunctionCall","src":"20985:51:23"},"nativeSrc":"20985:51:23","nodeType":"YulExpressionStatement","src":"20985:51:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21056:9:23","nodeType":"YulIdentifier","src":"21056:9:23"},{"kind":"number","nativeSrc":"21067:2:23","nodeType":"YulLiteral","src":"21067:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21052:3:23","nodeType":"YulIdentifier","src":"21052:3:23"},"nativeSrc":"21052:18:23","nodeType":"YulFunctionCall","src":"21052:18:23"},{"arguments":[{"arguments":[{"name":"value1","nativeSrc":"21086:6:23","nodeType":"YulIdentifier","src":"21086:6:23"}],"functionName":{"name":"iszero","nativeSrc":"21079:6:23","nodeType":"YulIdentifier","src":"21079:6:23"},"nativeSrc":"21079:14:23","nodeType":"YulFunctionCall","src":"21079:14:23"}],"functionName":{"name":"iszero","nativeSrc":"21072:6:23","nodeType":"YulIdentifier","src":"21072:6:23"},"nativeSrc":"21072:22:23","nodeType":"YulFunctionCall","src":"21072:22:23"}],"functionName":{"name":"mstore","nativeSrc":"21045:6:23","nodeType":"YulIdentifier","src":"21045:6:23"},"nativeSrc":"21045:50:23","nodeType":"YulFunctionCall","src":"21045:50:23"},"nativeSrc":"21045:50:23","nodeType":"YulExpressionStatement","src":"21045:50:23"}]},"name":"abi_encode_tuple_t_address_t_bool__to_t_address_t_bool__fromStack_reversed","nativeSrc":"20817:284:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"20901:9:23","nodeType":"YulTypedName","src":"20901:9:23","type":""},{"name":"value1","nativeSrc":"20912:6:23","nodeType":"YulTypedName","src":"20912:6:23","type":""},{"name":"value0","nativeSrc":"20920:6:23","nodeType":"YulTypedName","src":"20920:6:23","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"20931:4:23","nodeType":"YulTypedName","src":"20931:4:23","type":""}],"src":"20817:284:23"},{"body":{"nativeSrc":"21337:330:23","nodeType":"YulBlock","src":"21337:330:23","statements":[{"nativeSrc":"21347:29:23","nodeType":"YulVariableDeclaration","src":"21347:29:23","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"21365:3:23","nodeType":"YulLiteral","src":"21365:3:23","type":"","value":"160"},{"kind":"number","nativeSrc":"21370:1:23","nodeType":"YulLiteral","src":"21370:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"21361:3:23","nodeType":"YulIdentifier","src":"21361:3:23"},"nativeSrc":"21361:11:23","nodeType":"YulFunctionCall","src":"21361:11:23"},{"kind":"number","nativeSrc":"21374:1:23","nodeType":"YulLiteral","src":"21374:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"21357:3:23","nodeType":"YulIdentifier","src":"21357:3:23"},"nativeSrc":"21357:19:23","nodeType":"YulFunctionCall","src":"21357:19:23"},"variables":[{"name":"_1","nativeSrc":"21351:2:23","nodeType":"YulTypedName","src":"21351:2:23","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"21392:9:23","nodeType":"YulIdentifier","src":"21392:9:23"},{"arguments":[{"name":"value0","nativeSrc":"21407:6:23","nodeType":"YulIdentifier","src":"21407:6:23"},{"name":"_1","nativeSrc":"21415:2:23","nodeType":"YulIdentifier","src":"21415:2:23"}],"functionName":{"name":"and","nativeSrc":"21403:3:23","nodeType":"YulIdentifier","src":"21403:3:23"},"nativeSrc":"21403:15:23","nodeType":"YulFunctionCall","src":"21403:15:23"}],"functionName":{"name":"mstore","nativeSrc":"21385:6:23","nodeType":"YulIdentifier","src":"21385:6:23"},"nativeSrc":"21385:34:23","nodeType":"YulFunctionCall","src":"21385:34:23"},"nativeSrc":"21385:34:23","nodeType":"YulExpressionStatement","src":"21385:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21439:9:23","nodeType":"YulIdentifier","src":"21439:9:23"},{"kind":"number","nativeSrc":"21450:2:23","nodeType":"YulLiteral","src":"21450:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21435:3:23","nodeType":"YulIdentifier","src":"21435:3:23"},"nativeSrc":"21435:18:23","nodeType":"YulFunctionCall","src":"21435:18:23"},{"arguments":[{"name":"value1","nativeSrc":"21459:6:23","nodeType":"YulIdentifier","src":"21459:6:23"},{"name":"_1","nativeSrc":"21467:2:23","nodeType":"YulIdentifier","src":"21467:2:23"}],"functionName":{"name":"and","nativeSrc":"21455:3:23","nodeType":"YulIdentifier","src":"21455:3:23"},"nativeSrc":"21455:15:23","nodeType":"YulFunctionCall","src":"21455:15:23"}],"functionName":{"name":"mstore","nativeSrc":"21428:6:23","nodeType":"YulIdentifier","src":"21428:6:23"},"nativeSrc":"21428:43:23","nodeType":"YulFunctionCall","src":"21428:43:23"},"nativeSrc":"21428:43:23","nodeType":"YulExpressionStatement","src":"21428:43:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21491:9:23","nodeType":"YulIdentifier","src":"21491:9:23"},{"kind":"number","nativeSrc":"21502:2:23","nodeType":"YulLiteral","src":"21502:2:23","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"21487:3:23","nodeType":"YulIdentifier","src":"21487:3:23"},"nativeSrc":"21487:18:23","nodeType":"YulFunctionCall","src":"21487:18:23"},{"name":"value2","nativeSrc":"21507:6:23","nodeType":"YulIdentifier","src":"21507:6:23"}],"functionName":{"name":"mstore","nativeSrc":"21480:6:23","nodeType":"YulIdentifier","src":"21480:6:23"},"nativeSrc":"21480:34:23","nodeType":"YulFunctionCall","src":"21480:34:23"},"nativeSrc":"21480:34:23","nodeType":"YulExpressionStatement","src":"21480:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21534:9:23","nodeType":"YulIdentifier","src":"21534:9:23"},{"kind":"number","nativeSrc":"21545:2:23","nodeType":"YulLiteral","src":"21545:2:23","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"21530:3:23","nodeType":"YulIdentifier","src":"21530:3:23"},"nativeSrc":"21530:18:23","nodeType":"YulFunctionCall","src":"21530:18:23"},{"name":"value3","nativeSrc":"21550:6:23","nodeType":"YulIdentifier","src":"21550:6:23"}],"functionName":{"name":"mstore","nativeSrc":"21523:6:23","nodeType":"YulIdentifier","src":"21523:6:23"},"nativeSrc":"21523:34:23","nodeType":"YulFunctionCall","src":"21523:34:23"},"nativeSrc":"21523:34:23","nodeType":"YulExpressionStatement","src":"21523:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21577:9:23","nodeType":"YulIdentifier","src":"21577:9:23"},{"kind":"number","nativeSrc":"21588:3:23","nodeType":"YulLiteral","src":"21588:3:23","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"21573:3:23","nodeType":"YulIdentifier","src":"21573:3:23"},"nativeSrc":"21573:19:23","nodeType":"YulFunctionCall","src":"21573:19:23"},{"kind":"number","nativeSrc":"21594:3:23","nodeType":"YulLiteral","src":"21594:3:23","type":"","value":"160"}],"functionName":{"name":"mstore","nativeSrc":"21566:6:23","nodeType":"YulIdentifier","src":"21566:6:23"},"nativeSrc":"21566:32:23","nodeType":"YulFunctionCall","src":"21566:32:23"},"nativeSrc":"21566:32:23","nodeType":"YulExpressionStatement","src":"21566:32:23"},{"nativeSrc":"21607:54:23","nodeType":"YulAssignment","src":"21607:54:23","value":{"arguments":[{"name":"value4","nativeSrc":"21633:6:23","nodeType":"YulIdentifier","src":"21633:6:23"},{"arguments":[{"name":"headStart","nativeSrc":"21645:9:23","nodeType":"YulIdentifier","src":"21645:9:23"},{"kind":"number","nativeSrc":"21656:3:23","nodeType":"YulLiteral","src":"21656:3:23","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"21641:3:23","nodeType":"YulIdentifier","src":"21641:3:23"},"nativeSrc":"21641:19:23","nodeType":"YulFunctionCall","src":"21641:19:23"}],"functionName":{"name":"abi_encode_string","nativeSrc":"21615:17:23","nodeType":"YulIdentifier","src":"21615:17:23"},"nativeSrc":"21615:46:23","nodeType":"YulFunctionCall","src":"21615:46:23"},"variableNames":[{"name":"tail","nativeSrc":"21607:4:23","nodeType":"YulIdentifier","src":"21607:4:23"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"21106:561:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"21274:9:23","nodeType":"YulTypedName","src":"21274:9:23","type":""},{"name":"value4","nativeSrc":"21285:6:23","nodeType":"YulTypedName","src":"21285:6:23","type":""},{"name":"value3","nativeSrc":"21293:6:23","nodeType":"YulTypedName","src":"21293:6:23","type":""},{"name":"value2","nativeSrc":"21301:6:23","nodeType":"YulTypedName","src":"21301:6:23","type":""},{"name":"value1","nativeSrc":"21309:6:23","nodeType":"YulTypedName","src":"21309:6:23","type":""},{"name":"value0","nativeSrc":"21317:6:23","nodeType":"YulTypedName","src":"21317:6:23","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"21328:4:23","nodeType":"YulTypedName","src":"21328:4:23","type":""}],"src":"21106:561:23"},{"body":{"nativeSrc":"21752:169:23","nodeType":"YulBlock","src":"21752:169:23","statements":[{"body":{"nativeSrc":"21798:16:23","nodeType":"YulBlock","src":"21798:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"21807:1:23","nodeType":"YulLiteral","src":"21807:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"21810:1:23","nodeType":"YulLiteral","src":"21810:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"21800:6:23","nodeType":"YulIdentifier","src":"21800:6:23"},"nativeSrc":"21800:12:23","nodeType":"YulFunctionCall","src":"21800:12:23"},"nativeSrc":"21800:12:23","nodeType":"YulExpressionStatement","src":"21800:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"21773:7:23","nodeType":"YulIdentifier","src":"21773:7:23"},{"name":"headStart","nativeSrc":"21782:9:23","nodeType":"YulIdentifier","src":"21782:9:23"}],"functionName":{"name":"sub","nativeSrc":"21769:3:23","nodeType":"YulIdentifier","src":"21769:3:23"},"nativeSrc":"21769:23:23","nodeType":"YulFunctionCall","src":"21769:23:23"},{"kind":"number","nativeSrc":"21794:2:23","nodeType":"YulLiteral","src":"21794:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"21765:3:23","nodeType":"YulIdentifier","src":"21765:3:23"},"nativeSrc":"21765:32:23","nodeType":"YulFunctionCall","src":"21765:32:23"},"nativeSrc":"21762:52:23","nodeType":"YulIf","src":"21762:52:23"},{"nativeSrc":"21823:29:23","nodeType":"YulVariableDeclaration","src":"21823:29:23","value":{"arguments":[{"name":"headStart","nativeSrc":"21842:9:23","nodeType":"YulIdentifier","src":"21842:9:23"}],"functionName":{"name":"mload","nativeSrc":"21836:5:23","nodeType":"YulIdentifier","src":"21836:5:23"},"nativeSrc":"21836:16:23","nodeType":"YulFunctionCall","src":"21836:16:23"},"variables":[{"name":"value","nativeSrc":"21827:5:23","nodeType":"YulTypedName","src":"21827:5:23","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"21885:5:23","nodeType":"YulIdentifier","src":"21885:5:23"}],"functionName":{"name":"validator_revert_bytes4","nativeSrc":"21861:23:23","nodeType":"YulIdentifier","src":"21861:23:23"},"nativeSrc":"21861:30:23","nodeType":"YulFunctionCall","src":"21861:30:23"},"nativeSrc":"21861:30:23","nodeType":"YulExpressionStatement","src":"21861:30:23"},{"nativeSrc":"21900:15:23","nodeType":"YulAssignment","src":"21900:15:23","value":{"name":"value","nativeSrc":"21910:5:23","nodeType":"YulIdentifier","src":"21910:5:23"},"variableNames":[{"name":"value0","nativeSrc":"21900:6:23","nodeType":"YulIdentifier","src":"21900:6:23"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nativeSrc":"21672:249:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"21718:9:23","nodeType":"YulTypedName","src":"21718:9:23","type":""},{"name":"dataEnd","nativeSrc":"21729:7:23","nodeType":"YulTypedName","src":"21729:7:23","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"21741:6:23","nodeType":"YulTypedName","src":"21741:6:23","type":""}],"src":"21672:249:23"},{"body":{"nativeSrc":"22257:496:23","nodeType":"YulBlock","src":"22257:496:23","statements":[{"nativeSrc":"22267:29:23","nodeType":"YulVariableDeclaration","src":"22267:29:23","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"22285:3:23","nodeType":"YulLiteral","src":"22285:3:23","type":"","value":"160"},{"kind":"number","nativeSrc":"22290:1:23","nodeType":"YulLiteral","src":"22290:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"22281:3:23","nodeType":"YulIdentifier","src":"22281:3:23"},"nativeSrc":"22281:11:23","nodeType":"YulFunctionCall","src":"22281:11:23"},{"kind":"number","nativeSrc":"22294:1:23","nodeType":"YulLiteral","src":"22294:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"22277:3:23","nodeType":"YulIdentifier","src":"22277:3:23"},"nativeSrc":"22277:19:23","nodeType":"YulFunctionCall","src":"22277:19:23"},"variables":[{"name":"_1","nativeSrc":"22271:2:23","nodeType":"YulTypedName","src":"22271:2:23","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"22312:9:23","nodeType":"YulIdentifier","src":"22312:9:23"},{"arguments":[{"name":"value0","nativeSrc":"22327:6:23","nodeType":"YulIdentifier","src":"22327:6:23"},{"name":"_1","nativeSrc":"22335:2:23","nodeType":"YulIdentifier","src":"22335:2:23"}],"functionName":{"name":"and","nativeSrc":"22323:3:23","nodeType":"YulIdentifier","src":"22323:3:23"},"nativeSrc":"22323:15:23","nodeType":"YulFunctionCall","src":"22323:15:23"}],"functionName":{"name":"mstore","nativeSrc":"22305:6:23","nodeType":"YulIdentifier","src":"22305:6:23"},"nativeSrc":"22305:34:23","nodeType":"YulFunctionCall","src":"22305:34:23"},"nativeSrc":"22305:34:23","nodeType":"YulExpressionStatement","src":"22305:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"22359:9:23","nodeType":"YulIdentifier","src":"22359:9:23"},{"kind":"number","nativeSrc":"22370:2:23","nodeType":"YulLiteral","src":"22370:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"22355:3:23","nodeType":"YulIdentifier","src":"22355:3:23"},"nativeSrc":"22355:18:23","nodeType":"YulFunctionCall","src":"22355:18:23"},{"arguments":[{"name":"value1","nativeSrc":"22379:6:23","nodeType":"YulIdentifier","src":"22379:6:23"},{"name":"_1","nativeSrc":"22387:2:23","nodeType":"YulIdentifier","src":"22387:2:23"}],"functionName":{"name":"and","nativeSrc":"22375:3:23","nodeType":"YulIdentifier","src":"22375:3:23"},"nativeSrc":"22375:15:23","nodeType":"YulFunctionCall","src":"22375:15:23"}],"functionName":{"name":"mstore","nativeSrc":"22348:6:23","nodeType":"YulIdentifier","src":"22348:6:23"},"nativeSrc":"22348:43:23","nodeType":"YulFunctionCall","src":"22348:43:23"},"nativeSrc":"22348:43:23","nodeType":"YulExpressionStatement","src":"22348:43:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"22411:9:23","nodeType":"YulIdentifier","src":"22411:9:23"},{"kind":"number","nativeSrc":"22422:2:23","nodeType":"YulLiteral","src":"22422:2:23","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"22407:3:23","nodeType":"YulIdentifier","src":"22407:3:23"},"nativeSrc":"22407:18:23","nodeType":"YulFunctionCall","src":"22407:18:23"},{"kind":"number","nativeSrc":"22427:3:23","nodeType":"YulLiteral","src":"22427:3:23","type":"","value":"160"}],"functionName":{"name":"mstore","nativeSrc":"22400:6:23","nodeType":"YulIdentifier","src":"22400:6:23"},"nativeSrc":"22400:31:23","nodeType":"YulFunctionCall","src":"22400:31:23"},"nativeSrc":"22400:31:23","nodeType":"YulExpressionStatement","src":"22400:31:23"},{"nativeSrc":"22440:71:23","nodeType":"YulVariableDeclaration","src":"22440:71:23","value":{"arguments":[{"name":"value2","nativeSrc":"22483:6:23","nodeType":"YulIdentifier","src":"22483:6:23"},{"arguments":[{"name":"headStart","nativeSrc":"22495:9:23","nodeType":"YulIdentifier","src":"22495:9:23"},{"kind":"number","nativeSrc":"22506:3:23","nodeType":"YulLiteral","src":"22506:3:23","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"22491:3:23","nodeType":"YulIdentifier","src":"22491:3:23"},"nativeSrc":"22491:19:23","nodeType":"YulFunctionCall","src":"22491:19:23"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nativeSrc":"22454:28:23","nodeType":"YulIdentifier","src":"22454:28:23"},"nativeSrc":"22454:57:23","nodeType":"YulFunctionCall","src":"22454:57:23"},"variables":[{"name":"tail_1","nativeSrc":"22444:6:23","nodeType":"YulTypedName","src":"22444:6:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"22531:9:23","nodeType":"YulIdentifier","src":"22531:9:23"},{"kind":"number","nativeSrc":"22542:2:23","nodeType":"YulLiteral","src":"22542:2:23","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"22527:3:23","nodeType":"YulIdentifier","src":"22527:3:23"},"nativeSrc":"22527:18:23","nodeType":"YulFunctionCall","src":"22527:18:23"},{"arguments":[{"name":"tail_1","nativeSrc":"22551:6:23","nodeType":"YulIdentifier","src":"22551:6:23"},{"name":"headStart","nativeSrc":"22559:9:23","nodeType":"YulIdentifier","src":"22559:9:23"}],"functionName":{"name":"sub","nativeSrc":"22547:3:23","nodeType":"YulIdentifier","src":"22547:3:23"},"nativeSrc":"22547:22:23","nodeType":"YulFunctionCall","src":"22547:22:23"}],"functionName":{"name":"mstore","nativeSrc":"22520:6:23","nodeType":"YulIdentifier","src":"22520:6:23"},"nativeSrc":"22520:50:23","nodeType":"YulFunctionCall","src":"22520:50:23"},"nativeSrc":"22520:50:23","nodeType":"YulExpressionStatement","src":"22520:50:23"},{"nativeSrc":"22579:58:23","nodeType":"YulVariableDeclaration","src":"22579:58:23","value":{"arguments":[{"name":"value3","nativeSrc":"22622:6:23","nodeType":"YulIdentifier","src":"22622:6:23"},{"name":"tail_1","nativeSrc":"22630:6:23","nodeType":"YulIdentifier","src":"22630:6:23"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nativeSrc":"22593:28:23","nodeType":"YulIdentifier","src":"22593:28:23"},"nativeSrc":"22593:44:23","nodeType":"YulFunctionCall","src":"22593:44:23"},"variables":[{"name":"tail_2","nativeSrc":"22583:6:23","nodeType":"YulTypedName","src":"22583:6:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"22657:9:23","nodeType":"YulIdentifier","src":"22657:9:23"},{"kind":"number","nativeSrc":"22668:3:23","nodeType":"YulLiteral","src":"22668:3:23","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"22653:3:23","nodeType":"YulIdentifier","src":"22653:3:23"},"nativeSrc":"22653:19:23","nodeType":"YulFunctionCall","src":"22653:19:23"},{"arguments":[{"name":"tail_2","nativeSrc":"22678:6:23","nodeType":"YulIdentifier","src":"22678:6:23"},{"name":"headStart","nativeSrc":"22686:9:23","nodeType":"YulIdentifier","src":"22686:9:23"}],"functionName":{"name":"sub","nativeSrc":"22674:3:23","nodeType":"YulIdentifier","src":"22674:3:23"},"nativeSrc":"22674:22:23","nodeType":"YulFunctionCall","src":"22674:22:23"}],"functionName":{"name":"mstore","nativeSrc":"22646:6:23","nodeType":"YulIdentifier","src":"22646:6:23"},"nativeSrc":"22646:51:23","nodeType":"YulFunctionCall","src":"22646:51:23"},"nativeSrc":"22646:51:23","nodeType":"YulExpressionStatement","src":"22646:51:23"},{"nativeSrc":"22706:41:23","nodeType":"YulAssignment","src":"22706:41:23","value":{"arguments":[{"name":"value4","nativeSrc":"22732:6:23","nodeType":"YulIdentifier","src":"22732:6:23"},{"name":"tail_2","nativeSrc":"22740:6:23","nodeType":"YulIdentifier","src":"22740:6:23"}],"functionName":{"name":"abi_encode_string","nativeSrc":"22714:17:23","nodeType":"YulIdentifier","src":"22714:17:23"},"nativeSrc":"22714:33:23","nodeType":"YulFunctionCall","src":"22714:33:23"},"variableNames":[{"name":"tail","nativeSrc":"22706:4:23","nodeType":"YulIdentifier","src":"22706:4:23"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"21926:827:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"22194:9:23","nodeType":"YulTypedName","src":"22194:9:23","type":""},{"name":"value4","nativeSrc":"22205:6:23","nodeType":"YulTypedName","src":"22205:6:23","type":""},{"name":"value3","nativeSrc":"22213:6:23","nodeType":"YulTypedName","src":"22213:6:23","type":""},{"name":"value2","nativeSrc":"22221:6:23","nodeType":"YulTypedName","src":"22221:6:23","type":""},{"name":"value1","nativeSrc":"22229:6:23","nodeType":"YulTypedName","src":"22229:6:23","type":""},{"name":"value0","nativeSrc":"22237:6:23","nodeType":"YulTypedName","src":"22237:6:23","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"22248:4:23","nodeType":"YulTypedName","src":"22248:4:23","type":""}],"src":"21926:827:23"},{"body":{"nativeSrc":"22943:232:23","nodeType":"YulBlock","src":"22943:232:23","statements":[{"nativeSrc":"22953:27:23","nodeType":"YulAssignment","src":"22953:27:23","value":{"arguments":[{"name":"headStart","nativeSrc":"22965:9:23","nodeType":"YulIdentifier","src":"22965:9:23"},{"kind":"number","nativeSrc":"22976:3:23","nodeType":"YulLiteral","src":"22976:3:23","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"22961:3:23","nodeType":"YulIdentifier","src":"22961:3:23"},"nativeSrc":"22961:19:23","nodeType":"YulFunctionCall","src":"22961:19:23"},"variableNames":[{"name":"tail","nativeSrc":"22953:4:23","nodeType":"YulIdentifier","src":"22953:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"22996:9:23","nodeType":"YulIdentifier","src":"22996:9:23"},{"arguments":[{"name":"value0","nativeSrc":"23011:6:23","nodeType":"YulIdentifier","src":"23011:6:23"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"23027:3:23","nodeType":"YulLiteral","src":"23027:3:23","type":"","value":"160"},{"kind":"number","nativeSrc":"23032:1:23","nodeType":"YulLiteral","src":"23032:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"23023:3:23","nodeType":"YulIdentifier","src":"23023:3:23"},"nativeSrc":"23023:11:23","nodeType":"YulFunctionCall","src":"23023:11:23"},{"kind":"number","nativeSrc":"23036:1:23","nodeType":"YulLiteral","src":"23036:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"23019:3:23","nodeType":"YulIdentifier","src":"23019:3:23"},"nativeSrc":"23019:19:23","nodeType":"YulFunctionCall","src":"23019:19:23"}],"functionName":{"name":"and","nativeSrc":"23007:3:23","nodeType":"YulIdentifier","src":"23007:3:23"},"nativeSrc":"23007:32:23","nodeType":"YulFunctionCall","src":"23007:32:23"}],"functionName":{"name":"mstore","nativeSrc":"22989:6:23","nodeType":"YulIdentifier","src":"22989:6:23"},"nativeSrc":"22989:51:23","nodeType":"YulFunctionCall","src":"22989:51:23"},"nativeSrc":"22989:51:23","nodeType":"YulExpressionStatement","src":"22989:51:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"23060:9:23","nodeType":"YulIdentifier","src":"23060:9:23"},{"kind":"number","nativeSrc":"23071:2:23","nodeType":"YulLiteral","src":"23071:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"23056:3:23","nodeType":"YulIdentifier","src":"23056:3:23"},"nativeSrc":"23056:18:23","nodeType":"YulFunctionCall","src":"23056:18:23"},{"name":"value1","nativeSrc":"23076:6:23","nodeType":"YulIdentifier","src":"23076:6:23"}],"functionName":{"name":"mstore","nativeSrc":"23049:6:23","nodeType":"YulIdentifier","src":"23049:6:23"},"nativeSrc":"23049:34:23","nodeType":"YulFunctionCall","src":"23049:34:23"},"nativeSrc":"23049:34:23","nodeType":"YulExpressionStatement","src":"23049:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"23103:9:23","nodeType":"YulIdentifier","src":"23103:9:23"},{"kind":"number","nativeSrc":"23114:2:23","nodeType":"YulLiteral","src":"23114:2:23","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"23099:3:23","nodeType":"YulIdentifier","src":"23099:3:23"},"nativeSrc":"23099:18:23","nodeType":"YulFunctionCall","src":"23099:18:23"},{"name":"value2","nativeSrc":"23119:6:23","nodeType":"YulIdentifier","src":"23119:6:23"}],"functionName":{"name":"mstore","nativeSrc":"23092:6:23","nodeType":"YulIdentifier","src":"23092:6:23"},"nativeSrc":"23092:34:23","nodeType":"YulFunctionCall","src":"23092:34:23"},"nativeSrc":"23092:34:23","nodeType":"YulExpressionStatement","src":"23092:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"23146:9:23","nodeType":"YulIdentifier","src":"23146:9:23"},{"kind":"number","nativeSrc":"23157:2:23","nodeType":"YulLiteral","src":"23157:2:23","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"23142:3:23","nodeType":"YulIdentifier","src":"23142:3:23"},"nativeSrc":"23142:18:23","nodeType":"YulFunctionCall","src":"23142:18:23"},{"name":"value3","nativeSrc":"23162:6:23","nodeType":"YulIdentifier","src":"23162:6:23"}],"functionName":{"name":"mstore","nativeSrc":"23135:6:23","nodeType":"YulIdentifier","src":"23135:6:23"},"nativeSrc":"23135:34:23","nodeType":"YulFunctionCall","src":"23135:34:23"},"nativeSrc":"23135:34:23","nodeType":"YulExpressionStatement","src":"23135:34:23"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"22758:417:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"22888:9:23","nodeType":"YulTypedName","src":"22888:9:23","type":""},{"name":"value3","nativeSrc":"22899:6:23","nodeType":"YulTypedName","src":"22899:6:23","type":""},{"name":"value2","nativeSrc":"22907:6:23","nodeType":"YulTypedName","src":"22907:6:23","type":""},{"name":"value1","nativeSrc":"22915:6:23","nodeType":"YulTypedName","src":"22915:6:23","type":""},{"name":"value0","nativeSrc":"22923:6:23","nodeType":"YulTypedName","src":"22923:6:23","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"22934:4:23","nodeType":"YulTypedName","src":"22934:4:23","type":""}],"src":"22758:417:23"},{"body":{"nativeSrc":"23228:77:23","nodeType":"YulBlock","src":"23228:77:23","statements":[{"nativeSrc":"23238:16:23","nodeType":"YulAssignment","src":"23238:16:23","value":{"arguments":[{"name":"x","nativeSrc":"23249:1:23","nodeType":"YulIdentifier","src":"23249:1:23"},{"name":"y","nativeSrc":"23252:1:23","nodeType":"YulIdentifier","src":"23252:1:23"}],"functionName":{"name":"add","nativeSrc":"23245:3:23","nodeType":"YulIdentifier","src":"23245:3:23"},"nativeSrc":"23245:9:23","nodeType":"YulFunctionCall","src":"23245:9:23"},"variableNames":[{"name":"sum","nativeSrc":"23238:3:23","nodeType":"YulIdentifier","src":"23238:3:23"}]},{"body":{"nativeSrc":"23277:22:23","nodeType":"YulBlock","src":"23277:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"23279:16:23","nodeType":"YulIdentifier","src":"23279:16:23"},"nativeSrc":"23279:18:23","nodeType":"YulFunctionCall","src":"23279:18:23"},"nativeSrc":"23279:18:23","nodeType":"YulExpressionStatement","src":"23279:18:23"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"23269:1:23","nodeType":"YulIdentifier","src":"23269:1:23"},{"name":"sum","nativeSrc":"23272:3:23","nodeType":"YulIdentifier","src":"23272:3:23"}],"functionName":{"name":"gt","nativeSrc":"23266:2:23","nodeType":"YulIdentifier","src":"23266:2:23"},"nativeSrc":"23266:10:23","nodeType":"YulFunctionCall","src":"23266:10:23"},"nativeSrc":"23263:36:23","nodeType":"YulIf","src":"23263:36:23"}]},"name":"checked_add_t_uint256","nativeSrc":"23180:125:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"23211:1:23","nodeType":"YulTypedName","src":"23211:1:23","type":""},{"name":"y","nativeSrc":"23214:1:23","nodeType":"YulTypedName","src":"23214:1:23","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"23220:3:23","nodeType":"YulTypedName","src":"23220:3:23","type":""}],"src":"23180:125:23"},{"body":{"nativeSrc":"23539:236:23","nodeType":"YulBlock","src":"23539:236:23","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"23556:9:23","nodeType":"YulIdentifier","src":"23556:9:23"},{"kind":"number","nativeSrc":"23567:2:23","nodeType":"YulLiteral","src":"23567:2:23","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"23549:6:23","nodeType":"YulIdentifier","src":"23549:6:23"},"nativeSrc":"23549:21:23","nodeType":"YulFunctionCall","src":"23549:21:23"},"nativeSrc":"23549:21:23","nodeType":"YulExpressionStatement","src":"23549:21:23"},{"nativeSrc":"23579:70:23","nodeType":"YulVariableDeclaration","src":"23579:70:23","value":{"arguments":[{"name":"value0","nativeSrc":"23622:6:23","nodeType":"YulIdentifier","src":"23622:6:23"},{"arguments":[{"name":"headStart","nativeSrc":"23634:9:23","nodeType":"YulIdentifier","src":"23634:9:23"},{"kind":"number","nativeSrc":"23645:2:23","nodeType":"YulLiteral","src":"23645:2:23","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"23630:3:23","nodeType":"YulIdentifier","src":"23630:3:23"},"nativeSrc":"23630:18:23","nodeType":"YulFunctionCall","src":"23630:18:23"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nativeSrc":"23593:28:23","nodeType":"YulIdentifier","src":"23593:28:23"},"nativeSrc":"23593:56:23","nodeType":"YulFunctionCall","src":"23593:56:23"},"variables":[{"name":"tail_1","nativeSrc":"23583:6:23","nodeType":"YulTypedName","src":"23583:6:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"23669:9:23","nodeType":"YulIdentifier","src":"23669:9:23"},{"kind":"number","nativeSrc":"23680:2:23","nodeType":"YulLiteral","src":"23680:2:23","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"23665:3:23","nodeType":"YulIdentifier","src":"23665:3:23"},"nativeSrc":"23665:18:23","nodeType":"YulFunctionCall","src":"23665:18:23"},{"arguments":[{"name":"tail_1","nativeSrc":"23689:6:23","nodeType":"YulIdentifier","src":"23689:6:23"},{"name":"headStart","nativeSrc":"23697:9:23","nodeType":"YulIdentifier","src":"23697:9:23"}],"functionName":{"name":"sub","nativeSrc":"23685:3:23","nodeType":"YulIdentifier","src":"23685:3:23"},"nativeSrc":"23685:22:23","nodeType":"YulFunctionCall","src":"23685:22:23"}],"functionName":{"name":"mstore","nativeSrc":"23658:6:23","nodeType":"YulIdentifier","src":"23658:6:23"},"nativeSrc":"23658:50:23","nodeType":"YulFunctionCall","src":"23658:50:23"},"nativeSrc":"23658:50:23","nodeType":"YulExpressionStatement","src":"23658:50:23"},{"nativeSrc":"23717:52:23","nodeType":"YulAssignment","src":"23717:52:23","value":{"arguments":[{"name":"value1","nativeSrc":"23754:6:23","nodeType":"YulIdentifier","src":"23754:6:23"},{"name":"tail_1","nativeSrc":"23762:6:23","nodeType":"YulIdentifier","src":"23762:6:23"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nativeSrc":"23725:28:23","nodeType":"YulIdentifier","src":"23725:28:23"},"nativeSrc":"23725:44:23","nodeType":"YulFunctionCall","src":"23725:44:23"},"variableNames":[{"name":"tail","nativeSrc":"23717:4:23","nodeType":"YulIdentifier","src":"23717:4:23"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"23310:465:23","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"23500:9:23","nodeType":"YulTypedName","src":"23500:9:23","type":""},{"name":"value1","nativeSrc":"23511:6:23","nodeType":"YulTypedName","src":"23511:6:23","type":""},{"name":"value0","nativeSrc":"23519:6:23","nodeType":"YulTypedName","src":"23519:6:23","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"23530:4:23","nodeType":"YulTypedName","src":"23530:4:23","type":""}],"src":"23310:465:23"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_bool(value, pos)\n    {\n        mstore(pos, iszero(iszero(value)))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_address(value, pos)\n    {\n        mstore(pos, and(value, sub(shl(160, 1), 1)))\n    }\n    function array_storeLengthForEncoding_string(pos) -> updated_pos\n    {\n        mstore(pos, 0)\n        updated_pos := add(pos, 0x20)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_uint256_t_enum$_ResearchState_$3912_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_address_t_string_memory_ptr__to_t_uint256_t_uint8_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_address_t_string_memory_ptr__fromStack_reversed(headStart, value9, value8, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 320\n        mstore(headStart, value0)\n        if iszero(lt(value1, 3)) { panic_error_0x21() }\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), value6)\n        mstore(add(headStart, 224), value7)\n        mstore(add(headStart, 256), and(value8, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 288), _1)\n        tail := abi_encode_string(value9, add(headStart, _1))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_uint256_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_uint256_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, 0x20)\n        let srcEnd := add(add(offset, shl(5, _1)), 0x20)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, 0x20)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let array_1 := allocate_memory(add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), 0)\n        array := array_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value3 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function validator_revert_uint64(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_string_memory_ptrt_uint64(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n        let value := calldataload(add(headStart, 64))\n        validator_revert_uint64(value)\n        value2 := value\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_uint256_dyn(_3))\n        let dst_1 := dst\n        mstore(dst, _3)\n        dst := add(dst, _4)\n        let srcEnd := add(add(_2, shl(5, _3)), _4)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _4)\n        for { } lt(src, srcEnd) { src := add(src, _4) }\n        {\n            mstore(dst, abi_decode_address(src))\n            dst := add(dst, _4)\n        }\n        value0 := dst_1\n        let offset_1 := calldataload(add(headStart, _4))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, 0x20)\n        let srcPtr := add(value, 0x20)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_array_uint256_dyn(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_bytes(add(headStart, offset), dataEnd)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_uint64(value, pos)\n    {\n        mstore(pos, and(value, 0xffffffffffffffff))\n    }\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffff))\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_encode_tuple_t_contract$_ISP_$495__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_stringliteral_bfa583a8d2598f5edd72edfde6db9a2b6010ae7161d27686b20babdb1d529b4f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Caller must be owner or verified\")\n        mstore(add(headStart, 96), \" researcher\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_48567b562a28c744dba76ce6943cf1c17ec4b60da09661342613b80a5b797077__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Research does not exist\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_address__to_t_string_memory_ptr_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        tail := abi_encode_string(value0, add(headStart, 64))\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_enum_DataLocation(value, pos)\n    {\n        if iszero(lt(value, 4)) { panic_error_0x21() }\n        mstore(pos, value)\n    }\n    function abi_encode_array_bytes_dyn(value, pos) -> end\n    {\n        let pos_1 := pos\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, 0x20)\n        let tail := add(add(pos_1, shl(5, length)), 0x20)\n        let srcPtr := add(value, 0x20)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail, pos_1), not(31)))\n            tail := abi_encode_string(mload(srcPtr), tail)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        end := tail\n    }\n    function abi_encode_tuple_t_struct$_Attestation_$592_memory_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_struct$_Attestation_$592_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 128)\n        abi_encode_uint64(mload(value0), add(headStart, 128))\n        let memberValue0 := mload(add(value0, 0x20))\n        abi_encode_uint64(memberValue0, add(headStart, 160))\n        let memberValue0_1 := mload(add(value0, 0x40))\n        abi_encode_uint64(memberValue0_1, add(headStart, 192))\n        let memberValue0_2 := mload(add(value0, 0x60))\n        abi_encode_uint64(memberValue0_2, add(headStart, 224))\n        let memberValue0_3 := mload(add(value0, 128))\n        let _1 := 256\n        abi_encode_address(memberValue0_3, add(headStart, _1))\n        let memberValue0_4 := mload(add(value0, 160))\n        let _2 := 288\n        abi_encode_uint64(memberValue0_4, add(headStart, _2))\n        let memberValue0_5 := mload(add(value0, 192))\n        let _3 := 0x0140\n        abi_encode_enum_DataLocation(memberValue0_5, add(headStart, _3))\n        let memberValue0_6 := mload(add(value0, 224))\n        abi_encode_bool(memberValue0_6, add(headStart, 352))\n        let memberValue0_7 := mload(add(value0, _1))\n        mstore(add(headStart, 384), _3)\n        let tail_1 := abi_encode_array_bytes_dyn(memberValue0_7, add(headStart, 448))\n        let memberValue0_8 := mload(add(value0, _2))\n        mstore(add(headStart, 416), add(sub(tail_1, headStart), not(127)))\n        let end := abi_encode_string(memberValue0_8, tail_1)\n        mstore(add(headStart, 0x20), sub(end, headStart))\n        let tail_2 := array_storeLengthForEncoding_string(end)\n        mstore(add(headStart, 0x40), sub(tail_2, headStart))\n        let tail_3 := array_storeLengthForEncoding_string(tail_2)\n        mstore(add(headStart, 0x60), sub(tail_3, headStart))\n        tail := array_storeLengthForEncoding_string(tail_3)\n    }\n    function abi_decode_tuple_t_uint64_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_uint64(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_address_t_bool__to_t_address_t_bool__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), 160)\n        tail := abi_encode_string(value4, add(headStart, 160))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), 160)\n        let tail_1 := abi_encode_array_uint256_dyn(value2, add(headStart, 160))\n        mstore(add(headStart, 96), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value3, tail_1)\n        mstore(add(headStart, 128), sub(tail_2, headStart))\n        tail := abi_encode_string(value4, tail_2)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_array_uint256_dyn(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn(value1, tail_1)\n    }\n}","id":23,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x157 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0xA8C5DC33 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xA8C5DC33 EQ PUSH2 0x364 JUMPI DUP1 PUSH4 0xC2A756CA EQ PUSH2 0x377 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x39D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3B0 JUMPI DUP1 PUSH4 0xF5298ACA EQ PUSH2 0x3C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2BD JUMPI DUP1 PUSH4 0x73FD653D EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x85235D3D EQ PUSH2 0x2D8 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2EB JUMPI DUP1 PUSH4 0x8F192180 EQ PUSH2 0x310 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x351 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4DD2FEBE GT PUSH2 0x115 JUMPI DUP1 PUSH4 0x4DD2FEBE EQ PUSH2 0x226 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x239 JUMPI DUP1 PUSH4 0x508F3A37 EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x285 JUMPI DUP1 PUSH4 0x68E2CEA8 EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0x6B20C454 EQ PUSH2 0x2AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x15C JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x8F3E371 EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x1CE JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x1EE JUMPI DUP1 PUSH4 0x36F58E5F EQ PUSH2 0x203 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16F PUSH2 0x16A CALLDATASIZE PUSH1 0x4 PUSH2 0x185B JUMP JUMPDEST PUSH2 0x3D6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x195 PUSH2 0x190 CALLDATASIZE PUSH1 0x4 PUSH2 0x189B JUMP JUMPDEST PUSH2 0x3FE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x179 JUMP JUMPDEST PUSH2 0x1B8 PUSH2 0x1B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x185B JUMP JUMPDEST PUSH2 0x44E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x179 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x191B JUMP JUMPDEST PUSH2 0x1E1 PUSH2 0x1DC CALLDATASIZE PUSH1 0x4 PUSH2 0x1990 JUMP JUMPDEST PUSH2 0x55A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x179 SWAP2 SWAP1 PUSH2 0x19A9 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x1FC CALLDATASIZE PUSH1 0x4 PUSH2 0x1B03 JUMP JUMPDEST PUSH2 0x5EE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x195 PUSH2 0x211 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BAC JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x234 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BDC JUMP JUMPDEST PUSH2 0x65A JUMP JUMPDEST PUSH2 0x24C PUSH2 0x247 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C36 JUMP JUMPDEST PUSH2 0x946 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x179 SWAP2 SWAP1 PUSH2 0x1D31 JUMP JUMPDEST PUSH2 0x195 PUSH2 0x267 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BAC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x195 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x2A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D44 JUMP JUMPDEST PUSH2 0xA12 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x2B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D97 JUMP JUMPDEST PUSH2 0xC90 JUMP JUMPDEST PUSH2 0x201 PUSH2 0xCF4 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x2D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BAC JUMP JUMPDEST PUSH2 0xD08 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x2E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BAC JUMP JUMPDEST PUSH2 0xD5C JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x179 JUMP JUMPDEST PUSH2 0x339 PUSH2 0x31E CALLDATASIZE PUSH1 0x4 PUSH2 0x1BAC JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x179 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x35F CALLDATASIZE PUSH1 0x4 PUSH2 0x1E0A JUMP JUMPDEST PUSH2 0xF4F JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x2F8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x1B8 PUSH2 0x385 CALLDATASIZE PUSH1 0x4 PUSH2 0x1990 JUMP JUMPDEST PUSH2 0xF5E JUMP JUMPDEST PUSH2 0x195 PUSH2 0x398 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E46 JUMP JUMPDEST PUSH2 0xFC5 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x3AB CALLDATASIZE PUSH1 0x4 PUSH2 0x1E79 JUMP JUMPDEST PUSH2 0xFF3 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x3BE CALLDATASIZE PUSH1 0x4 PUSH2 0x1BAC JUMP JUMPDEST PUSH2 0x1052 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x3D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EDD JUMP JUMPDEST PUSH2 0x1090 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x42F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ JUMPDEST DUP1 PUSH2 0x3F8 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x3F8 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x46A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0xA SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 DUP6 ADD SLOAD PUSH1 0x5 DUP7 ADD SLOAD PUSH1 0x6 DUP8 ADD SLOAD PUSH1 0x7 DUP9 ADD SLOAD PUSH1 0x8 DUP10 ADD SLOAD PUSH1 0x9 DUP11 ADD DUP1 SLOAD SWAP10 SWAP13 POP PUSH1 0xFF SWAP1 SWAP9 AND SWAP11 POP SWAP6 SWAP9 SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP2 SWAP5 SWAP1 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP2 PUSH2 0x4D7 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x503 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x550 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x525 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x550 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x533 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP11 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x569 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x595 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5E2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5B7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5E2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5C5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP2 EQ DUP1 ISZERO SWAP1 PUSH2 0x60F JUMPI POP PUSH2 0x60D DUP7 DUP3 PUSH2 0xFC5 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x645 JUMPI PUSH1 0x40 MLOAD PUSH4 0x711BEC91 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP8 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x652 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x10C6 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x682 JUMPI POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST PUSH2 0x6E2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206D757374206265206F776E6572206F72207665726966696564 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x103932B9B2B0B931B432B9 PUSH1 0xA9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x63C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SUB PUSH2 0x741 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526573656172636820646F6573206E6F74206578697374000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x63C JUMP JUMPDEST PUSH1 0x8 DUP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH1 0x1F SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x769 SWAP2 DUP8 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH1 0x20 ADD PUSH2 0x1F4A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE PUSH1 0x1 DUP1 DUP5 MSTORE DUP4 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP3 POP PUSH1 0x0 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x78C JUMPI SWAP1 POP POP PUSH1 0x8 DUP6 ADD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP2 SWAP3 POP ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7E0 JUMPI PUSH2 0x7E0 PUSH2 0x1F74 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x869 JUMPI PUSH2 0x869 PUSH2 0x18BF JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 ADD DUP7 SWAP1 MSTORE PUSH1 0x60 SWAP1 SWAP3 ADD DUP7 SWAP1 MSTORE PUSH1 0xA SLOAD SWAP2 MLOAD PUSH4 0xB82916CB PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SWAP4 POP SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xB82916CB SWAP1 PUSH2 0x8B7 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1FF8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8D6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8FA SWAP2 SWAP1 PUSH2 0x212B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND DUP2 MSTORE SWAP1 SWAP2 POP CALLER SWAP1 PUSH32 0x9C671A1530AF5D07EF953AFA0BDE839D600ABE110ED1178BBBECF03AD8DC611A SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x977 JUMPI DUP2 MLOAD DUP4 MLOAD PUSH1 0x40 MLOAD PUSH4 0x5B059991 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x63C JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x992 JUMPI PUSH2 0x992 PUSH2 0x19BC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x9BB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xA0A JUMPI PUSH1 0x20 DUP1 DUP3 MUL DUP7 ADD ADD MLOAD PUSH2 0x9E5 SWAP1 PUSH1 0x20 DUP1 DUP5 MUL DUP8 ADD ADD MLOAD PUSH2 0x3D6 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x9F7 JUMPI PUSH2 0x9F7 PUSH2 0x1F74 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x9C1 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x5F5E100 PUSH1 0x0 PUSH2 0xA23 DUP3 DUP7 PUSH2 0x215E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xA4E JUMPI PUSH2 0xA4E PUSH2 0x18BF JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 ADD DUP10 SWAP1 MSTORE PUSH1 0x60 DUP4 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP4 ADD DUP9 SWAP1 MSTORE PUSH1 0x0 PUSH1 0xA0 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 DUP5 ADD DUP2 SWAP1 MSTORE CALLER PUSH1 0xE0 DUP6 ADD DUP2 SWAP1 MSTORE PUSH2 0x100 SWAP1 SWAP5 ADD DUP13 SWAP1 MSTORE SWAP3 DUP4 MSTORE PUSH1 0x6 DUP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP4 SSTORE SWAP2 DUP5 MSTORE SWAP3 DUP3 SWAP1 KECCAK256 DUP5 MLOAD PUSH1 0xA SWAP1 SWAP5 MUL ADD SWAP3 DUP4 SSTORE SWAP1 DUP4 ADD MLOAD DUP3 DUP3 ADD DUP1 SLOAD SWAP5 SWAP6 POP DUP6 SWAP5 SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0xFF NOT AND SWAP1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xADC JUMPI PUSH2 0xADC PUSH2 0x18BF JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x3 DUP3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x4 DUP3 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x5 DUP3 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x6 DUP3 ADD SSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x7 DUP3 ADD SSTORE PUSH2 0x100 DUP3 ADD MLOAD PUSH1 0x8 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x120 DUP3 ADD MLOAD PUSH1 0x9 DUP3 ADD SWAP1 PUSH2 0xB59 SWAP1 DUP3 PUSH2 0x21C8 JUMP JUMPDEST POP POP PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP4 MLOAD DUP2 SSTORE SWAP1 DUP4 ADD MLOAD PUSH1 0x1 DUP1 DUP4 ADD DUP1 SLOAD DUP7 SWAP6 POP SWAP1 SWAP2 PUSH1 0xFF NOT SWAP1 SWAP2 AND SWAP1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xB9C JUMPI PUSH2 0xB9C PUSH2 0x18BF JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x3 DUP3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x4 DUP3 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x5 DUP3 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x6 DUP3 ADD SSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x7 DUP3 ADD SSTORE PUSH2 0x100 DUP3 ADD MLOAD PUSH1 0x8 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x120 DUP3 ADD MLOAD PUSH1 0x9 DUP3 ADD SWAP1 PUSH2 0xC19 SWAP1 DUP3 PUSH2 0x21C8 JUMP JUMPDEST POP POP PUSH1 0x4 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE CALLER PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0xA0F5EE5B57F0C2F7AC409633C1C78B5D7473845E4FA9F659B98B4392FFBCDEBA SWAP3 POP ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x4 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0xC67 DUP4 PUSH2 0x2287 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP1 MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xC86 DUP9 DUP3 PUSH2 0x21C8 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 0xCB0 JUMPI POP PUSH2 0xCAE DUP4 CALLER PUSH2 0xFC5 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0xCE4 JUMPI CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x711BEC91 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x63C JUMP JUMPDEST PUSH2 0xCEF DUP4 DUP4 DUP4 PUSH2 0x112D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xCFC PUSH2 0x1173 JUMP JUMPDEST PUSH2 0xD06 PUSH1 0x0 PUSH2 0x11A0 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xD10 PUSH2 0x1173 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0xF89EF2D5D537A2764CDC3D2319C0320FEB008480D7B24C76E4AC853C8BAC67E8 SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0xD64 PUSH2 0x1173 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x1E SWAP2 PUSH1 0x0 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xD7F JUMPI SWAP1 POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP3 POP ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xDCD JUMPI PUSH2 0xDCD PUSH2 0x1F74 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xE04 SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE PUSH2 0x140 DUP4 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 AND DUP4 MSTORE PUSH1 0x0 PUSH1 0x20 DUP5 ADD DUP2 SWAP1 MSTORE DUP4 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE ADDRESS PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0xE0 DUP5 ADD DUP2 SWAP1 MSTORE PUSH2 0x100 DUP5 ADD DUP7 SWAP1 MSTORE PUSH2 0x120 DUP5 ADD DUP3 SWAP1 MSTORE PUSH1 0xA SLOAD SWAP3 MLOAD PUSH4 0xB82916CB PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP5 POP SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xB82916CB SWAP1 PUSH2 0xE96 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1FF8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEB5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xED9 SWAP2 SWAP1 PUSH2 0x212B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE SWAP3 SWAP4 POP SWAP1 SWAP2 PUSH32 0x22C9AA052D4E34C225D60366B28389EE92CC16A9675CF0C73566587DB4AABCB8 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xF5A CALLER DUP4 DUP4 PUSH2 0x11F2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 DUP6 ADD SLOAD PUSH1 0x5 DUP7 ADD SLOAD PUSH1 0x6 DUP8 ADD SLOAD SWAP8 DUP8 ADD SLOAD PUSH1 0x8 DUP9 ADD SLOAD PUSH1 0x9 DUP10 ADD DUP1 SLOAD SWAP9 SWAP11 PUSH1 0xFF SWAP1 SWAP9 AND SWAP10 SWAP7 SWAP9 SWAP6 SWAP8 SWAP5 SWAP7 SWAP4 SWAP6 SWAP3 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 PUSH2 0x4D7 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP2 EQ DUP1 ISZERO SWAP1 PUSH2 0x1014 JUMPI POP PUSH2 0x1012 DUP7 DUP3 PUSH2 0xFC5 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1045 JUMPI PUSH1 0x40 MLOAD PUSH4 0x711BEC91 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP8 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x63C JUMP JUMPDEST PUSH2 0x652 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x1288 JUMP JUMPDEST PUSH2 0x105A PUSH2 0x1173 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1084 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x63C JUMP JUMPDEST PUSH2 0x108D DUP2 PUSH2 0x11A0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 0x10B0 JUMPI POP PUSH2 0x10AE DUP4 CALLER PUSH2 0xFC5 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x10BB JUMPI CALLER PUSH2 0xCB7 JUMP JUMPDEST PUSH2 0xCEF DUP4 DUP4 DUP4 PUSH2 0x1316 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x10F0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2BFA23E7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x63C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x1119 JUMPI PUSH1 0x40 MLOAD PUSH3 0x6A0D45 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x63C JUMP JUMPDEST PUSH2 0x1126 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x137A JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1156 JUMPI PUSH1 0x40 MLOAD PUSH3 0x6A0D45 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x63C JUMP JUMPDEST PUSH2 0xCEF DUP4 PUSH1 0x0 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x137A JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xD06 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x63C JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x121B JUMPI PUSH1 0x40 MLOAD PUSH3 0xCED3E1 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x63C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x12B2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2BFA23E7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x63C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x12DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x6A0D45 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x63C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP7 SWAP1 MSTORE DUP2 DUP4 ADD SWAP1 DUP2 MSTORE PUSH1 0x60 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH2 0x130D DUP8 DUP8 DUP5 DUP5 DUP8 PUSH2 0x137A JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x133F JUMPI PUSH1 0x40 MLOAD PUSH3 0x6A0D45 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x63C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP6 SWAP1 MSTORE DUP2 DUP4 ADD SWAP1 DUP2 MSTORE PUSH1 0x60 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 PUSH1 0x80 DUP3 ADD DUP2 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH2 0x1126 SWAP2 DUP8 SWAP2 DUP6 SWAP1 DUP6 SWAP1 JUMPDEST PUSH2 0x1386 DUP6 DUP6 DUP6 DUP6 PUSH2 0x13CD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1126 JUMPI DUP3 MLOAD CALLER SWAP1 PUSH1 0x1 SUB PUSH2 0x13BF JUMPI PUSH1 0x20 DUP5 DUP2 ADD MLOAD SWAP1 DUP5 ADD MLOAD PUSH2 0x13B8 DUP4 DUP10 DUP10 DUP6 DUP6 DUP10 PUSH2 0x13DF JUMP JUMPDEST POP POP PUSH2 0x652 JUMP JUMPDEST PUSH2 0x652 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1503 JUMP JUMPDEST PUSH2 0x13D9 DUP5 DUP5 DUP5 DUP5 PUSH2 0x15EC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x652 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0x1423 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x22A0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x145E JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x145B SWAP2 DUP2 ADD SWAP1 PUSH2 0x22E5 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x14C7 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x148C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1491 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x14BF JUMPI PUSH1 0x40 MLOAD PUSH4 0x2BFA23E7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x63C JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH2 0x130D JUMPI PUSH1 0x40 MLOAD PUSH4 0x2BFA23E7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x63C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x652 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0x1547 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2302 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1582 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x157F SWAP2 DUP2 ADD SWAP1 PUSH2 0x22E5 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x15B0 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x148C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1491 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xBC197C81 PUSH1 0xE0 SHL EQ PUSH2 0x130D JUMPI PUSH1 0x40 MLOAD PUSH4 0x2BFA23E7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x63C JUMP JUMPDEST PUSH2 0x15F4 PUSH2 0x1600 JUMP JUMPDEST PUSH2 0x13D9 DUP5 DUP5 DUP5 DUP5 PUSH2 0x162B JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xD06 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP3 MLOAD EQ PUSH2 0x165A JUMPI DUP2 MLOAD DUP2 MLOAD PUSH1 0x40 MLOAD PUSH4 0x5B059991 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x63C JUMP JUMPDEST CALLER PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x1760 JUMPI PUSH1 0x20 DUP2 DUP2 MUL DUP6 DUP2 ADD DUP3 ADD MLOAD SWAP1 DUP6 ADD SWAP1 SWAP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND ISZERO PUSH2 0x1711 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x16EA JUMPI PUSH1 0x40 MLOAD PUSH4 0x3DEE4C5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x84 ADD PUSH2 0x63C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND ISZERO PUSH2 0x1756 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x1750 SWAP1 DUP5 SWAP1 PUSH2 0x2360 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x165E JUMP JUMPDEST POP DUP3 MLOAD PUSH1 0x1 SUB PUSH2 0x17E1 JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x0 SWAP1 PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP2 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x17D2 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP PUSH2 0x1126 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x1830 SWAP3 SWAP2 SWAP1 PUSH2 0x2373 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1856 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x186E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1877 DUP4 PUSH2 0x183F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x108D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x18B8 DUP2 PUSH2 0x1885 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x18FB JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x18DF JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x140 DUP13 DUP4 MSTORE PUSH1 0x3 DUP13 LT PUSH2 0x1933 JUMPI PUSH2 0x1933 PUSH2 0x18BF JUMP JUMPDEST DUP12 PUSH1 0x20 DUP5 ADD MSTORE DUP11 PUSH1 0x40 DUP5 ADD MSTORE DUP10 PUSH1 0x60 DUP5 ADD MSTORE DUP9 PUSH1 0x80 DUP5 ADD MSTORE DUP8 PUSH1 0xA0 DUP5 ADD MSTORE DUP7 PUSH1 0xC0 DUP5 ADD MSTORE DUP6 PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x100 DUP5 ADD MSTORE DUP1 PUSH2 0x120 DUP5 ADD MSTORE PUSH2 0x197F DUP2 DUP5 ADD DUP6 PUSH2 0x18D5 JUMP JUMPDEST SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x18B8 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x18D5 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x19FA JUMPI PUSH2 0x19FA PUSH2 0x19BC JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x1A1B JUMPI PUSH2 0x1A1B PUSH2 0x19BC JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x1A4B PUSH2 0x1A46 DUP4 PUSH2 0x1A02 JUMP JUMPDEST PUSH2 0x19D2 JUMP JUMPDEST DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP5 PUSH1 0x5 SHL DUP8 ADD ADD SWAP4 POP DUP7 DUP5 GT ISZERO PUSH2 0x1A6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1A89 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x1A72 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1AA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1ABE JUMPI PUSH2 0x1ABE PUSH2 0x19BC JUMP JUMPDEST PUSH2 0x1AD1 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x19D2 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1AE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1B1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B24 DUP7 PUSH2 0x183F JUMP JUMPDEST SWAP5 POP PUSH2 0x1B32 PUSH1 0x20 DUP8 ADD PUSH2 0x183F JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1B4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B5A DUP10 DUP4 DUP11 ADD PUSH2 0x1A25 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1B70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B7C DUP10 DUP4 DUP11 ADD PUSH2 0x1A25 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1B92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B9F DUP9 DUP3 DUP10 ADD PUSH2 0x1A94 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18B8 DUP3 PUSH2 0x183F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x108D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1BF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1C0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C1A DUP7 DUP3 DUP8 ADD PUSH2 0x1A94 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x1C2B DUP2 PUSH2 0x1BC7 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1C60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1C74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x1C84 PUSH2 0x1A46 DUP4 PUSH2 0x1A02 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP10 DUP5 GT ISZERO PUSH2 0x1CA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x1CC8 JUMPI PUSH2 0x1CB9 DUP7 PUSH2 0x183F JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0x1CA8 JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0x1CDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CEB DUP6 DUP3 DUP7 ADD PUSH2 0x1A25 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1D26 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1D0A JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x18B8 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1CF5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1D5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1D70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D7C DUP8 DUP3 DUP9 ADD PUSH2 0x1A94 JUMP JUMPDEST SWAP8 PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP8 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP7 PUSH1 0x60 ADD CALLDATALOAD SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1DAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1DB5 DUP5 PUSH2 0x183F JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1DD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1DDD DUP8 DUP4 DUP9 ADD PUSH2 0x1A25 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1DF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E00 DUP7 DUP3 DUP8 ADD PUSH2 0x1A25 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E26 DUP4 PUSH2 0x183F JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1E3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E62 DUP4 PUSH2 0x183F JUMP JUMPDEST SWAP2 POP PUSH2 0x1E70 PUSH1 0x20 DUP5 ADD PUSH2 0x183F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1E91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E9A DUP7 PUSH2 0x183F JUMP JUMPDEST SWAP5 POP PUSH2 0x1EA8 PUSH1 0x20 DUP8 ADD PUSH2 0x183F JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1ED1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B9F DUP9 DUP3 DUP10 ADD PUSH2 0x1A94 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1EF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EFB DUP5 PUSH2 0x183F JUMP JUMPDEST SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 SWAP1 SWAP5 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1F24 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1F44 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1F5D PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x18D5 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x1F9A JUMPI PUSH2 0x1F9A PUSH2 0x18BF JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MLOAD DUP1 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP6 POP PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD PUSH1 0x20 DUP7 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1FEB JUMPI PUSH1 0x1F NOT DUP7 DUP5 SUB ADD DUP10 MSTORE PUSH2 0x1FD9 DUP4 DUP4 MLOAD PUSH2 0x18D5 JUMP JUMPDEST SWAP9 DUP5 ADD SWAP9 SWAP3 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1FBD JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH2 0x2012 PUSH1 0x80 DUP3 ADD DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x202E PUSH1 0xA0 DUP5 ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD AND PUSH1 0xE0 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x100 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP6 ADD MLOAD SWAP2 POP PUSH2 0x120 PUSH2 0x2086 DUP2 DUP7 ADD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xC0 DUP7 ADD MLOAD SWAP3 POP PUSH2 0x140 PUSH2 0x209C DUP2 DUP8 ADD DUP6 PUSH2 0x1F8A JUMP JUMPDEST PUSH1 0xE0 DUP8 ADD MLOAD ISZERO ISZERO PUSH2 0x160 DUP8 ADD MSTORE DUP3 DUP8 ADD MLOAD PUSH2 0x180 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 POP PUSH2 0x20C6 PUSH2 0x1C0 DUP7 ADD DUP5 PUSH2 0x1F9E JUMP JUMPDEST SWAP1 DUP7 ADD MLOAD DUP6 DUP3 SUB PUSH1 0x7F NOT ADD PUSH2 0x1A0 DUP8 ADD MSTORE SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x20E6 DUP3 DUP3 PUSH2 0x18D5 JUMP JUMPDEST SWAP2 POP POP DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x20FF DUP2 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 POP PUSH1 0x20 DUP2 ADD DUP4 DUP2 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x213D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x18B8 DUP2 PUSH2 0x1BC7 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x217B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0xCEF JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x21A9 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x652 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x21B5 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x21E1 JUMPI PUSH2 0x21E1 PUSH2 0x19BC JUMP JUMPDEST PUSH2 0x21F5 DUP2 PUSH2 0x21EF DUP5 SLOAD PUSH2 0x1F10 JUMP JUMPDEST DUP5 PUSH2 0x2180 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x222A JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2212 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x652 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2259 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x223A JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x2277 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2299 JUMPI PUSH2 0x2299 PUSH2 0x2148 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x22DA SWAP1 DUP4 ADD DUP5 PUSH2 0x18D5 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x22F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x18B8 DUP2 PUSH2 0x1885 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x232E SWAP1 DUP4 ADD DUP7 PUSH2 0x1CF5 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x2340 DUP2 DUP7 PUSH2 0x1CF5 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x2354 DUP2 DUP6 PUSH2 0x18D5 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x3F8 JUMPI PUSH2 0x3F8 PUSH2 0x2148 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2386 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1CF5 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2398 DUP2 DUP6 PUSH2 0x1CF5 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NUMBER 0xE MLOAD PUSH20 0x5C42A32B571376D5E1ED325DD22177AFCEA0EEE7 PC PC 0xC0 0xD2 DUP13 0xE0 PC 0xCE PUSH5 0x736F6C6343 STOP ADDMOD NOT STOP CALLER ","sourceMap":"559:8689:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2247:132:8;;;;;;:::i;:::-;;:::i;:::-;;;597:25:23;;;585:2;570:18;2247:132:8;;;;;;;;1380:305;;;;;;:::i;:::-;;:::i;:::-;;;1280:14:23;;1273:22;1255:41;;1243:2;1228:18;1380:305:8;1115:187:23;1325:53:22;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;:::i;2084:103:8:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4014:429::-;;;;;;:::i;:::-;;:::i;:::-;;1268:51:22;;;;;;:::i;:::-;;;;;;;;;;;;;;;;6484:2084;;;;;;:::i;:::-;;:::i;2536:552:8:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4780:146:22:-;;;;;;:::i;:::-;-1:-1:-1;;;;;4888:31:22;4865:4;4888:31;;;:19;:31;;;;;;;;;4780:146;1850:84:17;1920:7;;-1:-1:-1;;;1920:7:17;;;;1850:84;;2623:2151:22;;;;;;:::i;:::-;;:::i;681:313:11:-;;;;;;:::i;:::-;;:::i;2293:101:6:-;;;:::i;4932:163:22:-;;;;;;:::i;:::-;;:::i;5101:1268::-;;;;;;:::i;:::-;;:::i;1638:85:6:-;1710:6;;-1:-1:-1;;;;;1710:6:6;1638:85;;;-1:-1:-1;;;;;10356:32:23;;;10338:51;;10326:2;10311:18;1638:85:6;10192:203:23;1489:68:22;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;1489:68:22;;;;;;-1:-1:-1;;;;;10669:31:23;;;10651:50;;10639:2;10624:18;1489:68:22;10507:200:23;3156:144:8;;;;;;:::i;:::-;;:::i;1696:71:22:-;;;;;-1:-1:-1;;;;;1696:71:22;;;1384:48;;;;;;:::i;:::-;;:::i;3367:157:8:-;;;;;;:::i;:::-;;:::i;3591:351::-;;;;;;:::i;:::-;;:::i;2543:215:6:-;;;;;;:::i;:::-;;:::i;394:281:11:-;;;;;;:::i;:::-;;:::i;2247:132:8:-;2324:7;2350:13;;;;;;;;;;;-1:-1:-1;;;;;2350:22:8;;;;;;;;;;2247:132;;;;;:::o;1380:305::-;1482:4;-1:-1:-1;;;;;;1517:41:8;;-1:-1:-1;;;1517:41:8;;:109;;-1:-1:-1;;;;;;;1574:52:8;;-1:-1:-1;;;1574:52:8;1517:109;:161;;;-1:-1:-1;;;;;;;;;;861:40:19;;;1642:36:8;762:146:19;1325:53:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1325:53:22;;;;;-1:-1:-1;1325:53:22;;;;;;;;;;;;-1:-1:-1;;;;;1325:53:22;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2084:103:8:-;2144:13;2176:4;2169:11;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2084:103;;;:::o;4014:429::-;735:10:16;-1:-1:-1;;;;;4251:14:8;;;;;;;:49;;;4270:30;4287:4;4293:6;4270:16;:30::i;:::-;4269:31;4251:49;4247:129;;;4323:42;;-1:-1:-1;;;4323:42:8;;-1:-1:-1;;;;;13101:15:23;;;4323:42:8;;;13083:34:23;13153:15;;13133:18;;;13126:43;13018:18;;4323:42:8;;;;;;;;4247:129;4385:51;4408:4;4414:2;4418:3;4423:6;4431:4;4385:22;:51::i;:::-;4198:245;4014:429;;;;;:::o;6484:2084:22:-;1710:6:6;;-1:-1:-1;;;;;1710:6:6;6763:10:22;:21;;:56;;-1:-1:-1;6808:10:22;6788:31;;;;:19;:31;;;;;;;;6763:56;6742:146;;;;-1:-1:-1;;;6742:146:22;;13382:2:23;6742:146:22;;;13364:21:23;13421:2;13401:18;;;13394:30;13460:34;13440:18;;;13433:62;-1:-1:-1;;;13511:18:23;;;13504:41;13562:19;;6742:146:22;13180:407:23;6742:146:22;6936:25;6964:24;;;:12;:24;;;;;7015:11;;6964:24;;7015:16;7007:52;;;;-1:-1:-1;;;7007:52:22;;13794:2:23;7007:52:22;;;13776:21:23;13833:2;13813:18;;;13806:30;13872:25;13852:18;;;13845:53;13915:18;;7007:52:22;13592:347:23;7007:52:22;7401:14;;;;7385:31;;7176:2;;7158:15;;7385:31;;7396:3;;-1:-1:-1;;;;;7401:14:22;;;;7385:31;;;:::i;:::-;;;;;;;-1:-1:-1;;7385:31:22;;;7507:1;7495:14;;;;;;;;;7385:31;-1:-1:-1;7467:25:22;;7385:31;7495:14;;;;;;;;;;;;;;;;;;;-1:-1:-1;7609:14:22;;;;7598:26;;;-1:-1:-1;;;;;7609:14:22;;;7598:26;;;10338:51:23;7467:42:22;;-1:-1:-1;10311:18:23;7598:26:22;;;;;;;;;;;;7582:10;7593:1;7582:13;;;;;;;;:::i;:::-;;;;;;:42;;;;7684:38;7725:505;;;;;;;;7761:8;-1:-1:-1;;;;;7725:505:22;;;;;7804:19;-1:-1:-1;;;;;7725:505:22;;;;;7917:1;-1:-1:-1;;;;;7725:505:22;;;;;7949:1;-1:-1:-1;;;;;7725:505:22;;;;;8001:4;-1:-1:-1;;;;;7725:505:22;;;;;8032:1;-1:-1:-1;;;;;7725:505:22;;;;;8104:20;7725:505;;;;;;;;:::i;:::-;;;8147:5;7725:505;;;;;;;;;;;;;;;;;;;;8330:10;;:108;;-1:-1:-1;;;8330:108:22;;7684:546;;-1:-1:-1;8147:5:22;-1:-1:-1;;;;;8330:10:22;;;;:17;;:108;;7684:546;;8330:108;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8514:47;;-1:-1:-1;;;;;10669:31:23;;10651:50;;8307:131:22;;-1:-1:-1;8535:10:22;;8514:47;;10639:2:23;10624:18;8514:47:22;;;;;;;6658:1910;;;;;;6484:2084;;;:::o;2536:552:8:-;2660:16;2711:3;:10;2692:8;:15;:29;2688:121;;2770:10;;2782:15;;2744:54;;-1:-1:-1;;;2744:54:8;;;;;17770:25:23;;;;17811:18;;;17804:34;17743:18;;2744:54:8;17596:248:23;2688:121:8;2819:30;2866:8;:15;-1:-1:-1;;;;;2852:30:8;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2852:30:8;;2819:63;;2898:9;2893:158;2917:8;:15;2913:1;:19;2893:158;;;4777:4:15;4768:14;;;4748:35;;;4742:42;2972:68:8;;4777:4:15;4768:14;;;4748:35;;;4742:42;2247:132:8;:::i;2972:68::-;2953:13;2967:1;2953:16;;;;;;;;:::i;:::-;;;;;;;;;;:87;2934:3;;2893:158;;;-1:-1:-1;3068:13:8;2536:552;-1:-1:-1;;;2536:552:8:o;2623:2151:22:-;3353:3;3333:17;3576:18;3353:3;3576:6;:18;:::i;:::-;3555:39;;3647:27;3677:378;;;;;;;;3704:14;;3677:378;;;;3739:24;3677:378;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3677:378:22;;;;;;;;;;;;4003:10;3677:378;;;;;;;;;;;;;4166:27;;;:15;:27;;;;:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3647:408;;-1:-1:-1;3647:408:22;;4166:45;;;;-1:-1:-1;;4166:45:22;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;4166:45:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4166:45:22;-1:-1:-1;;;;;4166:45:22;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;4234:14:22;;4221:28;;;;:12;:28;;;;;;;;:42;;;;;;;;;;;;;;4252:11;;-1:-1:-1;4221:42:22;;-1:-1:-1;;4221:42:22;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;4221:42:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4221:42:22;-1:-1:-1;;;;;4221:42:22;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;4469:14:22;;4453:43;;;20572:25:23;;;4485:10:22;20628:2:23;20613:18;;20606:60;4453:43:22;;-1:-1:-1;20545:18:23;4453:43:22;;;;;;;4559:14;:16;;;:14;:16;;;:::i;:::-;;;;-1:-1:-1;;4745:14:22;;4734:26;;;;:10;:26;;;;;:33;4763:4;4734:26;:33;:::i;:::-;;2784:1990;;;2623:2151;;;;:::o;681:313:11:-;-1:-1:-1;;;;;793:23:11;;735:10:16;793:23:11;;;;:67;;-1:-1:-1;821:39:11;838:7;735:10:16;3367:157:8;:::i;821:39:11:-;820:40;793:67;789:156;;;735:10:16;912:12:11;883:51;;-1:-1:-1;;;883:51:11;;-1:-1:-1;;;;;13101:15:23;;;883:51:11;;;13083:34:23;13153:15;;;13133:18;;;13126:43;13018:18;;883:51:11;12871:304:23;789:156:11;955:32;966:7;975:3;980:6;955:10;:32::i;:::-;681:313;;;:::o;2293:101:6:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;4932:163:22:-;1531:13:6;:11;:13::i;:::-;-1:-1:-1;;;;;5005:31:22;::::1;;::::0;;;:19:::1;:31;::::0;;;;;:38;;-1:-1:-1;;5005:38:22::1;5039:4;5005:38;::::0;;5058:30;::::1;::::0;5005:31;5058:30:::1;4932:163:::0;:::o;5101:1268::-;1531:13:6;:11;:13::i;:::-;5348:14:22::1;::::0;;5360:1:::1;5348:14:::0;;;;;::::1;::::0;;;5307:2:::1;::::0;5289:15:::1;::::0;5348:14;::::1;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;5388:22:22::1;::::0;;-1:-1:-1;;;;;10356:32:23;;5388:22:22::1;::::0;::::1;10338:51:23::0;5320:42:22;;-1:-1:-1;10311:18:23;5388:22:22::1;;;;;;;;;;;;5372:10;5383:1;5372:13;;;;;;;;:::i;:::-;;;;;;:38;;;;5421:24;5459:10;5471:4;5448:28;;;;;;;;-1:-1:-1::0;;;;;21003:32:23;;;;20985:51;;21079:14;21072:22;21067:2;21052:18;;21045:50;20973:2;20958:18;;20817:284;5448:28:22::1;;::::0;;;;::::1;-1:-1:-1::0;;5448:28:22;;;5532:362:::1;::::0;::::1;::::0;;-1:-1:-1;;;;;5532:362:22;::::1;::::0;;5487:42:::1;5448:28;5532:362:::0;::::1;::::0;;;;;;;;;;;;;;;5708:4:::1;5532:362:::0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6001:10:::1;::::0;:112;;-1:-1:-1;;;6001:112:22;;5448:28;;-1:-1:-1;5487:42:22;-1:-1:-1;;;;;6001:10:22::1;::::0;:17:::1;::::0;:112:::1;::::0;5448:28;;6001:112:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;6182:46:22;::::1;;::::0;;;:34:::1;:46;::::0;;;;;;;;:62;;-1:-1:-1;;6182:62:22::1;-1:-1:-1::0;;;;;6182:62:22;::::1;::::0;;::::1;::::0;;;6305:57;;10651:50:23;;;6182:62:22;;-1:-1:-1;6182:46:22;;6305:57:::1;::::0;10624:18:23;6305:57:22::1;;;;;;;5176:1193;;;;;5101:1268:::0;:::o;3156:144:8:-;3241:52;735:10:16;3274:8:8;3284;3241:18;:52::i;:::-;3156:144;;:::o;1384:48:22:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1384:48:22;;;;;;;:::i;3367:157:8:-;-1:-1:-1;;;;;3480:27:8;;;3457:4;3480:27;;;:18;:27;;;;;;;;:37;;;;;;;;;;;;;;;3367:157::o;3591:351::-;735:10:16;-1:-1:-1;;;;;3757:14:8;;;;;;;:49;;;3776:30;3793:4;3799:6;3776:16;:30::i;:::-;3775:31;3757:49;3753:129;;;3829:42;;-1:-1:-1;;;3829:42:8;;-1:-1:-1;;;;;13101:15:23;;;3829:42:8;;;13083:34:23;13153:15;;13133:18;;;13126:43;13018:18;;3829:42:8;12871:304:23;3753:129:8;3891:44;3909:4;3915:2;3919;3923:5;3930:4;3891:17;:44::i;2543:215:6:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:6;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:6;;2700:1:::1;2672:31;::::0;::::1;10338:51:23::0;10311:18;;2672:31:6::1;10192:203:23::0;2623:91:6::1;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;394:281:11:-;-1:-1:-1;;;;;481:23:11;;735:10:16;481:23:11;;;;:67;;-1:-1:-1;509:39:11;526:7;735:10:16;3367:157:8;:::i;509:39:11:-;508:40;481:67;477:156;;;735:10:16;600:12:11;656:96:16;477:156:11;643:25;649:7;658:2;662:5;643;:25::i;9015:445:8:-;-1:-1:-1;;;;;9208:16:8;;9204:88;;9247:34;;-1:-1:-1;;;9247:34:8;;9278:1;9247:34;;;10338:51:23;10311:18;;9247:34:8;10192:203:23;9204:88:8;-1:-1:-1;;;;;9305:18:8;;9301:88;;9346:32;;-1:-1:-1;;;9346:32:8;;9375:1;9346:32;;;10338:51:23;10311:18;;9346:32:8;10192:203:23;9301:88:8;9398:55;9425:4;9431:2;9435:3;9440:6;9448:4;9398:26;:55::i;:::-;9015:445;;;;;:::o;12784:265::-;-1:-1:-1;;;;;12888:18:8;;12884:88;;12929:32;;-1:-1:-1;;;12929:32:8;;12958:1;12929:32;;;10338:51:23;10311:18;;12929:32:8;10192:203:23;12884:88:8;12981:61;13008:4;13022:1;13026:3;13031:6;12981:61;;;;;;;;;;;;:26;:61::i;1796:162:6:-;1710:6;;-1:-1:-1;;;;;1710:6:6;735:10:16;1855:23:6;1851:101;;1901:40;;-1:-1:-1;;;1901:40:6;;735:10:16;1901:40:6;;;10338:51:23;10311:18;;1901:40:6;10192:203:23;2912:187:6;3004:6;;;-1:-1:-1;;;;;3020:17:6;;;-1:-1:-1;;;;;;3020:17:6;;;;;;;3052:40;;3004:6;;;3020:17;3004:6;;3052:40;;2985:16;;3052:40;2975:124;2912:187;:::o;13268:315:8:-;-1:-1:-1;;;;;13375:22:8;;13371:94;;13420:34;;-1:-1:-1;;;13420:34:8;;13451:1;13420:34;;;10338:51:23;10311:18;;13420:34:8;10192:203:23;13371:94:8;-1:-1:-1;;;;;13474:25:8;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;13474:46:8;;;;;;;;;;13535:41;;1255::23;;;13535::8;;1228:18:23;13535:41:8;;;;;;;13268:315;;;:::o;8151:463::-;-1:-1:-1;;;;;8273:16:8;;8269:88;;8312:34;;-1:-1:-1;;;8312:34:8;;8343:1;8312:34;;;10338:51:23;10311:18;;8312:34:8;10192:203:23;8269:88:8;-1:-1:-1;;;;;8370:18:8;;8366:88;;8411:32;;-1:-1:-1;;;8411:32:8;;8440:1;8411:32;;;10338:51:23;10311:18;;8411:32:8;10192:203:23;8366:88:8;16374:4;16368:11;;16444:1;16429:17;;;16575:4;16563:17;;16556:35;;;16692:17;;;16722;;;16188:23;16759:17;;16752:35;;;16895:17;;;16882:31;;;16368:11;8552:55;8579:4;8585:2;16368:11;16692:17;8602:4;8552:26;:55::i;:::-;8259:355;;8151:463;;;;;:::o;12099:329::-;-1:-1:-1;;;;;12178:18:8;;12174:88;;12219:32;;-1:-1:-1;;;12219:32:8;;12248:1;12219:32;;;10338:51:23;10311:18;;12219:32:8;10192:203:23;12174:88:8;16374:4;16368:11;;16444:1;16429:17;;;16575:4;16563:17;;16556:35;;;16692:17;;;16722;;;16188:23;16759:17;;16752:35;;;12360:61;;;;;;-1:-1:-1;16895:17:8;;;12360:61;;;16368:11;;16692:17;12360:61;;12387:4;;16368:11;;16692:17;;7004:690;7205:30;7213:4;7219:2;7223:3;7228:6;7205:7;:30::i;:::-;-1:-1:-1;;;;;7249:16:8;;;7245:443;;7330:10;;735::16;;7344:1:8;7330:15;7326:352;;4777:4:15;4748:35;;;4742:42;4748:35;;;4742:42;7483:67:8;7514:8;7524:4;7530:2;4742:42:15;;7545:4:8;7483:30;:67::i;:::-;7347:218;;7326:352;;;7589:74;7625:8;7635:4;7641:2;7645:3;7650:6;7658:4;7589:35;:74::i;8574:672:22:-;8963:36;8977:4;8983:2;8987:3;8992:6;8963:13;:36::i;:::-;8574:672;;;;:::o;13761:974:8:-;-1:-1:-1;;;;;13967:14:8;;;:18;13963:766;;14005:71;;-1:-1:-1;;;14005:71:8;;-1:-1:-1;;;;;14005:38:8;;;;;:71;;14044:8;;14054:4;;14060:2;;14064:5;;14071:4;;14005:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14005:71:8;;;;;;;;-1:-1:-1;;14005:71:8;;;;;;;;;;;;:::i;:::-;;;14001:718;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14360:6;:13;14377:1;14360:18;14356:349;;14464:26;;-1:-1:-1;;;14464:26:8;;-1:-1:-1;;;;;10356:32:23;;14464:26:8;;;10338:51:23;10311:18;;14464:26:8;10192:203:23;14356:349:8;14657:6;14651:13;14642:6;14638:2;14634:15;14627:38;14001:718;-1:-1:-1;;;;;;14125:55:8;;-1:-1:-1;;;14125:55:8;14121:174;;14250:26;;-1:-1:-1;;;14250:26:8;;-1:-1:-1;;;;;10356:32:23;;14250:26:8;;;10338:51:23;10311:18;;14250:26:8;10192:203:23;14923:1041:8;-1:-1:-1;;;;;15154:14:8;;;:18;15150:808;;15192:78;;-1:-1:-1;;;15192:78:8;;-1:-1:-1;;;;;15192:43:8;;;;;:78;;15236:8;;15246:4;;15252:3;;15257:6;;15265:4;;15192:78;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;15192:78:8;;;;;;;;-1:-1:-1;;15192:78:8;;;;;;;;;;;;:::i;:::-;;;15188:760;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;15349:60:8;;-1:-1:-1;;;15349:60:8;15345:179;;15479:26;;-1:-1:-1;;;15479:26:8;;-1:-1:-1;;;;;10356:32:23;;15479:26:8;;;10338:51:23;10311:18;;15479:26:8;10192:203:23;1128:221:12;1474:19:17;:17;:19::i;:::-;1306:36:12::1;1320:4;1326:2;1330:3;1335:6;1306:13;:36::i;2002:128:17:-:0;1920:7;;-1:-1:-1;;;1920:7:17;;;;2063:61;;;2098:15;;-1:-1:-1;;;2098:15:17;;;;;;;;;;;5144:1281:8;5279:6;:13;5265:3;:10;:27;5261:117;;5341:10;;5353:13;;5315:52;;-1:-1:-1;;;5315:52:8;;;;;17770:25:23;;;;17811:18;;;17804:34;17743:18;;5315:52:8;17596:248:23;5261:117:8;735:10:16;5388:16:8;5430:691;5454:3;:10;5450:1;:14;5430:691;;;4777:4:15;4768:14;;;4748:35;;;;;4742:42;4748:35;;;;;;4742:42;-1:-1:-1;;;;;5600:18:8;;;5596:420;;5638:19;5660:13;;;;;;;;;;;-1:-1:-1;;;;;5660:19:8;;;;;;;;;;5701;;;5697:129;;;5751:56;;-1:-1:-1;;;5751:56:8;;-1:-1:-1;;;;;23007:32:23;;5751:56:8;;;22989:51:23;23056:18;;;23049:34;;;23099:18;;;23092:34;;;23142:18;;;23135:34;;;22961:19;;5751:56:8;22758:417:23;5697:129:8;5942:9;:13;;;;;;;;;;;-1:-1:-1;;;;;5942:19:8;;;;;;;;;5964;;;;5942:41;;5596:420;-1:-1:-1;;;;;6034:16:8;;;6030:81;;6070:9;:13;;;;;;;;;;;-1:-1:-1;;;;;6070:17:8;;;;;;;;;:26;;6091:5;;6070:9;:26;;6091:5;;6070:26;:::i;:::-;;;;-1:-1:-1;;6030:81:8;-1:-1:-1;;5466:3:8;;5430:691;;;;6135:3;:10;6149:1;6135:15;6131:288;;4777:4:15;4748:35;;4742:42;6166:10:8;;4777:4:15;4748:35;;4742:42;6166:38:8;;-1:-1:-1;6312:2:8;-1:-1:-1;;;;;6281:45:8;6306:4;-1:-1:-1;;;;;6281:45:8;6296:8;-1:-1:-1;;;;;6281:45:8;;6316:2;6320:5;6281:45;;;;;;17770:25:23;;;17826:2;17811:18;;17804:34;17758:2;17743:18;;17596:248;6281:45:8;;;;;;;;6152:185;;6131:288;;;6392:2;-1:-1:-1;;;;;6362:46:8;6386:4;-1:-1:-1;;;;;6362:46:8;6376:8;-1:-1:-1;;;;;6362:46:8;;6396:3;6401:6;6362:46;;;;;;;:::i;:::-;;;;;;;;5251:1174;5144:1281;;;;:::o;14:173:23:-;82:20;;-1:-1:-1;;;;;131:31:23;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:254::-;260:6;268;321:2;309:9;300:7;296:23;292:32;289:52;;;337:1;334;327:12;289:52;360:29;379:9;360:29;:::i;:::-;350:39;436:2;421:18;;;;408:32;;-1:-1:-1;;;192:254:23:o;633:131::-;-1:-1:-1;;;;;;707:32:23;;697:43;;687:71;;754:1;751;744:12;769:245;827:6;880:2;868:9;859:7;855:23;851:32;848:52;;;896:1;893;886:12;848:52;935:9;922:23;954:30;978:5;954:30;:::i;:::-;1003:5;769:245;-1:-1:-1;;;769:245:23:o;1307:127::-;1368:10;1363:3;1359:20;1356:1;1349:31;1399:4;1396:1;1389:15;1423:4;1420:1;1413:15;1690:423;1732:3;1770:5;1764:12;1797:6;1792:3;1785:19;1822:1;1832:162;1846:6;1843:1;1840:13;1832:162;;;1908:4;1964:13;;;1960:22;;1954:29;1936:11;;;1932:20;;1925:59;1861:12;1832:162;;;1836:3;2039:1;2032:4;2023:6;2018:3;2014:16;2010:27;2003:38;2102:4;2095:2;2091:7;2086:2;2078:6;2074:15;2070:29;2065:3;2061:39;2057:50;2050:57;;;1690:423;;;;:::o;2118:985::-;2498:4;2527:3;2557:6;2546:9;2539:25;2594:1;2586:6;2583:13;2573:47;;2600:18;;:::i;:::-;2656:6;2651:2;2640:9;2636:18;2629:34;2699:6;2694:2;2683:9;2679:18;2672:34;2742:6;2737:2;2726:9;2722:18;2715:34;2786:6;2780:3;2769:9;2765:19;2758:35;2830:6;2824:3;2813:9;2809:19;2802:35;2874:6;2868:3;2857:9;2853:19;2846:35;2918:6;2912:3;2901:9;2897:19;2890:35;2991:1;2987;2982:3;2978:11;2974:19;2966:6;2962:32;2956:3;2945:9;2941:19;2934:61;3032:2;3026:3;3015:9;3011:19;3004:31;3052:45;3093:2;3082:9;3078:18;3070:6;3052:45;:::i;:::-;3044:53;2118:985;-1:-1:-1;;;;;;;;;;;;;2118:985:23:o;3108:180::-;3167:6;3220:2;3208:9;3199:7;3195:23;3191:32;3188:52;;;3236:1;3233;3226:12;3188:52;-1:-1:-1;3259:23:23;;3108:180;-1:-1:-1;3108:180:23:o;3293:220::-;3442:2;3431:9;3424:21;3405:4;3462:45;3503:2;3492:9;3488:18;3480:6;3462:45;:::i;3518:127::-;3579:10;3574:3;3570:20;3567:1;3560:31;3610:4;3607:1;3600:15;3634:4;3631:1;3624:15;3650:275;3721:2;3715:9;3786:2;3767:13;;-1:-1:-1;;3763:27:23;3751:40;;-1:-1:-1;;;;;3806:34:23;;3842:22;;;3803:62;3800:88;;;3868:18;;:::i;:::-;3904:2;3897:22;3650:275;;-1:-1:-1;3650:275:23:o;3930:183::-;3990:4;-1:-1:-1;;;;;4015:6:23;4012:30;4009:56;;;4045:18;;:::i;:::-;-1:-1:-1;4090:1:23;4086:14;4102:4;4082:25;;3930:183::o;4118:668::-;4172:5;4225:3;4218:4;4210:6;4206:17;4202:27;4192:55;;4243:1;4240;4233:12;4192:55;4279:6;4266:20;4305:4;4329:60;4345:43;4385:2;4345:43;:::i;:::-;4329:60;:::i;:::-;4411:3;4435:2;4430:3;4423:15;4463:4;4458:3;4454:14;4447:21;;4520:4;4514:2;4511:1;4507:10;4499:6;4495:23;4491:34;4477:48;;4548:3;4540:6;4537:15;4534:35;;;4565:1;4562;4555:12;4534:35;4601:4;4593:6;4589:17;4615:142;4631:6;4626:3;4623:15;4615:142;;;4697:17;;4685:30;;4735:12;;;;4648;;4615:142;;;-1:-1:-1;4775:5:23;4118:668;-1:-1:-1;;;;;;4118:668:23:o;4791:530::-;4833:5;4886:3;4879:4;4871:6;4867:17;4863:27;4853:55;;4904:1;4901;4894:12;4853:55;4940:6;4927:20;-1:-1:-1;;;;;4962:2:23;4959:26;4956:52;;;4988:18;;:::i;:::-;5032:55;5075:2;5056:13;;-1:-1:-1;;5052:27:23;5081:4;5048:38;5032:55;:::i;:::-;5112:2;5103:7;5096:19;5158:3;5151:4;5146:2;5138:6;5134:15;5130:26;5127:35;5124:55;;;5175:1;5172;5165:12;5124:55;5240:2;5233:4;5225:6;5221:17;5214:4;5205:7;5201:18;5188:55;5288:1;5263:16;;;5281:4;5259:27;5252:38;;;;5267:7;4791:530;-1:-1:-1;;;4791:530:23:o;5326:943::-;5480:6;5488;5496;5504;5512;5565:3;5553:9;5544:7;5540:23;5536:33;5533:53;;;5582:1;5579;5572:12;5533:53;5605:29;5624:9;5605:29;:::i;:::-;5595:39;;5653:38;5687:2;5676:9;5672:18;5653:38;:::i;:::-;5643:48;;5742:2;5731:9;5727:18;5714:32;-1:-1:-1;;;;;5806:2:23;5798:6;5795:14;5792:34;;;5822:1;5819;5812:12;5792:34;5845:61;5898:7;5889:6;5878:9;5874:22;5845:61;:::i;:::-;5835:71;;5959:2;5948:9;5944:18;5931:32;5915:48;;5988:2;5978:8;5975:16;5972:36;;;6004:1;6001;5994:12;5972:36;6027:63;6082:7;6071:8;6060:9;6056:24;6027:63;:::i;:::-;6017:73;;6143:3;6132:9;6128:19;6115:33;6099:49;;6173:2;6163:8;6160:16;6157:36;;;6189:1;6186;6179:12;6157:36;;6212:51;6255:7;6244:8;6233:9;6229:24;6212:51;:::i;:::-;6202:61;;;5326:943;;;;;;;;:::o;6274:186::-;6333:6;6386:2;6374:9;6365:7;6361:23;6357:32;6354:52;;;6402:1;6399;6392:12;6354:52;6425:29;6444:9;6425:29;:::i;6465:129::-;-1:-1:-1;;;;;6543:5:23;6539:30;6532:5;6529:41;6519:69;;6584:1;6581;6574:12;6599:522;6685:6;6693;6701;6754:2;6742:9;6733:7;6729:23;6725:32;6722:52;;;6770:1;6767;6760:12;6722:52;6806:9;6793:23;6783:33;;6867:2;6856:9;6852:18;6839:32;-1:-1:-1;;;;;6886:6:23;6883:30;6880:50;;;6926:1;6923;6916:12;6880:50;6949:49;6990:7;6981:6;6970:9;6966:22;6949:49;:::i;:::-;6939:59;;;7048:2;7037:9;7033:18;7020:32;7061:30;7085:5;7061:30;:::i;:::-;7110:5;7100:15;;;6599:522;;;;;:::o;7126:1146::-;7244:6;7252;7305:2;7293:9;7284:7;7280:23;7276:32;7273:52;;;7321:1;7318;7311:12;7273:52;7361:9;7348:23;-1:-1:-1;;;;;7431:2:23;7423:6;7420:14;7417:34;;;7447:1;7444;7437:12;7417:34;7485:6;7474:9;7470:22;7460:32;;7530:7;7523:4;7519:2;7515:13;7511:27;7501:55;;7552:1;7549;7542:12;7501:55;7588:2;7575:16;7610:4;7634:60;7650:43;7690:2;7650:43;:::i;7634:60::-;7728:15;;;7810:1;7806:10;;;;7798:19;;7794:28;;;7759:12;;;;7834:19;;;7831:39;;;7866:1;7863;7856:12;7831:39;7890:11;;;;7910:148;7926:6;7921:3;7918:15;7910:148;;;7992:23;8011:3;7992:23;:::i;:::-;7980:36;;7943:12;;;;8036;;;;7910:148;;;8077:5;-1:-1:-1;;8120:18:23;;8107:32;;-1:-1:-1;;8151:16:23;;;8148:36;;;8180:1;8177;8170:12;8148:36;;8203:63;8258:7;8247:8;8236:9;8232:24;8203:63;:::i;:::-;8193:73;;;7126:1146;;;;;:::o;8277:439::-;8330:3;8368:5;8362:12;8395:6;8390:3;8383:19;8421:4;8450;8445:3;8441:14;8434:21;;8489:4;8482:5;8478:16;8512:1;8522:169;8536:6;8533:1;8530:13;8522:169;;;8597:13;;8585:26;;8631:12;;;;8666:15;;;;8558:1;8551:9;8522:169;;;-1:-1:-1;8707:3:23;;8277:439;-1:-1:-1;;;;;8277:439:23:o;8721:261::-;8900:2;8889:9;8882:21;8863:4;8920:56;8972:2;8961:9;8957:18;8949:6;8920:56;:::i;8987:526::-;9083:6;9091;9099;9107;9160:3;9148:9;9139:7;9135:23;9131:33;9128:53;;;9177:1;9174;9167:12;9128:53;9217:9;9204:23;-1:-1:-1;;;;;9242:6:23;9239:30;9236:50;;;9282:1;9279;9272:12;9236:50;9305:49;9346:7;9337:6;9326:9;9322:22;9305:49;:::i;:::-;9295:59;9401:2;9386:18;;9373:32;;-1:-1:-1;9452:2:23;9437:18;;9424:32;;9503:2;9488:18;9475:32;;-1:-1:-1;8987:526:23;-1:-1:-1;;;;8987:526:23:o;9518:669::-;9645:6;9653;9661;9714:2;9702:9;9693:7;9689:23;9685:32;9682:52;;;9730:1;9727;9720:12;9682:52;9753:29;9772:9;9753:29;:::i;:::-;9743:39;;9833:2;9822:9;9818:18;9805:32;-1:-1:-1;;;;;9897:2:23;9889:6;9886:14;9883:34;;;9913:1;9910;9903:12;9883:34;9936:61;9989:7;9980:6;9969:9;9965:22;9936:61;:::i;:::-;9926:71;;10050:2;10039:9;10035:18;10022:32;10006:48;;10079:2;10069:8;10066:16;10063:36;;;10095:1;10092;10085:12;10063:36;;10118:63;10173:7;10162:8;10151:9;10147:24;10118:63;:::i;:::-;10108:73;;;9518:669;;;;;:::o;10712:347::-;10777:6;10785;10838:2;10826:9;10817:7;10813:23;10809:32;10806:52;;;10854:1;10851;10844:12;10806:52;10877:29;10896:9;10877:29;:::i;:::-;10867:39;;10956:2;10945:9;10941:18;10928:32;11003:5;10996:13;10989:21;10982:5;10979:32;10969:60;;11025:1;11022;11015:12;10969:60;11048:5;11038:15;;;10712:347;;;;;:::o;11283:260::-;11351:6;11359;11412:2;11400:9;11391:7;11387:23;11383:32;11380:52;;;11428:1;11425;11418:12;11380:52;11451:29;11470:9;11451:29;:::i;:::-;11441:39;;11499:38;11533:2;11522:9;11518:18;11499:38;:::i;:::-;11489:48;;11283:260;;;;;:::o;11548:606::-;11652:6;11660;11668;11676;11684;11737:3;11725:9;11716:7;11712:23;11708:33;11705:53;;;11754:1;11751;11744:12;11705:53;11777:29;11796:9;11777:29;:::i;:::-;11767:39;;11825:38;11859:2;11848:9;11844:18;11825:38;:::i;:::-;11815:48;;11910:2;11899:9;11895:18;11882:32;11872:42;;11961:2;11950:9;11946:18;11933:32;11923:42;;12016:3;12005:9;12001:19;11988:33;-1:-1:-1;;;;;12036:6:23;12033:30;12030:50;;;12076:1;12073;12066:12;12030:50;12099:49;12140:7;12131:6;12120:9;12116:22;12099:49;:::i;12159:322::-;12236:6;12244;12252;12305:2;12293:9;12284:7;12280:23;12276:32;12273:52;;;12321:1;12318;12311:12;12273:52;12344:29;12363:9;12344:29;:::i;:::-;12334:39;12420:2;12405:18;;12392:32;;-1:-1:-1;12471:2:23;12456:18;;;12443:32;;12159:322;-1:-1:-1;;;12159:322:23:o;12486:380::-;12565:1;12561:12;;;;12608;;;12629:61;;12683:4;12675:6;12671:17;12661:27;;12629:61;12736:2;12728:6;12725:14;12705:18;12702:38;12699:161;;12782:10;12777:3;12773:20;12770:1;12763:31;12817:4;12814:1;12807:15;12845:4;12842:1;12835:15;12699:161;;12486:380;;;:::o;13944:317::-;14121:2;14110:9;14103:21;14084:4;14141:45;14182:2;14171:9;14167:18;14159:6;14141:45;:::i;:::-;14133:53;;14251:1;14247;14242:3;14238:11;14234:19;14226:6;14222:32;14217:2;14206:9;14202:18;14195:60;13944:317;;;;;:::o;14266:127::-;14327:10;14322:3;14318:20;14315:1;14308:31;14358:4;14355:1;14348:15;14382:4;14379:1;14372:15;14398:143;14482:1;14475:5;14472:12;14462:46;;14488:18;;:::i;:::-;14517;;14398:143::o;14546:597::-;14597:3;14628;14660:5;14654:12;14687:6;14682:3;14675:19;14713:4;14742;14737:3;14733:14;14726:21;;14800:4;14790:6;14787:1;14783:14;14776:5;14772:26;14768:37;14839:4;14832:5;14828:16;14862:1;14872:245;14886:6;14883:1;14880:13;14872:245;;;14973:2;14969:7;14961:5;14955:4;14951:16;14947:30;14942:3;14935:43;14999:38;15032:4;15023:6;15017:13;14999:38;:::i;:::-;15095:12;;;;14991:46;-1:-1:-1;15060:15:23;;;;14908:1;14901:9;14872:245;;;-1:-1:-1;15133:4:23;;14546:597;-1:-1:-1;;;;;;;14546:597:23:o;15148:2189::-;15634:3;15623:9;15616:22;15647:53;15695:3;15684:9;15680:19;15671:6;15665:13;-1:-1:-1;;;;;10465:30:23;10453:43;;10400:102;15647:53;15597:4;15747;15739:6;15735:17;15729:24;15762:52;15809:3;15798:9;15794:19;15780:12;-1:-1:-1;;;;;10465:30:23;10453:43;;10400:102;15762:52;-1:-1:-1;15863:4:23;15851:17;;15845:24;-1:-1:-1;;;;;10465:30:23;;;15927:3;15912:19;;10453:43;15981:4;15969:17;;15963:24;10465:30;16045:3;16030:19;;10453:43;16099:3;16087:16;;16081:23;-1:-1:-1;;;;;1505:31:23;;16123:3;16170:18;;;1493:44;;;;16238:3;16230:6;16226:16;16220:23;16198:45;;16262:3;16274:53;16323:2;16312:9;16308:18;16292:14;-1:-1:-1;;;;;10465:30:23;10453:43;;10400:102;16274:53;16376:3;16368:6;16364:16;16358:23;16336:45;;16400:6;16415:64;16475:2;16464:9;16460:18;16444:14;16415:64;:::i;:::-;16528:3;16516:16;;16510:23;1089:13;1082:21;16589:3;16574:19;;1070:34;16631:15;;;16625:22;16678:3;16663:19;;16656:31;;;;16625:22;-1:-1:-1;16710:63:23;16768:3;16753:19;;16625:22;16710:63;:::i;:::-;16810:15;;;16804:22;16867;;;-1:-1:-1;;16863:37:23;16857:3;16842:19;;16835:66;16696:77;;-1:-1:-1;16804:22:23;-1:-1:-1;16921:41:23;16696:77;16804:22;16921:41;:::i;:::-;16910:52;;;17009:9;17004:3;17000:19;16993:4;16982:9;16978:20;16971:49;17043:40;17079:3;1639:1;1627:14;;1674:4;1665:14;;1548:137;17043:40;17121:22;;;17114:4;17099:20;;17092:52;1639:1;1627:14;;17029:54;-1:-1:-1;1674:4:23;1665:14;;17248:22;;;17241:4;17226:20;;17219:52;1639:1;1627:14;;17153:57;-1:-1:-1;1674:4:23;1665:14;;17280:51;15148:2189;-1:-1:-1;;;;15148:2189:23:o;17342:249::-;17411:6;17464:2;17452:9;17443:7;17439:23;17435:32;17432:52;;;17480:1;17477;17470:12;17432:52;17512:9;17506:16;17531:30;17555:5;17531:30;:::i;17849:127::-;17910:10;17905:3;17901:20;17898:1;17891:31;17941:4;17938:1;17931:15;17965:4;17962:1;17955:15;17981:217;18021:1;18047;18037:132;;18091:10;18086:3;18082:20;18079:1;18072:31;18126:4;18123:1;18116:15;18154:4;18151:1;18144:15;18037:132;-1:-1:-1;18183:9:23;;17981:217::o;18329:543::-;18431:2;18426:3;18423:11;18420:446;;;18467:1;18491:5;18488:1;18481:16;18535:4;18532:1;18522:18;18605:2;18593:10;18589:19;18586:1;18582:27;18576:4;18572:38;18641:4;18629:10;18626:20;18623:47;;;-1:-1:-1;18664:4:23;18623:47;18719:2;18714:3;18710:12;18707:1;18703:20;18697:4;18693:31;18683:41;;18774:82;18792:2;18785:5;18782:13;18774:82;;;18837:17;;;18818:1;18807:13;18774:82;;19048:1345;19174:3;19168:10;-1:-1:-1;;;;;19193:6:23;19190:30;19187:56;;;19223:18;;:::i;:::-;19252:97;19342:6;19302:38;19334:4;19328:11;19302:38;:::i;:::-;19296:4;19252:97;:::i;:::-;19404:4;;19461:2;19450:14;;19478:1;19473:663;;;;20180:1;20197:6;20194:89;;;-1:-1:-1;20249:19:23;;;20243:26;20194:89;-1:-1:-1;;19005:1:23;19001:11;;;18997:24;18993:29;18983:40;19029:1;19025:11;;;18980:57;20296:81;;19443:944;;19473:663;18276:1;18269:14;;;18313:4;18300:18;;-1:-1:-1;;19509:20:23;;;19627:236;19641:7;19638:1;19635:14;19627:236;;;19730:19;;;19724:26;19709:42;;19822:27;;;;19790:1;19778:14;;;;19657:19;;19627:236;;;19631:3;19891:6;19882:7;19879:19;19876:201;;;19952:19;;;19946:26;-1:-1:-1;;20035:1:23;20031:14;;;20047:3;20027:24;20023:37;20019:42;20004:58;19989:74;;19876:201;-1:-1:-1;;;;;20123:1:23;20107:14;;;20103:22;20090:36;;-1:-1:-1;19048:1345:23:o;20677:135::-;20716:3;20737:17;;;20734:43;;20757:18;;:::i;:::-;-1:-1:-1;20804:1:23;20793:13;;20677:135::o;21106:561::-;-1:-1:-1;;;;;21403:15:23;;;21385:34;;21455:15;;21450:2;21435:18;;21428:43;21502:2;21487:18;;21480:34;;;21545:2;21530:18;;21523:34;;;21365:3;21588;21573:19;;21566:32;;;21328:4;;21615:46;;21641:19;;21633:6;21615:46;:::i;:::-;21607:54;21106:561;-1:-1:-1;;;;;;;21106:561:23:o;21672:249::-;21741:6;21794:2;21782:9;21773:7;21769:23;21765:32;21762:52;;;21810:1;21807;21800:12;21762:52;21842:9;21836:16;21861:30;21885:5;21861:30;:::i;21926:827::-;-1:-1:-1;;;;;22323:15:23;;;22305:34;;22375:15;;22370:2;22355:18;;22348:43;22285:3;22422:2;22407:18;;22400:31;;;22248:4;;22454:57;;22491:19;;22483:6;22454:57;:::i;:::-;22559:9;22551:6;22547:22;22542:2;22531:9;22527:18;22520:50;22593:44;22630:6;22622;22593:44;:::i;:::-;22579:58;;22686:9;22678:6;22674:22;22668:3;22657:9;22653:19;22646:51;22714:33;22740:6;22732;22714:33;:::i;:::-;22706:41;21926:827;-1:-1:-1;;;;;;;;21926:827:23:o;23180:125::-;23245:9;;;23266:10;;;23263:36;;;23279:18;;:::i;23310:465::-;23567:2;23556:9;23549:21;23530:4;23593:56;23645:2;23634:9;23630:18;23622:6;23593:56;:::i;:::-;23697:9;23689:6;23685:22;23680:2;23669:9;23665:18;23658:50;23725:44;23762:6;23754;23725:44;:::i;:::-;23717:52;23310:465;-1:-1:-1;;;;;23310:465:23:o"},"gasEstimates":{"creation":{"codeDepositCost":"1835000","executionCost":"infinite","totalCost":"infinite"},"external":{"attestResearchAuthor(uint256,string,uint64)":"infinite","attestResearcherVerification(address)":"infinite","balanceOf(address,uint256)":"2660","balanceOfBatch(address[],uint256[])":"infinite","burn(address,uint256,uint256)":"infinite","burnBatch(address,uint256[],uint256[])":"infinite","createResearch(string,uint256,uint256,uint256)":"infinite","isApprovedForAll(address,address)":"infinite","isVerifiedResearcher(address)":"2616","owner()":"2409","paused()":"2410","renounceOwnership()":"infinite","researchById(uint256)":"infinite","researchRequest(address,uint256)":"infinite","researcherVerificationAttestations(address)":"2669","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"infinite","safeTransferFrom(address,address,uint256,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26792","spInstance()":"2359","supportsInterface(bytes4)":"578","transferOwnership(address)":"28446","uri(uint256)":"infinite","verifiedResearchers(address)":"2665","verifyResearcher(address)":"27964"},"internal":{"_update(address,address,uint256[] memory,uint256[] memory)":"infinite"}},"methodIdentifiers":{"attestResearchAuthor(uint256,string,uint64)":"4dd2febe","attestResearcherVerification(address)":"85235d3d","balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","burn(address,uint256,uint256)":"f5298aca","burnBatch(address,uint256[],uint256[])":"6b20c454","createResearch(string,uint256,uint256,uint256)":"68e2cea8","isApprovedForAll(address,address)":"e985e9c5","isVerifiedResearcher(address)":"508f3a37","owner()":"8da5cb5b","paused()":"5c975abb","renounceOwnership()":"715018a6","researchById(uint256)":"c2a756ca","researchRequest(address,uint256)":"08f3e371","researcherVerificationAttestations(address)":"8f192180","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","spInstance()":"a8c5dc33","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b","uri(uint256)":"0e89341c","verifiedResearchers(address)":"36f58e5f","verifyResearcher(address)":"73fd653d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAttestation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokenBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthenticated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLiquidable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ResearchCap\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"researchId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"researcher\",\"type\":\"address\"}],\"name\":\"ResearchCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"researcher\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"attestationId\",\"type\":\"uint64\"}],\"name\":\"ResearcherVerificationAttested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"researcher\",\"type\":\"address\"}],\"name\":\"ResearcherVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"researcher\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"attestationId\",\"type\":\"uint64\"}],\"name\":\"VerificationAttested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"researchId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"linkedAttestationId\",\"type\":\"uint64\"}],\"name\":\"attestResearchAuthor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"researcher\",\"type\":\"address\"}],\"name\":\"attestResearcherVerification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"repo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"invest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"articlePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"articlePriceIncreaseRate\",\"type\":\"uint256\"}],\"name\":\"createResearch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"researcher\",\"type\":\"address\"}],\"name\":\"isVerifiedResearcher\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"researchById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Scientify4.ResearchState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"articlePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"articlePriceIncreaseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"documentCID\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"researchRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Scientify4.ResearchState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"articlePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"articlePriceIncreaseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"documentCID\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"researcherVerificationAttestations\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spInstance\",\"outputs\":[{\"internalType\":\"contract ISP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"verifiedResearchers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"researcher\",\"type\":\"address\"}],\"name\":\"verifyResearcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Scientify4.sol\":\"Scientify4\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ethsign/sign-protocol-evm/src/interfaces/ISP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IVersionable } from \\\"./IVersionable.sol\\\";\\nimport { Schema } from \\\"../models/Schema.sol\\\";\\nimport { Attestation, OffchainAttestation } from \\\"../models/Attestation.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Sign Protocol Interface\\n * @author Jack Xu @ EthSign\\n */\\ninterface ISP is IVersionable {\\n    event SchemaRegistered(uint64 schemaId);\\n    event AttestationMade(uint64 attestationId, string indexingKey);\\n    event AttestationRevoked(uint64 attestationId, string reason);\\n    event OffchainAttestationMade(string attestationId);\\n    event OffchainAttestationRevoked(string attestationId, string reason);\\n\\n    /**\\n     * @dev 0x9e87fac8\\n     */\\n    error Paused();\\n    /**\\n     * @dev 0x38f8c6c4\\n     */\\n    error SchemaNonexistent();\\n    /**\\n     * @dev 0x71984561\\n     */\\n    error SchemaWrongRegistrant();\\n    /**\\n     * @dev 0x8ac42f49\\n     */\\n    error AttestationIrrevocable();\\n    /**\\n     * @dev 0x54681a13\\n     */\\n    error AttestationNonexistent();\\n    /**\\n     * @dev 0xa65e02ed\\n     */\\n    error AttestationInvalidDuration();\\n    /**\\n     * @dev 0xd8c3da86\\n     */\\n    error AttestationAlreadyRevoked();\\n    /**\\n     * @dev 0xa9ad2007\\n     */\\n    error AttestationWrongAttester();\\n    /**\\n     * @dev 0xc83e3cdf\\n     */\\n    error OffchainAttestationExists();\\n    /**\\n     * @dev 0xa006519a\\n     */\\n    error OffchainAttestationNonexistent();\\n    /**\\n     * @dev 0xa0671d20\\n     */\\n    error OffchainAttestationAlreadyRevoked();\\n    /**\\n     * @dev 0xfdf4e6f9\\n     */\\n    error InvalidDelegateSignature();\\n    /**\\n     * @dev 0x5c34b9cc\\n     */\\n    error LegacySPRequired();\\n\\n    /**\\n     * @notice Registers a Schema.\\n     * @dev Emits `SchemaRegistered`.\\n     * @param schema See `Schema`.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @return schemaId The assigned ID of the registered schema.\\n     */\\n    function register(Schema memory schema, bytes calldata delegateSignature) external returns (uint64 schemaId);\\n\\n    /**\\n     * @notice Makes an attestation.\\n     * @dev Emits `AttestationMade`.\\n     * @param attestation See `Attestation`.\\n     * @param indexingKey Used by the frontend to aid indexing.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @param extraData This is forwarded to the resolver directly.\\n     * @return attestationId The assigned ID of the attestation.\\n     */\\n    function attest(\\n        Attestation calldata attestation,\\n        string calldata indexingKey,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64 attestationId);\\n\\n    /**\\n     * @notice Makes an attestation where the schema hook expects ETH payment.\\n     * @dev Emits `AttestationMade`.\\n     * @param attestation See `Attestation`.\\n     * @param resolverFeesETH Amount of funds to send to the hook.\\n     * @param indexingKey Used by the frontend to aid indexing.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @param extraData This is forwarded to the resolver directly.\\n     * @return attestationId The assigned ID of the attestation.\\n     */\\n    function attest(\\n        Attestation calldata attestation,\\n        uint256 resolverFeesETH,\\n        string calldata indexingKey,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable\\n        returns (uint64 attestationId);\\n\\n    /**\\n     * @notice Makes an attestation where the schema hook expects ERC20 payment.\\n     * @dev Emits `AttestationMade`.\\n     * @param attestation See `Attestation`.\\n     * @param resolverFeesERC20Token ERC20 token address used for payment.\\n     * @param resolverFeesERC20Amount Amount of funds to send to the hook.\\n     * @param indexingKey Used by the frontend to aid indexing.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @param extraData This is forwarded to the resolver directly.\\n     * @return attestationId The assigned ID of the attestation.\\n     */\\n    function attest(\\n        Attestation calldata attestation,\\n        IERC20 resolverFeesERC20Token,\\n        uint256 resolverFeesERC20Amount,\\n        string calldata indexingKey,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64 attestationId);\\n\\n    /**\\n     * @notice Timestamps an off-chain data ID.\\n     * @dev Emits `OffchainAttestationMade`.\\n     * @param offchainAttestationId The off-chain data ID.\\n     * @param delegateAttester An optional delegated attester that authorized the caller to attest on their behalf if\\n     * this is a delegated attestation. Use `address(0)` otherwise.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise. Use `\\\"\\\"` or `0x` otherwise.\\n     */\\n    function attestOffchain(\\n        string calldata offchainAttestationId,\\n        address delegateAttester,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Revokes an existing revocable attestation.\\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\\n     * @param attestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     * @param extraData This is forwarded to the resolver directly.\\n     */\\n    function revoke(\\n        uint64 attestationId,\\n        string calldata reason,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Revokes an existing revocable attestation where the schema hook expects ERC20 payment.\\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\\n     * @param attestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param resolverFeesETH Amount of funds to send to the hook.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     * @param extraData This is forwarded to the resolver directly.\\n     */\\n    function revoke(\\n        uint64 attestationId,\\n        string calldata reason,\\n        uint256 resolverFeesETH,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    /**\\n     * @notice Revokes an existing revocable attestation where the schema hook expects ERC20 payment.\\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\\n     * @param attestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param resolverFeesERC20Token ERC20 token address used for payment.\\n     * @param resolverFeesERC20Amount Amount of funds to send to the hook.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     * @param extraData This is forwarded to the resolver directly.\\n     */\\n    function revoke(\\n        uint64 attestationId,\\n        string calldata reason,\\n        IERC20 resolverFeesERC20Token,\\n        uint256 resolverFeesERC20Amount,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Revokes an existing offchain attestation.\\n     * @dev Emits `OffchainAttestationRevoked`. Must be called by the attester.\\n     * @param offchainAttestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     */\\n    function revokeOffchain(\\n        string calldata offchainAttestationId,\\n        string calldata reason,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch registers a Schema.\\n     */\\n    function registerBatch(\\n        Schema[] calldata schemas,\\n        bytes calldata delegateSignature\\n    )\\n        external\\n        returns (uint64[] calldata schemaIds);\\n\\n    /**\\n     * @notice Batch attests.\\n     */\\n    function attestBatch(\\n        Attestation[] calldata attestations,\\n        string[] calldata indexingKeys,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64[] calldata attestationIds);\\n\\n    /**\\n     * @notice Batch attests where the schema hook expects ETH payment.\\n     */\\n    function attestBatch(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata resolverFeesETH,\\n        string[] calldata indexingKeys,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable\\n        returns (uint64[] calldata attestationIds);\\n\\n    /**\\n     * @notice Batch attests where the schema hook expects ERC20 payment.\\n     */\\n    function attestBatch(\\n        Attestation[] calldata attestations,\\n        IERC20[] calldata resolverFeesERC20Tokens,\\n        uint256[] calldata resolverFeesERC20Amount,\\n        string[] calldata indexingKeys,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64[] calldata attestationIds);\\n\\n    /**\\n     * @notice Batch timestamps off-chain data IDs.\\n     */\\n    function attestOffchainBatch(\\n        string[] calldata offchainAttestationIds,\\n        address delegateAttester,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch revokes revocable on-chain attestations.\\n     */\\n    function revokeBatch(\\n        uint64[] calldata attestationIds,\\n        string[] calldata reasons,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch revokes revocable on-chain attestations where the schema hook expects ETH payment.\\n     */\\n    function revokeBatch(\\n        uint64[] calldata attestationIds,\\n        string[] calldata reasons,\\n        uint256[] calldata resolverFeesETH,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    /**\\n     * @notice Batch revokes revocable on-chain attestations where the schema hook expects ERC20 payment.\\n     */\\n    function revokeBatch(\\n        uint64[] calldata attestationIds,\\n        string[] calldata reasons,\\n        IERC20[] calldata resolverFeesERC20Tokens,\\n        uint256[] calldata resolverFeesERC20Amount,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch revokes off-chain attestations.\\n     */\\n    function revokeOffchainBatch(\\n        string[] calldata offchainAttestationIds,\\n        string[] calldata reasons,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Returns the specified `Schema`.\\n     */\\n    function getSchema(uint64 schemaId) external view returns (Schema calldata);\\n\\n    /**\\n     * @notice Returns the specified `Attestation`.\\n     */\\n    function getAttestation(uint64 attestationId) external view returns (Attestation calldata);\\n\\n    /**\\n     * @notice Returns the specified `OffchainAttestation`.\\n     */\\n    function getOffchainAttestation(string calldata offchainAttestationId)\\n        external\\n        view\\n        returns (OffchainAttestation calldata);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated registration.\\n     */\\n    function getDelegatedRegisterHash(Schema memory schema) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch registration.\\n     */\\n    function getDelegatedRegisterBatchHash(Schema[] memory schemas) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated attestation.\\n     */\\n    function getDelegatedAttestHash(Attestation calldata attestation) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch attestation.\\n     */\\n    function getDelegatedAttestBatchHash(Attestation[] calldata attestations) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated offchain attestation.\\n     */\\n    function getDelegatedOffchainAttestHash(string calldata offchainAttestationId) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch offchain attestation.\\n     */\\n    function getDelegatedOffchainAttestBatchHash(string[] calldata offchainAttestationIds)\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated revocation.\\n     */\\n    function getDelegatedRevokeHash(uint64 attestationId, string memory reason) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch revocation.\\n     */\\n    function getDelegatedRevokeBatchHash(\\n        uint64[] memory attestationIds,\\n        string[] memory reasons\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated offchain revocation.\\n     */\\n    function getDelegatedOffchainRevokeHash(\\n        string memory offchainAttestationId,\\n        string memory reason\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch offchain revocation.\\n     */\\n    function getDelegatedOffchainRevokeBatchHash(\\n        string[] memory offchainAttestationIds,\\n        string[] memory reasons\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the current schema counter. This is incremented for each `Schema` registered.\\n     */\\n    function schemaCounter() external view returns (uint64);\\n\\n    /**\\n     * @notice Returns the current on-chain attestation counter. This is incremented for each `Attestation` made.\\n     */\\n    function attestationCounter() external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd5ddbb7cc6af2ee4c11d6c5dac739fc6254d84e13167bc054eb4477244490756\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/interfaces/ISPHook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SIGN Attestation Protocol Resolver Interface\\n * @author Jack Xu @ EthSign\\n */\\ninterface ISPHook {\\n    function didReceiveAttestation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    function didReceiveAttestation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        IERC20 resolverFeeERC20Token,\\n        uint256 resolverFeeERC20Amount,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    function didReceiveRevocation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    function didReceiveRevocation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        IERC20 resolverFeeERC20Token,\\n        uint256 resolverFeeERC20Amount,\\n        bytes calldata extraData\\n    )\\n        external;\\n}\\n\",\"keccak256\":\"0xa42159d34c4b8fa91507efacad81c14106f466efdc63b81a7d566dc0d2e736f4\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/interfaces/IVersionable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IVersionable\\n * @author Jack Xu @ EthSign\\n * @dev This interface helps contracts to keep track of their versioning for upgrade compatibility checks.\\n */\\ninterface IVersionable {\\n    function version() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0xbcf1955aa8423f4f77a46a988a7cd41a46ae92af42aa4546cfebdc2a92916129\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/models/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { DataLocation } from \\\"./DataLocation.sol\\\";\\n\\n/**\\n * @title Attestation\\n * @author Jack Xu @ EthSign\\n * @notice This struct represents an on-chain attestation record. This record is not deleted after revocation.\\n *\\n * `schemaId`: The `Schema` that this Attestation is based on. It must exist.\\n * `linkedAttestationId`: Useful if the current Attestation references a previous Attestation. It can either be 0 or an\\n * existing attestation ID.\\n * `attestTimestamp`: When the attestation was made. This is automatically populated by `_attest(...)`.\\n * `revokeTimestamp`: When the attestation was revoked. This is automatically populated by `_revoke(...)`.\\n * `attester`: The attester. At this time, the attester must be the caller of `attest()`.\\n * `validUntil`: The expiration timestamp of the Attestation. Must respect `Schema.maxValidFor`. 0 indicates no\\n * expiration date.\\n * `dataLocation`: Where `Attestation.data` is stored. See `DataLocation.DataLocation`.\\n * `revoked`: If the Attestation has been revoked. It is possible to make a revoked Attestation.\\n * `recipients`: The intended ABI-encoded recipients of this Attestation. This is of type `bytes` to support non-EVM\\n * repicients.\\n * `data`: The raw data of the Attestation based on `Schema.schema`. There is no enforcement here, however. Recommended\\n * to use `abi.encode`.\\n */\\nstruct Attestation {\\n    uint64 schemaId;\\n    uint64 linkedAttestationId;\\n    uint64 attestTimestamp;\\n    uint64 revokeTimestamp;\\n    address attester;\\n    uint64 validUntil;\\n    DataLocation dataLocation;\\n    bool revoked;\\n    bytes[] recipients;\\n    bytes data;\\n}\\n\\n/**\\n * @title OffchainAttestation\\n * @author Jack Xu @ EthSign\\n * @notice This struct represents an off-chain attestation record. This record is not deleted after revocation.\\n *\\n * `attester`: The attester. At this time, the attester must be the caller of `attestOffchain()`.\\n * `timestamp`: The `block.timestamp` of the function call.\\n */\\nstruct OffchainAttestation {\\n    address attester;\\n    uint64 timestamp;\\n}\\n\",\"keccak256\":\"0x8e2a182141d06bfdcce1325d70e8dd307f7d6b3d7b6fafcedc2dbabeb99fa30f\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/models/DataLocation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title DataLocation\\n * @author Jack Xu @ EthSign\\n * @notice This enum indicates where `Schema.data` and `Attestation.data` are stored.\\n */\\nenum DataLocation {\\n    ONCHAIN,\\n    ARWEAVE,\\n    IPFS,\\n    CUSTOM\\n}\\n\",\"keccak256\":\"0x14f64929317cae8ae822a0dd2c20315ac141f10fa255cd2b13a0a4962385ec10\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/models/Schema.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ISPHook } from \\\"../interfaces/ISPHook.sol\\\";\\nimport { DataLocation } from \\\"./DataLocation.sol\\\";\\n\\n/**\\n * @title Schema\\n * @author Jack Xu @ EthSign\\n * @notice This struct represents an on-chain Schema that Attestations can conform to.\\n *\\n * `registrant`: The address that registered this schema.\\n * `revocable`: Whether Attestations that adopt this Schema can be revoked.\\n * `dataLocation`: Where `Schema.data` is stored. See `DataLocation.DataLocation`.\\n * `maxValidFor`: The maximum number of seconds that an Attestation can remain valid. 0 means Attestations can be valid\\n * forever. This is enforced through `Attestation.validUntil`.\\n * `hook`: The `ISPHook` that is called at the end of every function. 0 means there is no hook set. See\\n * `ISPHook`.\\n * `timestamp`: When the schema was registered. This is automatically populated by `_register(...)`.\\n * `data`: The raw schema that `Attestation.data` should follow. Since there is no way to enforce this, it is a `string`\\n * for easy readability.\\n */\\nstruct Schema {\\n    address registrant;\\n    bool revocable;\\n    DataLocation dataLocation;\\n    uint64 maxValidFor;\\n    ISPHook hook;\\n    uint64 timestamp;\\n    string data;\\n}\\n\",\"keccak256\":\"0xcf3bd964790fdc7f72bacc86380b307e58bf15fa5f7332852d4969fe0db58216\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"./IERC1155.sol\\\";\\nimport {IERC1155Receiver} from \\\"./IERC1155Receiver.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {Arrays} from \\\"../../utils/Arrays.sol\\\";\\nimport {IERC1155Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n */\\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n    using Arrays for uint256[];\\n    using Arrays for address[];\\n\\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\\n\\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\n        }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\n     * (or `to`) is the zero address.\\n     *\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     *\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\n     */\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\n        if (ids.length != values.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids.unsafeMemoryAccess(i);\\n            uint256 value = values.unsafeMemoryAccess(i);\\n\\n            if (from != address(0)) {\\n                uint256 fromBalance = _balances[id][from];\\n                if (fromBalance < value) {\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n                }\\n                unchecked {\\n                    // Overflow not possible: value <= fromBalance\\n                    _balances[id][from] = fromBalance - value;\\n                }\\n            }\\n\\n            if (to != address(0)) {\\n                _balances[id][to] += value;\\n            }\\n        }\\n\\n        if (ids.length == 1) {\\n            uint256 id = ids.unsafeMemoryAccess(0);\\n            uint256 value = values.unsafeMemoryAccess(0);\\n            emit TransferSingle(operator, from, to, id, value);\\n        } else {\\n            emit TransferBatch(operator, from, to, ids, values);\\n        }\\n    }\\n\\n    /**\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\n     * contains code (eg. is a smart contract at the moment of execution).\\n     *\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\n     * overriding {_update} instead.\\n     */\\n    function _updateWithAcceptanceCheck(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal virtual {\\n        _update(from, to, ids, values);\\n        if (to != address(0)) {\\n            address operator = _msgSender();\\n            if (ids.length == 1) {\\n                uint256 id = ids.unsafeMemoryAccess(0);\\n                uint256 value = values.unsafeMemoryAccess(0);\\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\\n            } else {\\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC1155InvalidOperator(address(0));\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\n     */\\n    function _asSingletonArrays(\\n        uint256 element1,\\n        uint256 element2\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Load the free memory pointer\\n            array1 := mload(0x40)\\n            // Set array length to 1\\n            mstore(array1, 1)\\n            // Store the single element at the next word after the length (where content starts)\\n            mstore(add(array1, 0x20), element1)\\n\\n            // Repeat for next array locating it right after the first array\\n            array2 := add(array1, 0x40)\\n            mstore(array2, 1)\\n            mstore(add(array2, 0x20), element2)\\n\\n            // Update the free memory pointer by pointing after the second array\\n            mstore(0x40, add(array2, 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd9b0b8ee1ac6dfee14eb1ad4383a4739dbaa0f2036594bb3a16f0408085dadde\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC1155} from \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(address account, uint256 id, uint256 value) public virtual {\\n        if (account != _msgSender() && !isApprovedForAll(account, _msgSender())) {\\n            revert ERC1155MissingApprovalForAll(_msgSender(), account);\\n        }\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\\n        if (account != _msgSender() && !isApprovedForAll(account, _msgSender())) {\\n            revert ERC1155MissingApprovalForAll(_msgSender(), account);\\n        }\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0xdfab949ba677f4b122d0c14225e6db7ca8a65524e2f00049e57b04f68eceeb87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/ERC1155Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC1155} from \\\"../ERC1155.sol\\\";\\nimport {Pausable} from \\\"../../../utils/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * IMPORTANT: This contract does not include public pause and unpause functions. In\\n * addition to inheriting this contract, you must define both functions, invoking the\\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\\n * make the contract pause mechanism of the contract unreachable, and thus unusable.\\n */\\nabstract contract ERC1155Pausable is ERC1155, Pausable {\\n    /**\\n     * @dev See {ERC1155-_update}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _update(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) internal virtual override whenNotPaused {\\n        super._update(from, to, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0x866feab1d0ba71404ed131a1bcea272ce84f6215da28ff91d6dc2bebb7614b66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8806d620b6571932b662cfd48fbd518d4f70df1f88a23b5724cacde64a77bda1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"src/Scientify4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\nimport \\\"@ethsign/sign-protocol-evm/src/interfaces/ISP.sol\\\";\\nimport \\\"@ethsign/sign-protocol-evm/src/models/Attestation.sol\\\";\\nimport \\\"@ethsign/sign-protocol-evm/src/models/DataLocation.sol\\\";\\n\\n//only Attest Researcher.\\n// Clean Copy\\ncontract Scientify4 is ERC1155, Ownable, ERC1155Pausable, ERC1155Burnable {\\n    error NotAuthenticated();\\n    error ResearchCap();\\n    error NotEnoughValue();\\n    error PaymentFailed();\\n    error NotLiquidable();\\n    error NoTokenBalance();\\n    error InvalidAttestation();\\n\\n    uint256 private researchNumber = 1;\\n\\n    enum ResearchState {\\n        developing,\\n        developed,\\n        paid\\n    }\\n\\n    struct Research {\\n        uint256 id;\\n        ResearchState state;\\n        uint256 investment;\\n        uint256 articlePrice;\\n        uint256 sharePrice;\\n        uint256 articlePriceIncreaseRate;\\n        uint256 funding;\\n        uint256 profit;\\n        address owner;\\n        string documentCID;\\n    }\\n\\n    mapping(address => bool) public verifiedResearchers;\\n    mapping(address => Research[]) public researchRequest;\\n    mapping(uint256 => Research) public researchById;\\n    mapping(uint256 => string) private repository;\\n    mapping(address => uint64) public researcherVerificationAttestations;\\n\\n    // ISP public spInstance;\\n    // ISP public spInstance = ISP(0x878c92FD89d8E0B93Dc0a3c907A2adc7577e39c5);\\n    //Arbitrum Seplia\\n    ISP public spInstance = ISP(0x4e4af2a21ebf62850fD99Eb6253E1eFBb56098cD);\\n\\n    // uint64 public schemaId;\\n\\n    constructor() ERC1155(\\\"EURK\\\") Ownable(msg.sender) {}\\n\\n    // function setSPInstance(address instance) external onlyOwner {\\n    //     //ETH Sepolia: 0x878c92FD89d8E0B93Dc0a3c907A2adc7577e39c5\\n    //     spInstance = ISP(instance);\\n    // }\\n\\n    // function setSchemaID(uint64 schemaId_) external onlyOwner {\\n    //     schemaId = schemaId_;\\n    // }\\n    // Event to log the attestation of a researcher's verification\\n    event ResearcherVerificationAttested(\\n        address indexed researcher,\\n        uint64 attestationId\\n    );\\n\\n    event VerificationAttested(\\n        address indexed researcher,\\n        uint64 attestationId\\n    );\\n\\n    event ResearcherVerified(address indexed researcher);\\n\\n    // Event to log the creation of new research\\n    event ResearchCreated(uint256 researchId, address researcher);\\n\\n    function createResearch(\\n        string memory repo,\\n        uint256 invest,\\n        uint256 articlePrice,\\n        uint256 articlePriceIncreaseRate\\n    ) public {\\n        // Check if the sender is a verified researcher\\n        // if (!verifiedResearchers[msg.sender]) {\\n        //     revert NotAuthenticated();\\n        // }\\n\\n        // // Ensure that the sender has not exceeded the research request cap\\n        // if (researchRequest[msg.sender].length >= 5) {\\n        //     revert ResearchCap();\\n        // }\\n\\n        // The invest amount must be large enough to avoid issues with share price calculation.\\n        // This replaces the magic number 1e8 with a named constant for better readability.\\n        uint256 minInvest = 1e8;\\n        // if (invest < minInvest) {\\n        //     revert NotEnoughValue();\\n        // }\\n\\n        // Calculate the sharePrice safely. Since invest >= minInvest, this won't divide by zero.\\n        uint256 sharePrice = invest / minInvest;\\n\\n        // Proceed to create new research\\n        Research memory newResearch = Research({\\n            id: researchNumber,\\n            state: ResearchState.developing,\\n            investment: invest,\\n            articlePrice: articlePrice,\\n            sharePrice: sharePrice,\\n            articlePriceIncreaseRate: articlePriceIncreaseRate,\\n            funding: 0,\\n            profit: 0,\\n            owner: msg.sender,\\n            documentCID: repo\\n        });\\n\\n        // Add the new research to the sender's list of research requests and to the global ID map.\\n        researchRequest[msg.sender].push(newResearch);\\n        researchById[researchNumber] = newResearch;\\n\\n        // Emit an event for successful research creation before incrementing the researchNumber\\n        // to ensure that the event log and the state change are consistent.\\n        emit ResearchCreated(researchNumber, msg.sender);\\n\\n        // Increment research ID for the next entry\\n        researchNumber++;\\n\\n        // Linking research ID to the repository. This is done after the event emission\\n        // to ensure that all changes are logged correctly.\\n        repository[newResearch.id] = repo;\\n    }\\n\\n    function isVerifiedResearcher(\\n        address researcher\\n    ) public view returns (bool) {\\n        return verifiedResearchers[researcher];\\n    }\\n\\n    function verifyResearcher(address researcher) public onlyOwner {\\n        verifiedResearchers[researcher] = true;\\n        emit ResearcherVerified(researcher);\\n    }\\n\\n    function attestResearcherVerification(address researcher) public onlyOwner {\\n\\n        //test\\n        //ethereum sepolia\\n        // uint64 schemaId = 52;\\n        //arbitrum sepolia\\n        uint64 schemaId = 30;\\n\\n        bytes[] memory recipients = new bytes[](1);\\n        recipients[0] = abi.encode(researcher);\\n\\n        bytes memory encodedData = abi.encode(researcher, true);\\n\\n        Attestation memory verificationAttestation = Attestation({\\n            schemaId: schemaId,\\n            linkedAttestationId: 0,\\n            attestTimestamp: 0,\\n            revokeTimestamp: 0,\\n            attester: address(this),\\n            validUntil: 0,\\n            dataLocation: DataLocation.ONCHAIN,\\n            revoked: false,\\n            recipients: recipients,\\n            data: encodedData\\n        });\\n\\n        // Now we make the attestation call and obtain the attestationId\\n        uint64 attestationId = spInstance.attest(\\n            verificationAttestation,\\n            \\\"\\\",\\n            \\\"\\\",\\n            \\\"\\\"\\n        );\\n\\n        // Store the attestationId in a mapping if needed\\n        researcherVerificationAttestations[researcher] = attestationId;\\n\\n        // Emit an event for the attestation\\n        emit ResearcherVerificationAttested(researcher, attestationId);\\n    }\\n\\n    //Research Author Attestation\\n    // Function to attest to or endorse the authorship of a research paper\\n    function attestResearchAuthor(\\n        uint256 researchId,\\n        string memory cid,\\n        uint64 linkedAttestationId // Use 0 if it's an initial attestation\\n    ) public {\\n        // Only the owner or a verified researcher can call this function\\n        require(\\n            msg.sender == owner() || verifiedResearchers[msg.sender],\\n            \\\"Caller must be owner or verified researcher\\\"\\n        );\\n        // Fetch the research details\\n        Research storage research = researchById[researchId];\\n        \\n        require(research.id != 0, \\\"Research does not exist\\\");\\n\\n        //ethereum sepolia\\n        // uint64 schemaId = 67; \\n        //arbitrum sepolia\\n        uint64 schemaId = 31;\\n\\n        // Encode the CID and the owner's address for saving to attestation.data\\n        // This encodes both the CID and the owner's address into a single bytes object\\n        bytes memory encodedData = abi.encode(cid, research.owner);\\n\\n        // Prepare the recipients array\\n        bytes[] memory recipients = new bytes[](1);\\n        // Encoding the owner of the research as the recipient\\n        recipients[0] = abi.encode(research.owner);\\n\\n        // Create the attestation or endorsement\\n        Attestation memory researchAttestation = Attestation({\\n            schemaId: schemaId,\\n            linkedAttestationId: linkedAttestationId, // This links to a previous attestation if it's an endorsement\\n            attestTimestamp: 0,\\n            revokeTimestamp: 0,\\n            //test\\n            attester: address(this),\\n            validUntil: 0, // Optional: set an expiration if required\\n            dataLocation: DataLocation.ONCHAIN,\\n            revoked: false,\\n            recipients: recipients,\\n            data: encodedData\\n        });\\n\\n        // Make the attestation call and obtain the attestationId\\n        uint64 attestationId = spInstance.attest(\\n            researchAttestation,\\n            \\\"\\\",\\n            \\\"\\\",\\n            \\\"\\\"\\n        );\\n\\n        // Emit an event for the attestation or endorsement\\n        emit VerificationAttested(msg.sender, attestationId);\\n    }\\n\\n    function _update(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) internal override(ERC1155, ERC1155Pausable) {\\n        // Custom logic before the balance update\\n        // For example, you can emit an event or perform checks\\n\\n        // Call the parent contract's _update function to perform the actual balance update\\n        super._update(from, to, ids, values); // This calls ERC1155's _update function, and then ERC1155Pausable's _update if there's additional logic there\\n        // Custom logic after the balance update\\n        // For example, you can perform additional state changes or emit events\\n    }\\n}\\n\",\"keccak256\":\"0xe22be8fa9f142055cffd21bffb54bbf67d52c79999afc0940b358e9604682dd3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":957,"contract":"src/Scientify4.sol:Scientify4","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":963,"contract":"src/Scientify4.sol:Scientify4","label":"_operatorApprovals","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":965,"contract":"src/Scientify4.sol:Scientify4","label":"_uri","offset":0,"slot":"2","type":"t_string_storage"},{"astId":639,"contract":"src/Scientify4.sol:Scientify4","label":"_owner","offset":0,"slot":"3","type":"t_address"},{"astId":2566,"contract":"src/Scientify4.sol:Scientify4","label":"_paused","offset":20,"slot":"3","type":"t_bool"},{"astId":3908,"contract":"src/Scientify4.sol:Scientify4","label":"researchNumber","offset":0,"slot":"4","type":"t_uint256"},{"astId":3938,"contract":"src/Scientify4.sol:Scientify4","label":"verifiedResearchers","offset":0,"slot":"5","type":"t_mapping(t_address,t_bool)"},{"astId":3944,"contract":"src/Scientify4.sol:Scientify4","label":"researchRequest","offset":0,"slot":"6","type":"t_mapping(t_address,t_array(t_struct(Research)3934_storage)dyn_storage)"},{"astId":3949,"contract":"src/Scientify4.sol:Scientify4","label":"researchById","offset":0,"slot":"7","type":"t_mapping(t_uint256,t_struct(Research)3934_storage)"},{"astId":3953,"contract":"src/Scientify4.sol:Scientify4","label":"repository","offset":0,"slot":"8","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":3957,"contract":"src/Scientify4.sol:Scientify4","label":"researcherVerificationAttestations","offset":0,"slot":"9","type":"t_mapping(t_address,t_uint64)"},{"astId":3963,"contract":"src/Scientify4.sol:Scientify4","label":"spInstance","offset":0,"slot":"10","type":"t_contract(ISP)495"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(Research)3934_storage)dyn_storage":{"base":"t_struct(Research)3934_storage","encoding":"dynamic_array","label":"struct Scientify4.Research[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(ISP)495":{"encoding":"inplace","label":"contract ISP","numberOfBytes":"20"},"t_enum(ResearchState)3912":{"encoding":"inplace","label":"enum Scientify4.ResearchState","numberOfBytes":"1"},"t_mapping(t_address,t_array(t_struct(Research)3934_storage)dyn_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct Scientify4.Research[])","numberOfBytes":"32","value":"t_array(t_struct(Research)3934_storage)dyn_storage"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_address,t_uint64)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint64)","numberOfBytes":"32","value":"t_uint64"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_uint256,t_struct(Research)3934_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct Scientify4.Research)","numberOfBytes":"32","value":"t_struct(Research)3934_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Research)3934_storage":{"encoding":"inplace","label":"struct Scientify4.Research","members":[{"astId":3914,"contract":"src/Scientify4.sol:Scientify4","label":"id","offset":0,"slot":"0","type":"t_uint256"},{"astId":3917,"contract":"src/Scientify4.sol:Scientify4","label":"state","offset":0,"slot":"1","type":"t_enum(ResearchState)3912"},{"astId":3919,"contract":"src/Scientify4.sol:Scientify4","label":"investment","offset":0,"slot":"2","type":"t_uint256"},{"astId":3921,"contract":"src/Scientify4.sol:Scientify4","label":"articlePrice","offset":0,"slot":"3","type":"t_uint256"},{"astId":3923,"contract":"src/Scientify4.sol:Scientify4","label":"sharePrice","offset":0,"slot":"4","type":"t_uint256"},{"astId":3925,"contract":"src/Scientify4.sol:Scientify4","label":"articlePriceIncreaseRate","offset":0,"slot":"5","type":"t_uint256"},{"astId":3927,"contract":"src/Scientify4.sol:Scientify4","label":"funding","offset":0,"slot":"6","type":"t_uint256"},{"astId":3929,"contract":"src/Scientify4.sol:Scientify4","label":"profit","offset":0,"slot":"7","type":"t_uint256"},{"astId":3931,"contract":"src/Scientify4.sol:Scientify4","label":"owner","offset":0,"slot":"8","type":"t_address"},{"astId":3933,"contract":"src/Scientify4.sol:Scientify4","label":"documentCID","offset":0,"slot":"9","type":"t_string_storage"}],"numberOfBytes":"320"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}