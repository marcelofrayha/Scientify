"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("hardhat/config");
require("./type-extensions");
(0, config_1.extendConfig)((config, userConfig) => {
    const path = require('path');
    config.docgen ?? (config.docgen = {});
    config.docgen.root = config.paths.root;
    config.docgen.sourcesDir = path
        .relative(config.paths.root, config.paths.sources)
        .split(path.sep)
        .join(path.posix.sep);
});
(0, config_1.task)('docgen', async (_, hre) => {
    await hre.run('compile');
    const { promises: fs } = await Promise.resolve().then(() => __importStar(require('fs')));
    const { main } = await Promise.resolve().then(() => __importStar(require('../main')));
    const buildInfoPaths = await hre.artifacts.getBuildInfoPaths();
    const builds = await Promise.all(buildInfoPaths.map(async (p) => ({
        mtime: (await fs.stat(p)).mtimeMs,
        data: JSON.parse(await fs.readFile(p, 'utf8')),
    })));
    // Sort most recently modified first
    builds.sort((a, b) => b.mtime - a.mtime);
    await main(builds.map(b => b.data), hre.config.docgen);
});
//# sourceMappingURL=index.js.map